cscope 15 $HOME/Downloads/mosquitto-2.0.15/client               0000209487
	@client_props.c

19 
	~"c⁄fig.h
"

21 
	~<î∫o.h
>

22 
	~<f˙é.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 #i‚de‡
WIN32


27 
	~<uni°d.h
>

28 
	~<°rögs.h
>

30 
	~<¥o˚ss.h
>

31 
	~<wösock2.h
>

32 
	#¢¥ötf
 
•rötf_s


	)

33 
	#°∫ˇ£cmp
 
_°∫icmp


	)

36 
	~"mosquôto.h
"

37 
	~"mqâ_¥Ÿocﬁ.h
"

38 
	~"˛õ¡_sh¨ed.h
"

40 
	e¥›_ty≥


42 
	mPROP_TYPE_BYTE
,

43 
	mPROP_TYPE_INT16
,

44 
	mPROP_TYPE_INT32
,

45 
	mPROP_TYPE_BINARY
,

46 
	mPROP_TYPE_STRING
,

47 
	mPROP_TYPE_STRING_PAIR


63 
	$cfg_∑r£_¥›îty
(
mosq_c⁄fig
 *
cfg
, 
¨gc
, *
¨gv
[], *
idx
)

65 *
cmd«me
 = 
NULL
, *
¥›«me
 = NULL;

66 *
key
 = 
NULL
, *
vÆue
 = NULL;

67 
cmd
, 
idítifõr
, 
ty≥
;

68 
mosquôto_¥›îty
 **
¥›li°
;

69 
rc
;

70 
tm∂
;

71 
size_t
 
szt
;

74 if((*
idx
)+2 > 
¨gc
-1){

76 
	`Ârötf
(
°dîr
, "Error: --propertyárgument given butÇotÉnoughárguments specified.\n\n");

77  
MOSQ_ERR_INVAL
;

80 
cmd«me
 = 
¨gv
[*
idx
];

81 if(
	`mosquôto_°rög_to_comm™d
(
cmd«me
, &
cmd
)){

82 
	`Ârötf
(
°dîr
, "Error: Invalid command given in --propertyárgument.\n\n");

83  
MOSQ_ERR_INVAL
;

86 
¥›«me
 = 
¨gv
[(*
idx
)+1];

87 if(
	`mosquôto_°rög_to_¥›îty_öfo
(
¥›«me
, &
idítifõr
, &
ty≥
)){

88 
	`Ârötf
(
°dîr
, "Error: InvalidÖropertyÇame given in --propertyárgument.\n\n");

89  
MOSQ_ERR_INVAL
;

92 if(
	`mosquôto_¥›îty_check_comm™d
(
cmd
, 
idítifõr
)){

93 
	`Ârötf
(
°dîr
, "Eº‹: %†¥›îtyÇŸáŒowed f‹ %†ö --¥›îtyárgumít.\n\n", 
¥›«me
, 
cmd«me
);

94  
MOSQ_ERR_INVAL
;

97 if(
idítifõr
 =
MQTT_PROP_USER_PROPERTY
){

98 if((*
idx
)+3 > 
¨gc
-1){

100 
	`Ârötf
(
°dîr
, "Error: --propertyárgument given butÇotÉnoughárguments specified.\n\n");

101  
MOSQ_ERR_INVAL
;

104 
key
 = 
¨gv
[(*
idx
)+2];

105 
vÆue
 = 
¨gv
[(*
idx
)+3];

106 (*
idx
) += 3;

108 
vÆue
 = 
¨gv
[(*
idx
)+2];

109 (*
idx
) += 2;

112 
cmd
){

113 
CMD_CONNECT
:

114 
¥›li°
 = &
cfg
->
c⁄√˘_¥›s
;

117 
CMD_PUBLISH
:

118 if(
idítifõr
 =
MQTT_PROP_TOPIC_ALIAS
){

119 
cfg
->
have_t›ic_Æüs
 = 
åue
;

121 if(
idítifõr
 =
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
){

122 
	`Ârötf
(
°dîr
, "Eº‹: %†¥›îtyÇŸ suµ‹ãd f‹ %†ö --¥›îtyárgumít.\n\n", 
¥›«me
, 
cmd«me
);

123  
MOSQ_ERR_INVAL
;

125 
¥›li°
 = &
cfg
->
publish_¥›s
;

128 
CMD_SUBSCRIBE
:

129 if(
idítifõr
 !
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
 && idítifõ∏!
MQTT_PROP_USER_PROPERTY
){

130 
	`Ârötf
(
°dîr
, "Eº‹: %†¥›îtyÇŸ suµ‹ãd f‹ %†ö --¥›îtyárgumít.\n\n", 
¥›«me
, 
cmd«me
);

131  
MOSQ_ERR_NOT_SUPPORTED
;

133 
¥›li°
 = &
cfg
->
subs¸ibe_¥›s
;

136 
CMD_UNSUBSCRIBE
:

137 
¥›li°
 = &
cfg
->
unsubs¸ibe_¥›s
;

140 
CMD_DISCONNECT
:

141 
¥›li°
 = &
cfg
->
disc⁄√˘_¥›s
;

144 
CMD_AUTH
:

145 
	`Ârötf
(
°dîr
, "Eº‹: %†¥›îtyÇŸ suµ‹ãd f‹ %†ö --¥›îtyárgumít.\n\n", 
¥›«me
, 
cmd«me
);

146  
MOSQ_ERR_NOT_SUPPORTED
;

148 
CMD_WILL
:

149 
¥›li°
 = &
cfg
->
wûl_¥›s
;

152 
CMD_PUBACK
:

153 
CMD_PUBREC
:

154 
CMD_PUBREL
:

155 
CMD_PUBCOMP
:

156 
CMD_SUBACK
:

157 
CMD_UNSUBACK
:

158 
	`Ârötf
(
°dîr
, "Eº‹: %†¥›îtyÇŸ suµ‹ãd f‹ %†ö --¥›îtyárgumít.\n\n", 
¥›«me
, 
cmd«me
);

159  
MOSQ_ERR_NOT_SUPPORTED
;

162  
MOSQ_ERR_INVAL
;

165 
ty≥
){

166 
MQTT_PROP_TYPE_BYTE
:

167 
tm∂
 = 
	`©ﬁ
(
vÆue
);

168 if(
tm∂
 < 0 ||Åm∂ > 
UINT8_MAX
){

169 
	`Ârötf
(
°dîr
, "Eº‹: Pr›îty vÆuê(%ldËouào‡øngêf‹Ör›îty %s.\n\n", 
tm∂
, 
¥›«me
);

170  
MOSQ_ERR_INVAL
;

172 
rc
 = 
	`mosquôto_¥›îty_add_byã
(
¥›li°
, 
idítifõr
, (
uöt8_t
 )
tm∂
);

174 
MQTT_PROP_TYPE_INT16
:

175 
tm∂
 = 
	`©ﬁ
(
vÆue
);

176 if(
tm∂
 < 0 ||Åm∂ > 
UINT16_MAX
){

177 
	`Ârötf
(
°dîr
, "Eº‹: Pr›îty vÆuê(%ldËouào‡øngêf‹Ör›îty %s.\n\n", 
tm∂
, 
¥›«me
);

178  
MOSQ_ERR_INVAL
;

180 
rc
 = 
	`mosquôto_¥›îty_add_öt16
(
¥›li°
, 
idítifõr
, (
uöt16_t
 )
tm∂
);

182 
MQTT_PROP_TYPE_INT32
:

183 
tm∂
 = 
	`©ﬁ
(
vÆue
);

184 if(
tm∂
 < 0 ||Åm∂ > 
UINT32_MAX
){

185 
	`Ârötf
(
°dîr
, "Eº‹: Pr›îty vÆuê(%ldËouào‡øngêf‹Ör›îty %s.\n\n", 
tm∂
, 
¥›«me
);

186  
MOSQ_ERR_INVAL
;

188 
rc
 = 
	`mosquôto_¥›îty_add_öt32
(
¥›li°
, 
idítifõr
, (
uöt32_t
 )
tm∂
);

190 
MQTT_PROP_TYPE_VARINT
:

191 
tm∂
 = 
	`©ﬁ
(
vÆue
);

192 if(
tm∂
 < 0 ||Åm∂ > 
UINT32_MAX
){

193 
	`Ârötf
(
°dîr
, "Eº‹: Pr›îty vÆuê(%ldËouào‡øngêf‹Ör›îty %s.\n\n", 
tm∂
, 
¥›«me
);

194  
MOSQ_ERR_INVAL
;

196 
rc
 = 
	`mosquôto_¥›îty_add_v¨öt
(
¥›li°
, 
idítifõr
, (
uöt32_t
 )
tm∂
);

198 
MQTT_PROP_TYPE_BINARY
:

199 
szt
 = 
	`°æí
(
vÆue
);

200 if(
szt
 > 
UINT16_MAX
){

201 
	`Ârötf
(
°dîr
, "Eº‹: Pr›îty vÆuêtoÿl⁄g f‹Ör›îty %s.\n\n", 
¥›«me
);

202  
MOSQ_ERR_INVAL
;

204 
rc
 = 
	`mosquôto_¥›îty_add_bö¨y
(
¥›li°
, 
idítifõr
, 
vÆue
, (
uöt16_t
 )
szt
);

206 
MQTT_PROP_TYPE_STRING
:

207 
rc
 = 
	`mosquôto_¥›îty_add_°rög
(
¥›li°
, 
idítifõr
, 
vÆue
);

209 
MQTT_PROP_TYPE_STRING_PAIR
:

210 
rc
 = 
	`mosquôto_¥›îty_add_°rög_∑ú
(
¥›li°
, 
idítifõr
, 
key
, 
vÆue
);

213  
MOSQ_ERR_INVAL
;

215 if(
rc
){

216 
	`Ârötf
(
°dîr
, "Eº‹áddögÖr›îty %†%d\n", 
¥›«me
, 
ty≥
);

217  
rc
;

219  
MOSQ_ERR_SUCCESS
;

220 
	}
}

	@client_shared.c

19 
	~"c⁄fig.h
"

21 
	~<î∫o.h
>

22 
	~<f˙é.h
>

23 
	~<°d¨g.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 #i‚de‡
WIN32


28 
	~<uni°d.h
>

29 
	~<°rögs.h
>

31 
	~<¥o˚ss.h
>

32 
	~<wösock2.h
>

33 
	#¢¥ötf
 
•rötf_s


	)

34 
	#°∫ˇ£cmp
 
_°∫icmp


	)

37 
	~<mosquôto.h
>

38 
	~<mqâ_¥Ÿocﬁ.h
>

39 
	~"˛õ¡_sh¨ed.h
"

41 #ifde‡
WITH_SOCKS


42 
mosquôto__∑r£_socks_uæ
(
mosq_c⁄fig
 *
cfg
, *
uæ
);

44 
˛õ¡_c⁄fig_löe_¥oc
(
mosq_c⁄fig
 *
cfg
, 
pub_‹_sub
, 
¨gc
, *
¨gv
[]);

47 
	$check_f‹m©
(c⁄° *
°r
)

49 
size_t
 
i
;

50 
size_t
 
Àn
;

52 
Àn
 = 
	`°æí
(
°r
);

53 
i
=0; i<
Àn
; i++){

54 if(
°r
[
i
] == '%'){

55 if(
i
 =
Àn
-1){

57 
	`Ârötf
(
°dîr
, "Error: Incomplete format specifier.\n");

60 if(
°r
[
i
+1] == '0' || str[i+1] == '-'){

62 
i
++;

63 if(
i
 =
Àn
-1){

65 
	`Ârötf
(
°dîr
, "Error: Incomplete format specifier.\n");

71 
°r
[
i
+1] >= '0' && str[i+1] <= '9'){

72 
i
++;

73 if(
i
 =
Àn
-1){

75 
	`Ârötf
(
°dîr
, "Error: Incomplete format specifier.\n");

80 if(
°r
[
i
+1] == '.'){

82 
i
++;

83 if(
i
 =
Àn
-1){

85 
	`Ârötf
(
°dîr
, "Error: Incomplete format specifier.\n");

89 
°r
[
i
+1] >= '0' && str[i+1] <= '9'){

90 
i
++;

91 if(
i
 =
Àn
-1){

93 
	`Ârötf
(
°dîr
, "Error: Incomplete format specifier.\n");

99 if(
°r
[
i
+1] == '%'){

101 }if(
°r
[
i
+1] == 'A'){

103 }if(
°r
[
i
+1] == 'C'){

105 }if(
°r
[
i
+1] == 'D'){

107 }if(
°r
[
i
+1] == 'E'){

109 }if(
°r
[
i
+1] == 'F'){

111 }if(
°r
[
i
+1] == 'I'){

113 }if(
°r
[
i
+1] == 'l'){

115 }if(
°r
[
i
+1] == 'm'){

117 }if(
°r
[
i
+1] == 'P'){

119 }if(
°r
[
i
+1] == 'p'){

121 }if(
°r
[
i
+1] == 'q'){

123 }if(
°r
[
i
+1] == 'R'){

125 }if(
°r
[
i
+1] == 'S'){

127 }if(
°r
[
i
+1] == 'r'){

129 }if(
°r
[
i
+1] == 't'){

131 }if(
°r
[
i
+1] == 'j'){

133 }if(
°r
[
i
+1] == 'J'){

135 }if(
°r
[
i
+1] == 'U'){

137 #ifde‡
WIN32


138 
	`Ârötf
(
°dîr
, "Error: The %%U format option isÇot supported on Windows.\n");

141 }if(
°r
[
i
+1] == 'x' || str[i+1] == 'X'){

144 
	`Ârötf
(
°dîr
, "Eº‹: InvÆid f‹m© s≥cifõ∏'%c'.\n", 
°r
[
i
+1]);

147 
i
++;

149 }if(
°r
[
i
] == '@'){

150 if(
i
 =
Àn
-1){

152 
	`Ârötf
(
°dîr
, "Error: Incomplete format specifier.\n");

155 
i
++;

156 }if(
°r
[
i
] == '\\'){

157 if(
i
 =
Àn
-1){

159 
	`Ârötf
(
°dîr
, "Error: IncompleteÉscape specifier.\n");

162 
°r
[
i
+1]){

174 
	`Ârötf
(
°dîr
, "Eº‹: InvÆidÉsˇ≥ s≥cifõ∏'%c'.\n", 
°r
[
i
+1]);

177 
i
++;

183 
	}
}

186 
	$öô_c⁄fig
(
mosq_c⁄fig
 *
cfg
, 
pub_‹_sub
)

188 
	`mem£t
(
cfg
, 0, (*cfg));

189 
cfg
->
p‹t
 = 
PORT_UNDEFINED
;

190 
cfg
->
max_öÊight
 = 20;

191 
cfg
->
kì∑live
 = 60;

192 
cfg
->
˛ón_£ssi⁄
 = 
åue
;

193 
cfg
->
eﬁ
 = 
åue
;

194 
cfg
->
ª≥©_cou¡
 = 1;

195 
cfg
->
ª≥©_dñay
.
tv_£c
 = 0;

196 
cfg
->
ª≥©_dñay
.
tv_u£c
 = 0;

197 
cfg
->
øndom_fûãr
 = 10000;

198 if(
pub_‹_sub
 =
CLIENT_RR
){

199 
cfg
->
¥Ÿocﬁ_vîsi⁄
 = 
MQTT_PROTOCOL_V5
;

200 
cfg
->
msg_cou¡
 = 1;

202 
cfg
->
¥Ÿocﬁ_vîsi⁄
 = 
MQTT_PROTOCOL_V311
;

204 
cfg
->
£ssi⁄_expúy_öãrvÆ
 = -1;

205 
	}
}

207 
	$˛õ¡_c⁄fig_˛ónup
(
mosq_c⁄fig
 *
cfg
)

209 
i
;

210 
	`‰ì
(
cfg
->
id
);

211 
	`‰ì
(
cfg
->
id_¥efix
);

212 
	`‰ì
(
cfg
->
ho°
);

213 
	`‰ì
(
cfg
->
fûe_öput
);

214 
	`‰ì
(
cfg
->
mesßge
);

215 
	`‰ì
(
cfg
->
t›ic
);

216 
	`‰ì
(
cfg
->
böd_addªss
);

217 
	`‰ì
(
cfg
->
u£∫ame
);

218 
	`‰ì
(
cfg
->
∑ssw‹d
);

219 
	`‰ì
(
cfg
->
wûl_t›ic
);

220 
	`‰ì
(
cfg
->
wûl_∑ylﬂd
);

221 
	`‰ì
(
cfg
->
f‹m©
);

222 
	`‰ì
(
cfg
->
ª•⁄£_t›ic
);

223 #ifde‡
WITH_TLS


224 
	`‰ì
(
cfg
->
ˇfûe
);

225 
	`‰ì
(
cfg
->
ˇ∑th
);

226 
	`‰ì
(
cfg
->
˚πfûe
);

227 
	`‰ì
(
cfg
->
keyfûe
);

228 
	`‰ì
(
cfg
->
cùhîs
);

229 
	`‰ì
(
cfg
->
és_Æ≤
);

230 
	`‰ì
(
cfg
->
és_vîsi⁄
);

231 
	`‰ì
(
cfg
->
és_ígöe
);

232 
	`‰ì
(
cfg
->
és_ígöe_k∑ss_sha1
);

233 
	`‰ì
(
cfg
->
keyf‹m
);

234 #ifde‡
FINAL_WITH_TLS_PSK


235 
	`‰ì
(
cfg
->
psk
);

236 
	`‰ì
(
cfg
->
psk_idítôy
);

239 if(
cfg
->
t›ics
){

240 
i
=0; i<
cfg
->
t›ic_cou¡
; i++){

241 
	`‰ì
(
cfg
->
t›ics
[
i
]);

243 
	`‰ì
(
cfg
->
t›ics
);

245 if(
cfg
->
fûãr_outs
){

246 
i
=0; i<
cfg
->
fûãr_out_cou¡
; i++){

247 
	`‰ì
(
cfg
->
fûãr_outs
[
i
]);

249 
	`‰ì
(
cfg
->
fûãr_outs
);

251 if(
cfg
->
unsub_t›ics
){

252 
i
=0; i<
cfg
->
unsub_t›ic_cou¡
; i++){

253 
	`‰ì
(
cfg
->
unsub_t›ics
[
i
]);

255 
	`‰ì
(
cfg
->
unsub_t›ics
);

257 #ifde‡
WITH_SOCKS


258 
	`‰ì
(
cfg
->
socks5_ho°
);

259 
	`‰ì
(
cfg
->
socks5_u£∫ame
);

260 
	`‰ì
(
cfg
->
socks5_∑ssw‹d
);

262 
	`mosquôto_¥›îty_‰ì_Æl
(&
cfg
->
c⁄√˘_¥›s
);

263 
	`mosquôto_¥›îty_‰ì_Æl
(&
cfg
->
publish_¥›s
);

264 
	`mosquôto_¥›îty_‰ì_Æl
(&
cfg
->
subs¸ibe_¥›s
);

265 
	`mosquôto_¥›îty_‰ì_Æl
(&
cfg
->
unsubs¸ibe_¥›s
);

266 
	`mosquôto_¥›îty_‰ì_Æl
(&
cfg
->
disc⁄√˘_¥›s
);

267 
	`mosquôto_¥›îty_‰ì_Æl
(&
cfg
->
wûl_¥›s
);

268 
	}
}

270 
	$˛õ¡_c⁄fig_lﬂd
(
mosq_c⁄fig
 *
cfg
, 
pub_‹_sub
, 
¨gc
, *
¨gv
[])

272 
rc
;

273 
FILE
 *
Âå
;

274 
löe
[1024];

275 
cou¡
;

276 *
loc
 = 
NULL
;

277 
size_t
 
Àn
;

278 *
¨gs
[3];

280 #i‚de‡
WIN32


281 *
ív
;

283 
ív
[1024];

285 
¨gs
[0] = 
NULL
;

287 
	`öô_c⁄fig
(
cfg
, 
pub_‹_sub
);

290 #i‚de‡
WIN32


291 
ív
 = 
	`gëív
("XDG_CONFIG_HOME");

292 if(
ív
){

293 
Àn
 = 
	`°æí
(
ív
) + strlen("/mosquitto_pub") + 1;

294 
loc
 = 
	`mÆloc
(
Àn
);

295 if(!
loc
){

296 
	`îr_¥ötf
(
cfg
, "Error: Out of memory.\n");

299 if(
pub_‹_sub
 =
CLIENT_PUB
){

300 
	`¢¥ötf
(
loc
, 
Àn
, "%s/mosquôto_pub", 
ív
);

301 }if(
pub_‹_sub
 =
CLIENT_SUB
){

302 
	`¢¥ötf
(
loc
, 
Àn
, "%s/mosquôto_sub", 
ív
);

304 
	`¢¥ötf
(
loc
, 
Àn
, "%s/mosquôto_º", 
ív
);

306 
loc
[
Àn
-1] = '\0';

308 
ív
 = 
	`gëív
("HOME");

309 if(
ív
){

310 
Àn
 = 
	`°æí
(
ív
) + strlen("/.config/mosquitto_pub") + 1;

311 
loc
 = 
	`mÆloc
(
Àn
);

312 if(!
loc
){

313 
	`îr_¥ötf
(
cfg
, "Error: Out of memory.\n");

316 if(
pub_‹_sub
 =
CLIENT_PUB
){

317 
	`¢¥ötf
(
loc
, 
Àn
, "%s/.c⁄fig/mosquôto_pub", 
ív
);

318 }if(
pub_‹_sub
 =
CLIENT_SUB
){

319 
	`¢¥ötf
(
loc
, 
Àn
, "%s/.c⁄fig/mosquôto_sub", 
ív
);

321 
	`¢¥ötf
(
loc
, 
Àn
, "%s/.c⁄fig/mosquôto_º", 
ív
);

323 
loc
[
Àn
-1] = '\0';

328 
rc
 = 
	`GëEnvú⁄mítV¨übÀ
("USERPROFILE", 
ív
, 1024);

329 if(
rc
 > 0 &&Ñc < 1024){

330 
Àn
 = 
	`°æí
(
ív
) + strlen("\\mosquitto_pub.conf") + 1;

331 
loc
 = 
	`mÆloc
(
Àn
);

332 if(!
loc
){

333 
	`îr_¥ötf
(
cfg
, "Error: Out of memory.\n");

336 if(
pub_‹_sub
 =
CLIENT_PUB
){

337 
	`¢¥ötf
(
loc
, 
Àn
, "%s\\mosquôto_pub.c⁄f", 
ív
);

338 }if(
pub_‹_sub
 =
CLIENT_SUB
){

339 
	`¢¥ötf
(
loc
, 
Àn
, "%s\\mosquôto_sub.c⁄f", 
ív
);

341 
	`¢¥ötf
(
loc
, 
Àn
, "%s\\mosquôto_º.c⁄f", 
ív
);

343 
loc
[
Àn
-1] = '\0';

347 if(
loc
){

348 
Âå
 = 
	`f›í
(
loc
, "rt");

349 if(
Âå
){

350 
	`fgës
(
löe
, 1024, 
Âå
)){

351 if(
löe
[0] == '#') ;

353 
löe
[
	`°æí
(line)-1] == 10 ||Üine[strlen(line)-1] == 13){

354 
löe
[
	`°æí
(line)-1] = 0;

358 
¨gs
[1] = 
	`°πok
(
löe
, " ");

359 if(
¨gs
[1]){

360 
¨gs
[2] = 
	`°πok
(
NULL
, "");

361 if(
¨gs
[2]){

362 
cou¡
 = 3;

364 
cou¡
 = 2;

366 
rc
 = 
	`˛õ¡_c⁄fig_löe_¥oc
(
cfg
, 
pub_‹_sub
, 
cou¡
, 
¨gs
);

367 if(
rc
){

368 
	`f˛o£
(
Âå
);

369 
	`‰ì
(
loc
);

370  
rc
;

374 
	`f˛o£
(
Âå
);

376 
	`‰ì
(
loc
);

380 
rc
 = 
	`˛õ¡_c⁄fig_löe_¥oc
(
cfg
, 
pub_‹_sub
, 
¨gc
, 
¨gv
);

381 if(
rc
) Ñc;

383 if(
cfg
->
wûl_∑ylﬂd
 && !cfg->
wûl_t›ic
){

384 
	`Ârötf
(
°dîr
, "Error: WillÖayload given, butÇo willÅopic given.\n");

387 if(
cfg
->
wûl_ªèö
 && !cfg->
wûl_t›ic
){

388 
	`Ârötf
(
°dîr
, "Error: WillÑetain given, butÇo willÅopic given.\n");

391 #ifde‡
WITH_TLS


392 if((
cfg
->
˚πfûe
 && !cfg->
keyfûe
) || (cfg->keyfile && !cfg->certfile)){

393 
	`Ârötf
(
°dîr
, "Error: Both certfileánd keyfile must beÖrovided if one ofÅhem is set.\n");

396 if((
cfg
->
keyf‹m
 && !cfg->
keyfûe
)){

397 
	`Ârötf
(
°dîr
, "Error: If keyform is set, keyfile must beálso specified.\n");

400 if((
cfg
->
és_ígöe_k∑ss_sha1
 && (!cfg->
keyf‹m
 || !cfg->
és_ígöe
))){

401 
	`Ârötf
(
°dîr
, "Error: when usingÅls-engine-kpass-sha1, bothÅls-engineánd keyform mustálso beÖrovided.\n");

405 #ifde‡
FINAL_WITH_TLS_PSK


406 if((
cfg
->
ˇfûe
 || cfg->
ˇ∑th
Ë&& cfg->
psk
){

407 
	`Ârötf
(
°dîr
, "Error: Only one of --psk or --cafile/--capath may be usedát once.\n");

410 if(
cfg
->
psk
 && !cfg->
psk_idítôy
){

411 
	`Ârötf
(
°dîr
, "Error: --psk-identityÑequired if --psk used.\n");

416 if(
cfg
->
¥Ÿocﬁ_vîsi⁄
 == 5){

417 if(
cfg
->
˛ón_£ssi⁄
 =
Ál£
 && cfg->
£ssi⁄_expúy_öãrvÆ
 == -1){

420 
cfg
->
£ssi⁄_expúy_öãrvÆ
 = 
UINT32_MAX
;

422 if(
cfg
->
£ssi⁄_expúy_öãrvÆ
 > 0){

423 if(
cfg
->
£ssi⁄_expúy_öãrvÆ
 =
UINT32_MAX
 && (cfg->
id_¥efix
 || !cfg->
id
)){

424 
	`Ârötf
(
°dîr
, "Error: You mustÖrovideá client id if youáre usingán infinite sessionÉxpiry interval.\n");

427 
rc
 = 
	`mosquôto_¥›îty_add_öt32
(&
cfg
->
c⁄√˘_¥›s
, 
MQTT_PROP_SESSION_EXPIRY_INTERVAL
, (
uöt32_t
 )cfg->
£ssi⁄_expúy_öãrvÆ
);

428 if(
rc
){

429 
	`Ârötf
(
°dîr
, "ErroráddingÖroperty session-expiry-interval\n");

433 if(
cfg
->
˛ón_£ssi⁄
 =
Ál£
 && (cfg->
id_¥efix
 || !cfg->
id
)){

434 
	`Ârötf
(
°dîr
, "Error: You mustÖrovideá client id if youáre usingÅhe -c option.\n");

439 if(
pub_‹_sub
 =
CLIENT_SUB
){

440 if(
cfg
->
t›ic_cou¡
 == 0){

441 
	`Ârötf
(
°dîr
, "Error: You must specifyáÅopicÅo subscribeÅo.\n");

446 if(!
cfg
->
ho°
){

447 
cfg
->
ho°
 = 
	`°rdup
("localhost");

448 if(!
cfg
->
ho°
){

449 
	`îr_¥ötf
(
cfg
, "Error: Out of memory.\n");

454 
rc
 = 
	`mosquôto_¥›îty_check_Æl
(
CMD_CONNECT
, 
cfg
->
c⁄√˘_¥›s
);

455 if(
rc
){

456 
	`îr_¥ötf
(
cfg
, "Eº‹ i¿CONNECTÖr›îtõs: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

459 
rc
 = 
	`mosquôto_¥›îty_check_Æl
(
CMD_PUBLISH
, 
cfg
->
publish_¥›s
);

460 if(
rc
){

461 
	`îr_¥ötf
(
cfg
, "Eº‹ i¿PUBLISHÖr›îtõs: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

464 
rc
 = 
	`mosquôto_¥›îty_check_Æl
(
CMD_SUBSCRIBE
, 
cfg
->
subs¸ibe_¥›s
);

465 if(
rc
){

466 
	`îr_¥ötf
(
cfg
, "Eº‹ i¿SUBSCRIBEÖr›îtõs: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

469 
rc
 = 
	`mosquôto_¥›îty_check_Æl
(
CMD_UNSUBSCRIBE
, 
cfg
->
unsubs¸ibe_¥›s
);

470 if(
rc
){

471 
	`îr_¥ötf
(
cfg
, "Eº‹ i¿UNSUBSCRIBEÖr›îtõs: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

474 
rc
 = 
	`mosquôto_¥›îty_check_Æl
(
CMD_DISCONNECT
, 
cfg
->
disc⁄√˘_¥›s
);

475 if(
rc
){

476 
	`îr_¥ötf
(
cfg
, "Eº‹ i¿DISCONNECTÖr›îtõs: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

479 
rc
 = 
	`mosquôto_¥›îty_check_Æl
(
CMD_WILL
, 
cfg
->
wûl_¥›s
);

480 if(
rc
){

481 
	`îr_¥ötf
(
cfg
, "Eº‹ i¿Wû»¥›îtõs: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

485  
MOSQ_ERR_SUCCESS
;

486 
	}
}

488 
	$cfg_add_t›ic
(
mosq_c⁄fig
 *
cfg
, 
ty≥
, *
t›ic
, c⁄° *
¨g
)

490 if(
	`mosquôto_vÆid©e_utf8
(
t›ic
, ()
	`°æí
(topic))){

491 
	`Ârötf
(
°dîr
, "Eº‹: MÆf‹med UTF-8 i¿%†¨gumít.\n\n", 
¨g
);

494 if(
ty≥
 =
CLIENT_PUB
 ||Åy≥ =
CLIENT_RR
){

495 if(
	`mosquôto_pub_t›ic_check
(
t›ic
Ë=
MOSQ_ERR_INVAL
){

496 
	`Ârötf
(
°dîr
, "Eº‹: InvÆidÖublishÅ›i¯'%s', d€†ô c⁄èö '+' o∏'#'?\n", 
t›ic
);

499 
cfg
->
t›ic
 = 
	`°rdup
(topic);

500 }if(
ty≥
 =
CLIENT_RESPONSE_TOPIC
){

501 if(
	`mosquôto_pub_t›ic_check
(
t›ic
Ë=
MOSQ_ERR_INVAL
){

502 
	`Ârötf
(
°dîr
, "Eº‹: InvÆidÑe•⁄£Å›i¯'%s', d€†ô c⁄èö '+' o∏'#'?\n", 
t›ic
);

505 
cfg
->
ª•⁄£_t›ic
 = 
	`°rdup
(
t›ic
);

507 if(
	`mosquôto_sub_t›ic_check
(
t›ic
Ë=
MOSQ_ERR_INVAL
){

508 
	`Ârötf
(
°dîr
, "Eº‹: InvÆid subs¸ùti⁄Å›i¯'%s',áªáŒ '+'ánd '#' wûdˇrd†c‹ª˘?\n", 
t›ic
);

511 
cfg
->
t›ic_cou¡
++;

512 
cfg
->
t›ics
 = 
	`ªÆloc
(cfg->t›ics, (
size_t
 )cfg->
t›ic_cou¡
*(*));

513 if(!
cfg
->
t›ics
){

514 
	`îr_¥ötf
(
cfg
, "Error: Out of memory.\n");

517 
cfg
->
t›ics
[cfg->
t›ic_cou¡
-1] = 
	`°rdup
(
t›ic
);

520 
	}
}

523 
	$˛õ¡_c⁄fig_löe_¥oc
(
mosq_c⁄fig
 *
cfg
, 
pub_‹_sub
, 
¨gc
, *
¨gv
[])

525 
i
;

526 
tmpi
;

527 
f
;

528 
size_t
 
szt
;

530 
i
=1; i<
¨gc
; i++){

531 if(!
	`°rcmp
(
¨gv
[
i
], "-A")){

532 if(
i
==
¨gc
-1){

533 
	`Ârötf
(
°dîr
, "Error: -Aárgument given butÇoáddress specified.\n\n");

536 
cfg
->
böd_addªss
 = 
	`°rdup
(
¨gv
[
i
+1]);

538 
i
++;

539 #ifde‡
WITH_TLS


540 }if(!
	`°rcmp
(
¨gv
[
i
], "--cafile")){

541 if(
i
==
¨gc
-1){

542 
	`Ârötf
(
°dîr
, "Error: --cafileárgument given butÇo file specified.\n\n");

545 
cfg
->
ˇfûe
 = 
	`°rdup
(
¨gv
[
i
+1]);

547 
i
++;

548 }if(!
	`°rcmp
(
¨gv
[
i
], "--capath")){

549 if(
i
==
¨gc
-1){

550 
	`Ârötf
(
°dîr
, "Error: --capathárgument given butÇo directory specified.\n\n");

553 
cfg
->
ˇ∑th
 = 
	`°rdup
(
¨gv
[
i
+1]);

555 
i
++;

556 }if(!
	`°rcmp
(
¨gv
[
i
], "--cert")){

557 if(
i
==
¨gc
-1){

558 
	`Ârötf
(
°dîr
, "Error: --certárgument given butÇo file specified.\n\n");

561 
cfg
->
˚πfûe
 = 
	`°rdup
(
¨gv
[
i
+1]);

563 
i
++;

564 }if(!
	`°rcmp
(
¨gv
[
i
], "--ciphers")){

565 if(
i
==
¨gc
-1){

566 
	`Ârötf
(
°dîr
, "Error: --ciphersárgument given butÇo ciphers specified.\n\n");

569 
cfg
->
cùhîs
 = 
	`°rdup
(
¨gv
[
i
+1]);

571 
i
++;

573 }if(!
	`°rcmp
(
¨gv
[
i
], "-C")){

574 if(
pub_‹_sub
 !
CLIENT_SUB
){

575 
unknown_›ti⁄
;

577 if(
i
==
¨gc
-1){

578 
	`Ârötf
(
°dîr
, "Error: -Cárgument given butÇo count specified.\n\n");

581 
cfg
->
msg_cou¡
 = 
	`©oi
(
¨gv
[
i
+1]);

582 if(
cfg
->
msg_cou¡
 < 1){

583 
	`Ârötf
(
°dîr
, "Eº‹: InvÆid mesßgêcou¡ \"%d\".\n\n", 
cfg
->
msg_cou¡
);

587 
i
++;

589 }if(!
	`°rcmp
(
¨gv
[
i
], "-c") || !strcmp(argv[i], "--disable-clean-session")){

590 
cfg
->
˛ón_£ssi⁄
 = 
Ál£
;

591 }if(!
	`°rcmp
(
¨gv
[
i
], "-d") || !strcmp(argv[i], "--debug")){

592 
cfg
->
debug
 = 
åue
;

593 }if(!
	`°rcmp
(
¨gv
[
i
], "-D") || !strcmp(argv[i], "--property")){

594 
i
++;

595 if(
	`cfg_∑r£_¥›îty
(
cfg
, 
¨gc
, 
¨gv
, &
i
)){

598 
cfg
->
¥Ÿocﬁ_vîsi⁄
 = 
MQTT_PROTOCOL_V5
;

599 }if(!
	`°rcmp
(
¨gv
[
i
], "-e")){

600 if(
pub_‹_sub
 !
CLIENT_RR
){

601 
unknown_›ti⁄
;

603 if(
i
==
¨gc
-1){

604 
	`Ârötf
(
°dîr
, "Error: -eárgument given butÇoÑesponseÅopic specified.\n\n");

607 if(
	`cfg_add_t›ic
(
cfg
, 
CLIENT_RESPONSE_TOPIC
, 
¨gv
[
i
+1], "-e")){

611 
i
++;

612 }if(!
	`°rcmp
(
¨gv
[
i
], "-E")){

613 if(
pub_‹_sub
 !
CLIENT_SUB
){

614 
unknown_›ti⁄
;

616 
cfg
->
exô_a·î_sub
 = 
åue
;

617 }if(!
	`°rcmp
(
¨gv
[
i
], "-f") || !strcmp(argv[i], "--file")){

618 if(
pub_‹_sub
 =
CLIENT_SUB
){

619 
unknown_›ti⁄
;

621 if(
cfg
->
pub_mode
 !
MSGMODE_NONE
){

622 
	`Ârötf
(
°dîr
, "Error: Only oneÅype of message can be sentát once.\n\n");

624 }if(
i
==
¨gc
-1){

625 
	`Ârötf
(
°dîr
, "Error: -fárgument given butÇo file specified.\n\n");

628 
cfg
->
pub_mode
 = 
MSGMODE_FILE
;

629 
cfg
->
fûe_öput
 = 
	`°rdup
(
¨gv
[
i
+1]);

630 if(!
cfg
->
fûe_öput
){

631 
	`îr_¥ötf
(
cfg
, "Error: Out of memory.\n");

635 
i
++;

636 }if(!
	`°rcmp
(
¨gv
[
i
], "-F")){

637 if(
pub_‹_sub
 =
CLIENT_PUB
){

638 
unknown_›ti⁄
;

640 if(
i
==
¨gc
-1){

641 
	`Ârötf
(
°dîr
, "Error: -Fárgument given butÇo format specified.\n\n");

644 
cfg
->
f‹m©
 = 
	`°rdup
(
¨gv
[
i
+1]);

645 if(!
cfg
->
f‹m©
){

646 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

649 if(
	`check_f‹m©
(
cfg
->
f‹m©
)){

653 
i
++;

654 }if(!
	`°rcmp
(
¨gv
[
i
], "--help")){

656 }if(!
	`°rcmp
(
¨gv
[
i
], "-h") || !strcmp(argv[i], "--host")){

657 if(
i
==
¨gc
-1){

658 
	`Ârötf
(
°dîr
, "Error: -hárgument given butÇo host specified.\n\n");

661 
cfg
->
ho°
 = 
	`°rdup
(
¨gv
[
i
+1]);

663 
i
++;

664 #ifde‡
WITH_TLS


665 }if(!
	`°rcmp
(
¨gv
[
i
], "--insecure")){

666 
cfg
->
ö£cuª
 = 
åue
;

668 }if(!
	`°rcmp
(
¨gv
[
i
], "-i") || !strcmp(argv[i], "--id")){

669 if(
cfg
->
id_¥efix
){

670 
	`Ârötf
(
°dîr
, "Error: -iánd -Iárgument cannot be usedÅogether.\n\n");

673 if(
i
==
¨gc
-1){

674 
	`Ârötf
(
°dîr
, "Error: -iárgument given butÇo id specified.\n\n");

677 
cfg
->
id
 = 
	`°rdup
(
¨gv
[
i
+1]);

679 
i
++;

680 }if(!
	`°rcmp
(
¨gv
[
i
], "-I") || !strcmp(argv[i], "--id-prefix")){

681 if(
cfg
->
id
){

682 
	`Ârötf
(
°dîr
, "Error: -iánd -Iárgument cannot be usedÅogether.\n\n");

685 if(
i
==
¨gc
-1){

686 
	`Ârötf
(
°dîr
, "Error: -Iárgument given butÇo idÖrefix specified.\n\n");

689 
cfg
->
id_¥efix
 = 
	`°rdup
(
¨gv
[
i
+1]);

691 
i
++;

692 }if(!
	`°rcmp
(
¨gv
[
i
], "-k") || !strcmp(argv[i], "--keepalive")){

693 if(
i
==
¨gc
-1){

694 
	`Ârötf
(
°dîr
, "Error: -kárgument given butÇo keepalive specified.\n\n");

697 
cfg
->
kì∑live
 = 
	`©oi
(
¨gv
[
i
+1]);

698 if(
cfg
->
kì∑live
<5 || cfg->kì∑live>
UINT16_MAX
){

699 
	`Ârötf
(
°dîr
, "Error: Invalid keepalive given, it must be between 5ánd 65535 inclusive.\n\n");

703 
i
++;

704 #ifde‡
WITH_TLS


705 }if(!
	`°rcmp
(
¨gv
[
i
], "--key")){

706 if(
i
==
¨gc
-1){

707 
	`Ârötf
(
°dîr
, "Error: --keyárgument given butÇo file specified.\n\n");

710 
cfg
->
keyfûe
 = 
	`°rdup
(
¨gv
[
i
+1]);

712 
i
++;

713 }if(!
	`°rcmp
(
¨gv
[
i
], "--keyform")){

714 if(
i
==
¨gc
-1){

715 
	`Ârötf
(
°dîr
, "Error: --keyformárgument given butÇo keyform specified.\n\n");

718 
cfg
->
keyf‹m
 = 
	`°rdup
(
¨gv
[
i
+1]);

720 
i
++;

722 }if(!
	`°rcmp
(
¨gv
[
i
], "-L") || !strcmp(argv[i], "--url")){

723 if(
i
==
¨gc
-1){

724 
	`Ârötf
(
°dîr
, "Error: -Lárgument given butÇo URL specified.\n\n");

727 *
uæ
 = 
¨gv
[
i
+1];

728 *
t›ic
;

729 *
tmp
;

731 if(!
	`°∫ˇ£cmp
(
uæ
, "mqtt://", 7)) {

732 
uæ
 += 7;

733 
cfg
->
p‹t
 = 1883;

734 } if(!
	`°∫ˇ£cmp
(
uæ
, "mqtts://", 8)) {

735 #ifde‡
WITH_TLS


736 
uæ
 += 8;

737 
cfg
->
p‹t
 = 8883;

738 
cfg
->
és_u£_os_˚πs
 = 
åue
;

740 
	`Ârötf
(
°dîr
, "Error: TLS supportÇotávailable.\n\n");

744 
	`Ârötf
(
°dîr
, "Error: unsupported URL scheme.\n\n");

747 
t›ic
 = 
	`°rchr
(
uæ
, '/');

748 if(!
t›ic
){

749 
	`Ârötf
(
°dîr
, "Error: Invalid URL for -Lárgument specified -Åopic missing.\n");

752 *
t›ic
++ = 0;

754 if(
	`cfg_add_t›ic
(
cfg
, 
pub_‹_sub
, 
t›ic
, "-LÅopic"))

757 
tmp
 = 
	`°rchr
(
uæ
, '@');

758 if(
tmp
) {

759 *
cﬁ⁄
;

760 *
tmp
++ = 0;

761 
cﬁ⁄
 = 
	`°rchr
(
uæ
, ':');

762 if(
cﬁ⁄
) {

763 *
cﬁ⁄
 = 0;

764 
cfg
->
∑ssw‹d
 = 
	`°rdup
(
cﬁ⁄
 + 1);

766 
cfg
->
u£∫ame
 = 
	`°rdup
(
uæ
);

767 
uæ
 = 
tmp
;

769 
cfg
->
ho°
 = 
uæ
;

771 
tmp
 = 
	`°rchr
(
uæ
, ':');

772 if(
tmp
) {

773 *
tmp
++ = 0;

774 
cfg
->
p‹t
 = 
	`©oi
(
tmp
);

777 
cfg
->
ho°
 = 
	`°rdup
(cfg->host);

779 
i
++;

780 }if(!
	`°rcmp
(
¨gv
[
i
], "-l") || !strcmp(argv[i], "--stdin-line")){

781 if(
pub_‹_sub
 !
CLIENT_PUB
){

782 
unknown_›ti⁄
;

784 if(
cfg
->
pub_mode
 !
MSGMODE_NONE
){

785 
	`Ârötf
(
°dîr
, "Error: Only oneÅype of message can be sentát once.\n\n");

788 
cfg
->
pub_mode
 = 
MSGMODE_STDIN_LINE
;

790 }if(!
	`°rcmp
(
¨gv
[
i
], "-m") || !strcmp(argv[i], "--message")){

791 if(
pub_‹_sub
 =
CLIENT_SUB
){

792 
unknown_›ti⁄
;

794 if(
cfg
->
pub_mode
 !
MSGMODE_NONE
){

795 
	`Ârötf
(
°dîr
, "Error: Only oneÅype of message can be sentát once.\n\n");

797 }if(
i
==
¨gc
-1){

798 
	`Ârötf
(
°dîr
, "Error: -márgument given butÇo message specified.\n\n");

801 
cfg
->
mesßge
 = 
	`°rdup
(
¨gv
[
i
+1]);

802 if(
cfg
->
mesßge
 =
NULL
){

803 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n\n");

806 
szt
 = 
	`°æí
(
cfg
->
mesßge
);

807 if(
szt
 > 
MQTT_MAX_PAYLOAD
){

808 
	`Ârötf
(
°dîr
, "Eº‹: MesßgêÀngth mu° bêÀs†th™ %u byãs.\n\n", 
MQTT_MAX_PAYLOAD
);

811 
cfg
->
msgÀn
 = ()
szt
;

812 
cfg
->
pub_mode
 = 
MSGMODE_CMD
;

814 
i
++;

815 }if(!
	`°rcmp
(
¨gv
[
i
], "-M")){

816 if(
i
==
¨gc
-1){

817 
	`Ârötf
(
°dîr
, "Error: -Márgument given but max_inflightÇot specified.\n\n");

820 
tmpi
 = 
	`©oi
(
¨gv
[
i
+1]);

821 if(
tmpi
 < 1){

822 
	`Ârötf
(
°dîr
, "Error: Maximum inflight messages must be greaterÅhan 0.\n\n");

825 
cfg
->
max_öÊight
 = ()
tmpi
;

827 
i
++;

828 }if(!
	`°rcmp
(
¨gv
[
i
], "--nodelay")){

829 
cfg
->
t˝_nodñay
 = 
åue
;

830 }if(!
	`°rcmp
(
¨gv
[
i
], "-n") || !strcmp(argv[i], "--null-message")){

831 if(
pub_‹_sub
 =
CLIENT_SUB
){

832 
unknown_›ti⁄
;

834 if(
cfg
->
pub_mode
 !
MSGMODE_NONE
){

835 
	`Ârötf
(
°dîr
, "Error: Only oneÅype of message can be sentát once.\n\n");

838 
cfg
->
pub_mode
 = 
MSGMODE_NULL
;

840 }if(!
	`°rcmp
(
¨gv
[
i
], "-N")){

841 if(
pub_‹_sub
 =
CLIENT_PUB
){

842 
unknown_›ti⁄
;

844 
cfg
->
eﬁ
 = 
Ál£
;

845 }if(!
	`°rcmp
(
¨gv
[
i
], "-p") || !strcmp(argv[i], "--port")){

846 if(
i
==
¨gc
-1){

847 
	`Ârötf
(
°dîr
, "Error: -párgument given butÇoÖort specified.\n\n");

850 
cfg
->
p‹t
 = 
	`©oi
(
¨gv
[
i
+1]);

851 if(
cfg
->
p‹t
<0 || cfg->port>65535){

852 
	`Ârötf
(
°dîr
, "Eº‹: InvÆidÖ‹àgiví: %d\n", 
cfg
->
p‹t
);

856 
i
++;

857 }if(!
	`°rcmp
(
¨gv
[
i
], "--pretty")){

858 if(
pub_‹_sub
 =
CLIENT_PUB
){

859 
unknown_›ti⁄
;

861 
cfg
->
¥ëty
 = 
åue
;

862 }if(!
	`°rcmp
(
¨gv
[
i
], "-P") || !strcmp(argv[i], "--pw")){

863 if(
i
==
¨gc
-1){

864 
	`Ârötf
(
°dîr
, "Error: -Párgument given butÇoÖassword specified.\n\n");

867 
cfg
->
∑ssw‹d
 = 
	`°rdup
(
¨gv
[
i
+1]);

869 
i
++;

870 #ifde‡
WITH_SOCKS


871 }if(!
	`°rcmp
(
¨gv
[
i
], "--proxy")){

872 if(
i
==
¨gc
-1){

873 
	`Ârötf
(
°dîr
, "Error: --proxyárgument given butÇoÖroxy url specified.\n\n");

876 if(
	`mosquôto__∑r£_socks_uæ
(
cfg
, 
¨gv
[
i
+1])){

879 
i
++;

882 #ifde‡
FINAL_WITH_TLS_PSK


883 }if(!
	`°rcmp
(
¨gv
[
i
], "--psk")){

884 if(
i
==
¨gc
-1){

885 
	`Ârötf
(
°dîr
, "Error: --pskárgument given butÇo key specified.\n\n");

888 
cfg
->
psk
 = 
	`°rdup
(
¨gv
[
i
+1]);

890 
i
++;

891 }if(!
	`°rcmp
(
¨gv
[
i
], "--psk-identity")){

892 if(
i
==
¨gc
-1){

893 
	`Ârötf
(
°dîr
, "Error: --psk-identityárgument given butÇo identity specified.\n\n");

896 
cfg
->
psk_idítôy
 = 
	`°rdup
(
¨gv
[
i
+1]);

898 
i
++;

900 }if(!
	`°rcmp
(
¨gv
[
i
], "-q") || !strcmp(argv[i], "--qos")){

901 if(
i
==
¨gc
-1){

902 
	`Ârötf
(
°dîr
, "Error: -qárgument given butÇo QoS specified.\n\n");

905 
cfg
->
qos
 = 
	`©oi
(
¨gv
[
i
+1]);

906 if(
cfg
->
qos
<0 || cfg->qos>2){

907 
	`Ârötf
(
°dîr
, "Eº‹: InvÆid QoS giví: %d\n", 
cfg
->
qos
);

911 
i
++;

912 }if(!
	`°rcmp
(
¨gv
[
i
], "--quiet")){

913 
cfg
->
quõt
 = 
åue
;

914 }if(!
	`°rcmp
(
¨gv
[
i
], "-r") || !strcmp(argv[i], "--retain")){

915 if(
pub_‹_sub
 !
CLIENT_PUB
){

916 
unknown_›ti⁄
;

918 
cfg
->
ªèö
 = 1;

919 }if(!
	`°rcmp
(
¨gv
[
i
], "-R")){

920 if(
pub_‹_sub
 =
CLIENT_PUB
){

921 
unknown_›ti⁄
;

923 
cfg
->
no_ªèö
 = 
åue
;

924 
cfg
->
sub_›ts
 |
MQTT_SUB_OPT_SEND_RETAIN_NEVER
;

925 }if(!
	`°rcmp
(
¨gv
[
i
], "--random-filter")){

926 if(
pub_‹_sub
 !
CLIENT_SUB
){

927 
unknown_›ti⁄
;

929 if(
i
==
¨gc
-1){

930 
	`Ârötf
(
°dîr
, "Error: --random-filterárgument given butÇo chance specified.\n\n");

933 
cfg
->
øndom_fûãr
 = ()(10.0*
	`©of
(
¨gv
[
i
+1]));

934 if(
cfg
->
øndom_fûãr
 > 10000 || cfg->random_filter < 1){

935 
	`Ârötf
(
°dîr
, "Error: --random-filter chance must be between 0.1-100.0\n\n");

939 
i
++;

940 }if(!
	`°rcmp
(
¨gv
[
i
], "--remove-retained")){

941 if(
pub_‹_sub
 !
CLIENT_SUB
){

942 
unknown_›ti⁄
;

944 
cfg
->
ªmove_ªèöed
 = 
åue
;

945 }if(!
	`°rcmp
(
¨gv
[
i
], "--repeat")){

946 if(
pub_‹_sub
 !
CLIENT_PUB
){

947 
unknown_›ti⁄
;

949 if(
i
==
¨gc
-1){

950 
	`Ârötf
(
°dîr
, "Error: --repeatárgument given butÇo count specified.\n\n");

953 
cfg
->
ª≥©_cou¡
 = 
	`©oi
(
¨gv
[
i
+1]);

954 if(
cfg
->
ª≥©_cou¡
 < 1){

955 
	`Ârötf
(
°dîr
, "Error: --repeatárgument must be >0.\n\n");

959 
i
++;

960 }if(!
	`°rcmp
(
¨gv
[
i
], "--repeat-delay")){

961 if(
pub_‹_sub
 !
CLIENT_PUB
){

962 
unknown_›ti⁄
;

964 if(
i
==
¨gc
-1){

965 
	`Ârötf
(
°dîr
, "Error: --repeat-delayárgument given butÇoÅime specified.\n\n");

968 
f
 = ()
	`©of
(
¨gv
[
i
+1]);

969 if(
f
 < 0.0f){

970 
	`Ârötf
(
°dîr
, "Error: --repeat-delayárgument must be >=0.0.\n\n");

973 
f
 *= 1.0e6f;

974 
cfg
->
ª≥©_dñay
.
tv_£c
 = ()
f
/1000000;

975 
cfg
->
ª≥©_dñay
.
tv_u£c
 = ()
f
%1000000;

977 
i
++;

978 }if(!
	`°rcmp
(
¨gv
[
i
], "--retain-as-published")){

979 if(
pub_‹_sub
 =
CLIENT_PUB
){

980 
unknown_›ti⁄
;

982 
cfg
->
sub_›ts
 |
MQTT_SUB_OPT_RETAIN_AS_PUBLISHED
;

983 }if(!
	`°rcmp
(
¨gv
[
i
], "--retained-only")){

984 if(
pub_‹_sub
 !
CLIENT_SUB
){

985 
unknown_›ti⁄
;

987 
cfg
->
ªèöed_⁄ly
 = 
åue
;

988 }if(!
	`°rcmp
(
¨gv
[
i
], "-s") || !strcmp(argv[i], "--stdin-file")){

989 if(
pub_‹_sub
 =
CLIENT_SUB
){

990 
unknown_›ti⁄
;

992 if(
cfg
->
pub_mode
 !
MSGMODE_NONE
){

993 
	`Ârötf
(
°dîr
, "Error: Only oneÅype of message can be sentát once.\n\n");

996 
cfg
->
pub_mode
 = 
MSGMODE_STDIN_FILE
;

998 #ifde‡
WITH_SRV


999 }if(!
	`°rcmp
(
¨gv
[
i
], "-S")){

1000 
cfg
->
u£_§v
 = 
åue
;

1002 }if(!
	`°rcmp
(
¨gv
[
i
], "-t") || !strcmp(argv[i], "--topic")){

1003 if(
i
==
¨gc
-1){

1004 
	`Ârötf
(
°dîr
, "Error: -tárgument given butÇoÅopic specified.\n\n");

1007 if(
	`cfg_add_t›ic
(
cfg
, 
pub_‹_sub
, 
¨gv
[
i
 + 1], "-t"))

1009 
i
++;

1011 }if(!
	`°rcmp
(
¨gv
[
i
], "-T") || !strcmp(argv[i], "--filter-out")){

1012 if(
pub_‹_sub
 !
CLIENT_SUB
){

1013 
unknown_›ti⁄
;

1015 if(
i
==
¨gc
-1){

1016 
	`Ârötf
(
°dîr
, "Error: -Tárgument given butÇoÅopic filter specified.\n\n");

1019 if(
	`mosquôto_vÆid©e_utf8
(
¨gv
[
i
+1], ()
	`°æí
(argv[i+1]))){

1020 
	`Ârötf
(
°dîr
, "Error: Malformed UTF-8 in -Tárgument.\n\n");

1023 if(
	`mosquôto_sub_t›ic_check
(
¨gv
[
i
+1]Ë=
MOSQ_ERR_INVAL
){

1024 
	`Ârötf
(
°dîr
, "Eº‹: InvÆid fûã∏t›i¯'%s',áªáŒ '+'ánd '#' wûdˇrd†c‹ª˘?\n", 
¨gv
[
i
+1]);

1027 
cfg
->
fûãr_out_cou¡
++;

1028 
cfg
->
fûãr_outs
 = 
	`ªÆloc
(cfg->fûãr_outs, (
size_t
 )cfg->
fûãr_out_cou¡
*(*));

1029 if(!
cfg
->
fûãr_outs
){

1030 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

1033 
cfg
->
fûãr_outs
[cfg->
fûãr_out_cou¡
-1] = 
	`°rdup
(
¨gv
[
i
+1]);

1035 
i
++;

1036 #ifde‡
WITH_TLS


1037 }if(!
	`°rcmp
(
¨gv
[
i
], "--tls-alpn")){

1038 if(
i
==
¨gc
-1){

1039 
	`Ârötf
(
°dîr
, "Error: --tls-alpnárgument given butÇoÖrotocol specified.\n\n");

1042 
cfg
->
és_Æ≤
 = 
	`°rdup
(
¨gv
[
i
+1]);

1044 
i
++;

1045 }if(!
	`°rcmp
(
¨gv
[
i
], "--tls-engine")){

1046 if(
i
==
¨gc
-1){

1047 
	`Ârötf
(
°dîr
, "Error: --tls-engineárgument given butÇoÉngine_id specified.\n\n");

1050 
cfg
->
és_ígöe
 = 
	`°rdup
(
¨gv
[
i
+1]);

1052 
i
++;

1053 }if(!
	`°rcmp
(
¨gv
[
i
], "--tls-engine-kpass-sha1")){

1054 if(
i
==
¨gc
-1){

1055 
	`Ârötf
(
°dîr
, "Error: --tls-engine-kpass-sha1árgument given butÇo kpass sha1 specified.\n\n");

1058 
cfg
->
és_ígöe_k∑ss_sha1
 = 
	`°rdup
(
¨gv
[
i
+1]);

1060 
i
++;

1061 }if(!
	`°rcmp
(
¨gv
[
i
], "--tls-use-os-certs")){

1062 
cfg
->
és_u£_os_˚πs
 = 
åue
;

1063 }if(!
	`°rcmp
(
¨gv
[
i
], "--tls-version")){

1064 if(
i
==
¨gc
-1){

1065 
	`Ârötf
(
°dîr
, "Error: --tls-versionárgument given butÇo version specified.\n\n");

1068 
cfg
->
és_vîsi⁄
 = 
	`°rdup
(
¨gv
[
i
+1]);

1070 
i
++;

1072 }if(!
	`°rcmp
(
¨gv
[
i
], "-U") || !strcmp(argv[i], "--unsubscribe")){

1073 if(
pub_‹_sub
 !
CLIENT_SUB
){

1074 
unknown_›ti⁄
;

1076 if(
i
==
¨gc
-1){

1077 
	`Ârötf
(
°dîr
, "Error: -Uárgument given butÇo unsubscribeÅopic specified.\n\n");

1080 if(
	`mosquôto_vÆid©e_utf8
(
¨gv
[
i
+1], ()
	`°æí
(argv[i+1]))){

1081 
	`Ârötf
(
°dîr
, "Error: Malformed UTF-8 in -Uárgument.\n\n");

1084 if(
	`mosquôto_sub_t›ic_check
(
¨gv
[
i
+1]Ë=
MOSQ_ERR_INVAL
){

1085 
	`Ârötf
(
°dîr
, "Eº‹: InvÆid unsubs¸ibêt›i¯'%s',áªáŒ '+'ánd '#' wûdˇrd†c‹ª˘?\n", 
¨gv
[
i
+1]);

1088 
cfg
->
unsub_t›ic_cou¡
++;

1089 
cfg
->
unsub_t›ics
 = 
	`ªÆloc
(cfg->unsub_t›ics, (
size_t
 )cfg->
unsub_t›ic_cou¡
*(*));

1090 if(!
cfg
->
unsub_t›ics
){

1091 
	`Ârötf
(
°dîr
, "Error: Out of memory.\n");

1094 
cfg
->
unsub_t›ics
[cfg->
unsub_t›ic_cou¡
-1] = 
	`°rdup
(
¨gv
[
i
+1]);

1096 
i
++;

1097 }if(!
	`°rcmp
(
¨gv
[
i
], "-u") || !strcmp(argv[i], "--username")){

1098 if(
i
==
¨gc
-1){

1099 
	`Ârötf
(
°dîr
, "Error: -uárgument given butÇo username specified.\n\n");

1102 
cfg
->
u£∫ame
 = 
	`°rdup
(
¨gv
[
i
+1]);

1104 
i
++;

1105 }if(!
	`°rcmp
(
¨gv
[
i
], "--unix")){

1106 if(
i
==
¨gc
-1){

1107 
	`Ârötf
(
°dîr
, "Error: --unixárgument given butÇo socketÖath specified.\n\n");

1110 
cfg
->
ho°
 = 
	`°rdup
(
¨gv
[
i
+1]);

1111 
cfg
->
p‹t
 = 0;

1113 
i
++;

1114 }if(!
	`°rcmp
(
¨gv
[
i
], "-V") || !strcmp(argv[i], "--protocol-version")){

1115 if(
i
==
¨gc
-1){

1116 
	`Ârötf
(
°dîr
, "Error: --protocol-versionárgument given butÇo version specified.\n\n");

1119 if(!
	`°rcmp
(
¨gv
[
i
+1], "mqttv31") || !strcmp(argv[i+1], "31")){

1120 
cfg
->
¥Ÿocﬁ_vîsi⁄
 = 
MQTT_PROTOCOL_V31
;

1121 }if(!
	`°rcmp
(
¨gv
[
i
+1], "mqttv311") || !strcmp(argv[i+1], "311")){

1122 
cfg
->
¥Ÿocﬁ_vîsi⁄
 = 
MQTT_PROTOCOL_V311
;

1123 }if(!
	`°rcmp
(
¨gv
[
i
+1], "mqttv5") || !strcmp(argv[i+1], "5")){

1124 
cfg
->
¥Ÿocﬁ_vîsi⁄
 = 
MQTT_PROTOCOL_V5
;

1126 
	`Ârötf
(
°dîr
, "Error: InvalidÖrotocol versionárgument given.\n\n");

1129 
i
++;

1131 }if(!
	`°rcmp
(
¨gv
[
i
], "-v") || !strcmp(argv[i], "--verbose")){

1132 if(
pub_‹_sub
 =
CLIENT_PUB
){

1133 
unknown_›ti⁄
;

1135 
cfg
->
vîbo£
 = 1;

1136 }if(!
	`°rcmp
(
¨gv
[
i
], "--version")){

1138 }if(!
	`°rcmp
(
¨gv
[
i
], "-W")){

1139 if(
pub_‹_sub
 =
CLIENT_PUB
){

1140 
unknown_›ti⁄
;

1142 if(
i
==
¨gc
-1){

1143 
	`Ârötf
(
°dîr
, "Error: -Wárgument given butÇoÅimeout specified.\n\n");

1146 
tmpi
 = 
	`©oi
(
¨gv
[
i
+1]);

1147 if(
tmpi
 < 1){

1148 
	`Ârötf
(
°dîr
, "Eº‹: InvÆidÅimeouà\"%d\".\n\n", 
tmpi
);

1151 
cfg
->
timeout
 = ()
tmpi
;

1153 
i
++;

1155 }if(!
	`°rcmp
(
¨gv
[
i
], "--will-payload")){

1156 if(
i
==
¨gc
-1){

1157 
	`Ârötf
(
°dîr
, "Error: --will-payloadárgument given butÇo willÖayload specified.\n\n");

1160 
cfg
->
wûl_∑ylﬂd
 = 
	`°rdup
(
¨gv
[
i
+1]);

1161 
cfg
->
wûl_∑ylﬂdÀn
 = ()
	`°æí
(cfg->
wûl_∑ylﬂd
);

1163 
i
++;

1164 }if(!
	`°rcmp
(
¨gv
[
i
], "--will-qos")){

1165 if(
i
==
¨gc
-1){

1166 
	`Ârötf
(
°dîr
, "Error: --will-qosárgument given butÇo will QoS specified.\n\n");

1169 
cfg
->
wûl_qos
 = 
	`©oi
(
¨gv
[
i
+1]);

1170 if(
cfg
->
wûl_qos
 < 0 || cfg->will_qos > 2){

1171 
	`Ârötf
(
°dîr
, "Eº‹: InvÆid wû»QoS %d.\n\n", 
cfg
->
wûl_qos
);

1175 
i
++;

1176 }if(!
	`°rcmp
(
¨gv
[
i
], "--will-retain")){

1177 
cfg
->
wûl_ªèö
 = 
åue
;

1178 }if(!
	`°rcmp
(
¨gv
[
i
], "--will-topic")){

1179 if(
i
==
¨gc
-1){

1180 
	`Ârötf
(
°dîr
, "Error: --will-topicárgument given butÇo willÅopic specified.\n\n");

1183 if(
	`mosquôto_vÆid©e_utf8
(
¨gv
[
i
+1], ()
	`°æí
(argv[i+1]))){

1184 
	`Ârötf
(
°dîr
, "Error: Malformed UTF-8 in --will-topicárgument.\n\n");

1187 if(
	`mosquôto_pub_t›ic_check
(
¨gv
[
i
+1]Ë=
MOSQ_ERR_INVAL
){

1188 
	`Ârötf
(
°dîr
, "Eº‹: InvÆid wû»t›i¯'%s', d€†ô c⁄èö '+' o∏'#'?\n", 
¨gv
[
i
+1]);

1191 
cfg
->
wûl_t›ic
 = 
	`°rdup
(
¨gv
[
i
+1]);

1193 
i
++;

1194 }if(!
	`°rcmp
(
¨gv
[
i
], "-x")){

1195 if(
i
==
¨gc
-1){

1196 
	`Ârötf
(
°dîr
, "Error: -xárgument given butÇo sessionÉxpiry interval specified.\n\n");

1199 if(!
	`°rcmp
(
¨gv
[
i
+1], "‚àû")){

1200 
cfg
->
£ssi⁄_expúy_öãrvÆ
 = 
UINT32_MAX
;

1202 *
íd±r
 = 
NULL
;

1203 
cfg
->
£ssi⁄_expúy_öãrvÆ
 = 
	`°πﬁ
(
¨gv
[
i
+1], &
íd±r
, 0);

1204 if(
íd±r
 =
¨gv
[
i
+1] ||Éndptr[0] != '\0'){

1206 
	`Ârötf
(
°dîr
, "Error: session-expiry-intervalÇotáÇumber.\n\n");

1209 if(
cfg
->
£ssi⁄_expúy_öãrvÆ
 > 
UINT32_MAX
 || cfg->session_expiry_interval < -1){

1210 
	`Ârötf
(
°dîr
, "Error: session-expiry-interval out ofÑange.\n\n");

1213 if(
cfg
->
£ssi⁄_expúy_öãrvÆ
 == -1){

1215 
cfg
->
£ssi⁄_expúy_öãrvÆ
 = 
UINT32_MAX
;

1219 
i
++;

1221 
unknown_›ti⁄
;

1225  
MOSQ_ERR_SUCCESS
;

1227 
unknown_›ti⁄
:

1228 
	`Ârötf
(
°dîr
, "Eº‹: Unknow¿›ti⁄ '%s'.\n",
¨gv
[
i
]);

1230 
	}
}

1232 
	$˛õ¡_›ts_£t
(
mosquôto
 *
mosq
, 
mosq_c⁄fig
 *
cfg
)

1234 #i‡
	`deföed
(
WITH_TLS
Ë|| deföed(
WITH_SOCKS
)

1235 
rc
;

1238 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_PROTOCOL_VERSION
, 
cfg
->
¥Ÿocﬁ_vîsi⁄
);

1240 if(
cfg
->
wûl_t›ic
 && 
	`mosquôto_wûl_£t_v5
(
mosq
, cfg->will_topic,

1241 
cfg
->
wûl_∑ylﬂdÀn
, cfg->
wûl_∑ylﬂd
, cfg->
wûl_qos
,

1242 
cfg
->
wûl_ªèö
, cfg->
wûl_¥›s
)){

1244 
	`îr_¥ötf
(
cfg
, "Error: Problem setting will.\n");

1245 
	`mosquôto_lib_˛ónup
();

1248 
cfg
->
wûl_¥›s
 = 
NULL
;

1250 if((
cfg
->
u£∫ame
 || cfg->
∑ssw‹d
Ë&& 
	`mosquôto_u£∫ame_pw_£t
(
mosq
, cfg->username, cfg->password)){

1251 
	`îr_¥ötf
(
cfg
, "Error: Problem setting usernameánd/orÖassword.\n");

1252 
	`mosquôto_lib_˛ónup
();

1255 #ifde‡
WITH_TLS


1256 if(
cfg
->
ˇfûe
 || cfg->
ˇ∑th
){

1257 
rc
 = 
	`mosquôto_és_£t
(
mosq
, 
cfg
->
ˇfûe
, cfg->
ˇ∑th
, cfg->
˚πfûe
, cfg->
keyfûe
, 
NULL
);

1258 if(
rc
){

1259 if(
rc
 =
MOSQ_ERR_INVAL
){

1260 
	`îr_¥ötf
(
cfg
, "Error: Problem setting TLS options: FileÇot found.\n");

1262 
	`îr_¥ötf
(
cfg
, "Eº‹: ProbÀm sëtög TLS o±i⁄s: %s.\n", 
	`mosquôto_°ªº‹
(
rc
));

1264 
	`mosquôto_lib_˛ónup
();

1267 #ifde‡
FINAL_WITH_TLS_PSK


1268 }if(
cfg
->
psk
){

1269 if(
	`mosquôto_és_psk_£t
(
mosq
, 
cfg
->
psk
, cfg->
psk_idítôy
, 
NULL
)){

1270 
	`îr_¥ötf
(
cfg
, "Error: Problem setting TLS-PSK options.\n");

1271 
	`mosquôto_lib_˛ónup
();

1275 }if(
cfg
->
p‹t
 == 8883){

1276 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_TLS_USE_OS_CERTS
, 1);

1278 if(
cfg
->
és_u£_os_˚πs
){

1279 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_TLS_USE_OS_CERTS
, 1);

1282 if(
cfg
->
ö£cuª
 && 
	`mosquôto_és_ö£cuª_£t
(
mosq
, 
åue
)){

1283 
	`îr_¥ötf
(
cfg
, "Error: Problem setting TLS insecure option.\n");

1284 
	`mosquôto_lib_˛ónup
();

1287 if(
cfg
->
és_ígöe
 && 
	`mosquôto_°rög_›ti⁄
(
mosq
, 
MOSQ_OPT_TLS_ENGINE
, cfg->tls_engine)){

1288 
	`îr_¥ötf
(
cfg
, "Eº‹: ProbÀm sëtög TLSÉngöe, i†%†®vÆidÉngöe?\n", cfg->
és_ígöe
);

1289 
	`mosquôto_lib_˛ónup
();

1292 if(
cfg
->
keyf‹m
 && 
	`mosquôto_°rög_›ti⁄
(
mosq
, 
MOSQ_OPT_TLS_KEYFORM
, cfg->keyform)){

1293 
	`îr_¥ötf
(
cfg
, "Error: Problem setting key form, it must be one of 'pem' or 'engine'.\n");

1294 
	`mosquôto_lib_˛ónup
();

1297 if(
cfg
->
és_ígöe_k∑ss_sha1
 && 
	`mosquôto_°rög_›ti⁄
(
mosq
, 
MOSQ_OPT_TLS_ENGINE_KPASS_SHA1
, cfg->tls_engine_kpass_sha1)){

1298 
	`îr_¥ötf
(
cfg
, "Error: Problem setting TLSÉngine keyÖass sha, is itá 40 character hex string?\n");

1299 
	`mosquôto_lib_˛ónup
();

1302 if(
cfg
->
és_Æ≤
 && 
	`mosquôto_°rög_›ti⁄
(
mosq
, 
MOSQ_OPT_TLS_ALPN
, cfg->tls_alpn)){

1303 
	`îr_¥ötf
(
cfg
, "Error: Problem setting TLS ALPNÖrotocol.\n");

1304 
	`mosquôto_lib_˛ónup
();

1307 if((
cfg
->
és_vîsi⁄
 || cfg->
cùhîs
Ë&& 
	`mosquôto_és_›ts_£t
(
mosq
, 1, cfg->tls_version, cfg->ciphers)){

1308 
	`îr_¥ötf
(
cfg
, "Error: Problem setting TLS options, checkÅhe optionsáre valid.\n");

1309 
	`mosquôto_lib_˛ónup
();

1313 
	`mosquôto_max_öÊight_mesßges_£t
(
mosq
, 
cfg
->
max_öÊight
);

1314 #ifde‡
WITH_SOCKS


1315 if(
cfg
->
socks5_ho°
){

1316 
rc
 = 
	`mosquôto_socks5_£t
(
mosq
, 
cfg
->
socks5_ho°
, cfg->
socks5_p‹t
, cfg->
socks5_u£∫ame
, cfg->
socks5_∑ssw‹d
);

1317 if(
rc
){

1318 
	`mosquôto_lib_˛ónup
();

1319  
rc
;

1323 if(
cfg
->
t˝_nodñay
){

1324 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_TCP_NODELAY
, 1);

1327 if(
cfg
->
msg_cou¡
 > 0 && cfg->msg_count < 20){

1331 
	`mosquôto_öt_›ti⁄
(
mosq
, 
MOSQ_OPT_RECEIVE_MAXIMUM
, 
cfg
->
msg_cou¡
);

1333  
MOSQ_ERR_SUCCESS
;

1334 
	}
}

1336 
	$˛õ¡_id_gíî©e
(
mosq_c⁄fig
 *
cfg
)

1338 if(
cfg
->
id_¥efix
){

1339 
cfg
->
id
 = 
	`mÆloc
(
	`°æí
(cfg->
id_¥efix
)+10);

1340 if(!
cfg
->
id
){

1341 
	`îr_¥ötf
(
cfg
, "Error: Out of memory.\n");

1342 
	`mosquôto_lib_˛ónup
();

1345 
	`¢¥ötf
(
cfg
->
id
, 
	`°æí
(cfg->
id_¥efix
)+10, "%s%d", cfg->id_¥efix, 
	`gëpid
());

1347  
MOSQ_ERR_SUCCESS
;

1348 
	}
}

1350 
	$˛õ¡_c⁄√˘
(
mosquôto
 *
mosq
, 
mosq_c⁄fig
 *
cfg
)

1352 #i‚de‡
WIN32


1353 *
îr
;

1355 
îr
[1024];

1357 
rc
;

1358 
p‹t
;

1360 if(
cfg
->
p‹t
 =
PORT_UNDEFINED
){

1361 #ifde‡
WITH_TLS


1362 if(
cfg
->
ˇfûe
 || cfg->
ˇ∑th


1363 #ifde‡
FINAL_WITH_TLS_PSK


1364 || 
cfg
->
psk


1367 
p‹t
 = 8883;

1371 
p‹t
 = 1883;

1374 
p‹t
 = 
cfg
->port;

1377 #ifde‡
WITH_SRV


1378 if(
cfg
->
u£_§v
){

1379 
rc
 = 
	`mosquôto_c⁄√˘_§v
(
mosq
, 
cfg
->
ho°
, cfg->
kì∑live
, cfg->
böd_addªss
);

1381 
rc
 = 
	`mosquôto_c⁄√˘_böd_v5
(
mosq
, 
cfg
->
ho°
, 
p‹t
, cfg->
kì∑live
, cfg->
böd_addªss
, cfg->
c⁄√˘_¥›s
);

1384 
rc
 = 
	`mosquôto_c⁄√˘_böd_v5
(
mosq
, 
cfg
->
ho°
, 
p‹t
, cfg->
kì∑live
, cfg->
böd_addªss
, cfg->
c⁄√˘_¥›s
);

1386 if(
rc
>0){

1387 if(
rc
 =
MOSQ_ERR_ERRNO
){

1388 #i‚de‡
WIN32


1389 
îr
 = 
	`°ªº‹
(
î∫o
);

1391 
	`F‹m©Mesßge
(
FORMAT_MESSAGE_FROM_SYSTEM
, 
NULL
, 
î∫o
, 0, (
LPTSTR
)&
îr
, 1024, NULL);

1393 
	`îr_¥ötf
(
cfg
, "Eº‹: %s\n", 
îr
);

1395 
	`îr_¥ötf
(
cfg
, "U«bÀÅÿc⁄√˘ (%s).\n", 
	`mosquôto_°ªº‹
(
rc
));

1397 
	`mosquôto_lib_˛ónup
();

1398  
rc
;

1400  
MOSQ_ERR_SUCCESS
;

1401 
	}
}

1403 #ifde‡
WITH_SOCKS


1405 
	$mosquôto__uædecode
(*
°r
)

1407 
size_t
 
i
, 
j
;

1408 
size_t
 
Àn
;

1409 if(!
°r
)  0;

1411 if(!
	`°rchr
(
°r
, '%'))  0;

1413 
Àn
 = 
	`°æí
(
°r
);

1414 
i
=0; i<
Àn
; i++){

1415 if(
°r
[
i
] == '%'){

1416 if(
i
+2 >
Àn
){

1419 if(
°r
[
i
+1] == '2' && str[i+2] == '5'){

1420 
°r
[
i
] = '%';

1421 
Àn
 -= 2;

1422 
j
=
i
+1; j<
Àn
; j++){

1423 
°r
[
j
] = str[j+2];

1425 
°r
[
j
] = '\0';

1426 }if(
°r
[
i
+1] == '3' && (str[i+2] == 'A' || str[i+2] == 'a')){

1427 
°r
[
i
] = ':';

1428 
Àn
 -= 2;

1429 
j
=
i
+1; j<
Àn
; j++){

1430 
°r
[
j
] = str[j+2];

1432 
°r
[
j
] = '\0';

1433 }if(
°r
[
i
+1] == '4' && str[i+2] == '0'){

1434 
°r
[
i
] = ':';

1435 
Àn
 -= 2;

1436 
j
=
i
+1; j<
Àn
; j++){

1437 
°r
[
j
] = str[j+2];

1439 
°r
[
j
] = '\0';

1446 
	}
}

1448 
	$mosquôto__∑r£_socks_uæ
(
mosq_c⁄fig
 *
cfg
, *
uæ
)

1450 *
°r
;

1451 
size_t
 
i
;

1452 *
u£∫ame
 = 
NULL
, *
∑ssw‹d
 = NULL, *
ho°
 = NULL, *
p‹t
 = NULL;

1453 *
u£∫ame_‹_ho°
 = 
NULL
;

1454 
size_t
 
°¨t
;

1455 
size_t
 
Àn
;

1456 
boﬁ
 
have_auth
 = 
Ál£
;

1457 
p‹t_öt
;

1459 if(!
	`°∫cmp
(
uæ
, "socks5h://", 
	`°æí
("socks5h://"))){

1460 
°r
 = 
uæ
 + 
	`°æí
("socks5h://");

1462 
	`îr_¥ötf
(
cfg
, "Eº‹: Unsuµ‹ãdÖroxyÖrŸocﬁ: %s\n", 
uæ
);

1474 
°¨t
 = 0;

1475 
i
=0; i<
	`°æí
(
°r
); i++){

1476 if(
°r
[
i
] == ':'){

1477 if(
i
 =
°¨t
){

1478 
˛ónup
;

1480 if(
have_auth
){

1483 if(
ho°
){

1485 
˛ónup
;

1487 
Àn
 = 
i
-
°¨t
;

1488 
ho°
 = 
	`mÆloc
(
Àn
 + 1);

1489 if(!
ho°
){

1490 
	`îr_¥ötf
(
cfg
, "Error: Out of memory.\n");

1491 
˛ónup
;

1493 
	`mem˝y
(
ho°
, &(
°r
[
°¨t
]), 
Àn
);

1494 
ho°
[
Àn
] = '\0';

1495 
°¨t
 = 
i
+1;

1496 }if(!
u£∫ame_‹_ho°
){

1500 
Àn
 = 
i
-
°¨t
;

1501 
u£∫ame_‹_ho°
 = 
	`mÆloc
(
Àn
 + 1);

1502 if(!
u£∫ame_‹_ho°
){

1503 
	`îr_¥ötf
(
cfg
, "Error: Out of memory.\n");

1504 
˛ónup
;

1506 
	`mem˝y
(
u£∫ame_‹_ho°
, &(
°r
[
°¨t
]), 
Àn
);

1507 
u£∫ame_‹_ho°
[
Àn
] = '\0';

1508 
°¨t
 = 
i
+1;

1510 }if(
°r
[
i
] == '@'){

1511 if(
i
 =
°¨t
){

1512 
˛ónup
;

1514 
have_auth
 = 
åue
;

1515 if(
u£∫ame_‹_ho°
){

1517 
u£∫ame
 = 
u£∫ame_‹_ho°
;

1518 
u£∫ame_‹_ho°
 = 
NULL
;

1520 
Àn
 = 
i
-
°¨t
;

1521 
∑ssw‹d
 = 
	`mÆloc
(
Àn
 + 1);

1522 if(!
∑ssw‹d
){

1523 
	`îr_¥ötf
(
cfg
, "Error: Out of memory.\n");

1524 
˛ónup
;

1526 
	`mem˝y
(
∑ssw‹d
, &(
°r
[
°¨t
]), 
Àn
);

1527 
∑ssw‹d
[
Àn
] = '\0';

1528 
°¨t
 = 
i
+1;

1532 if(
u£∫ame
){

1534 
˛ónup
;

1536 
Àn
 = 
i
-
°¨t
;

1537 
u£∫ame
 = 
	`mÆloc
(
Àn
 + 1);

1538 if(!
u£∫ame
){

1539 
	`îr_¥ötf
(
cfg
, "Error: Out of memory.\n");

1540 
˛ónup
;

1542 
	`mem˝y
(
u£∫ame
, &(
°r
[
°¨t
]), 
Àn
);

1543 
u£∫ame
[
Àn
] = '\0';

1544 
°¨t
 = 
i
+1;

1550 if(
i
 > 
°¨t
){

1551 
Àn
 = 
i
-
°¨t
;

1552 if(
ho°
){

1555 
p‹t
 = 
	`mÆloc
(
Àn
 + 1);

1556 if(!
p‹t
){

1557 
	`îr_¥ötf
(
cfg
, "Error: Out of memory.\n");

1558 
˛ónup
;

1560 
	`mem˝y
(
p‹t
, &(
°r
[
°¨t
]), 
Àn
);

1561 
p‹t
[
Àn
] = '\0';

1562 }if(
u£∫ame_‹_ho°
){

1565 
ho°
 = 
u£∫ame_‹_ho°
;

1566 
u£∫ame_‹_ho°
 = 
NULL
;

1567 
p‹t
 = 
	`mÆloc
(
Àn
 + 1);

1568 if(!
p‹t
){

1569 
	`îr_¥ötf
(
cfg
, "Error: Out of memory.\n");

1570 
˛ónup
;

1572 
	`mem˝y
(
p‹t
, &(
°r
[
°¨t
]), 
Àn
);

1573 
p‹t
[
Àn
] = '\0';

1575 
ho°
 = 
	`mÆloc
(
Àn
 + 1);

1576 if(!
ho°
){

1577 
	`îr_¥ötf
(
cfg
, "Error: Out of memory.\n");

1578 
˛ónup
;

1580 
	`mem˝y
(
ho°
, &(
°r
[
°¨t
]), 
Àn
);

1581 
ho°
[
Àn
] = '\0';

1585 if(!
ho°
){

1586 
	`îr_¥ötf
(
cfg
, "Error: InvalidÖroxy.\n");

1587 
˛ónup
;

1590 if(
	`mosquôto__uædecode
(
u£∫ame
)){

1591 
˛ónup
;

1593 if(
	`mosquôto__uædecode
(
∑ssw‹d
)){

1594 
˛ónup
;

1596 if(
p‹t
){

1597 
p‹t_öt
 = 
	`©oi
(
p‹t
);

1598 if(
p‹t_öt
 < 1 ||Öort_int > 65535){

1599 
	`îr_¥ötf
(
cfg
, "Eº‹: InvÆidÖroxyÖ‹à%d\n", 
p‹t_öt
);

1600 
˛ónup
;

1602 
	`‰ì
(
p‹t
);

1604 
p‹t_öt
 = 1080;

1607 
cfg
->
socks5_u£∫ame
 = 
u£∫ame
;

1608 
cfg
->
socks5_∑ssw‹d
 = 
∑ssw‹d
;

1609 
cfg
->
socks5_ho°
 = 
ho°
;

1610 
cfg
->
socks5_p‹t
 = 
p‹t_öt
;

1613 
˛ónup
:

1614 
	`‰ì
(
u£∫ame_‹_ho°
);

1615 
	`‰ì
(
u£∫ame
);

1616 
	`‰ì
(
∑ssw‹d
);

1617 
	`‰ì
(
ho°
);

1618 
	`‰ì
(
p‹t
);

1620 
	}
}

1623 
	$îr_¥ötf
(c⁄° 
mosq_c⁄fig
 *
cfg
, c⁄° *
fmt
, ...)

1625 
va_li°
 
va
;

1627 if(
cfg
->
quõt
) ;

1629 
	`va_°¨t
(
va
, 
fmt
);

1630 
	`vÂrötf
(
°dîr
, 
fmt
, 
va
);

1631 
	`va_íd
(
va
);

1632 
	}
}

	@client_shared.h

19 #i‚de‡
CLIENT_CONFIG_H


20 
	#CLIENT_CONFIG_H


	)

22 
	~<°dio.h
>

24 #ifde‡
WIN32


25 
	~<wösock2.h
>

27 
	~<sys/time.h
>

30 #i‚de‡
__GNUC__


31 
	#__©åibuã__
(
©åib
)

	)

35 
	#MSGMODE_NONE
 0

	)

36 
	#MSGMODE_CMD
 1

	)

37 
	#MSGMODE_STDIN_LINE
 2

	)

38 
	#MSGMODE_STDIN_FILE
 3

	)

39 
	#MSGMODE_FILE
 4

	)

40 
	#MSGMODE_NULL
 5

	)

42 
	#CLIENT_PUB
 1

	)

43 
	#CLIENT_SUB
 2

	)

44 
	#CLIENT_RR
 3

	)

45 
	#CLIENT_RESPONSE_TOPIC
 4

	)

47 
	#PORT_UNDEFINED
 -1

	)

48 
	#PORT_UNIX
 0

	)

50 
	smosq_c⁄fig
 {

51 *
	mid
;

52 *
	mid_¥efix
;

53 
	m¥Ÿocﬁ_vîsi⁄
;

54 
	mkì∑live
;

55 *
	mho°
;

56 
	mp‹t
;

57 
	mqos
;

58 
boﬁ
 
	mªèö
;

59 
	mpub_mode
;

60 *
	mfûe_öput
;

61 *
	mmesßge
;

62 
	mmsgÀn
;

63 *
	mt›ic
;

64 *
	mböd_addªss
;

65 
	mª≥©_cou¡
;

66 
timevÆ
 
	mª≥©_dñay
;

67 #ifde‡
WITH_SRV


68 
boﬁ
 
	mu£_§v
;

70 
boﬁ
 
	mdebug
;

71 
boﬁ
 
	mquõt
;

72 
	mmax_öÊight
;

73 *
	mu£∫ame
;

74 *
	m∑ssw‹d
;

75 *
	mwûl_t›ic
;

76 *
	mwûl_∑ylﬂd
;

77 
	mwûl_∑ylﬂdÀn
;

78 
	mwûl_qos
;

79 
boﬁ
 
	mwûl_ªèö
;

80 #ifde‡
WITH_TLS


81 *
	mˇfûe
;

82 *
	mˇ∑th
;

83 *
	m˚πfûe
;

84 *
	mkeyfûe
;

85 *
	mcùhîs
;

86 
boﬁ
 
	mö£cuª
;

87 *
	més_Æ≤
;

88 *
	més_vîsi⁄
;

89 *
	més_ígöe
;

90 *
	més_ígöe_k∑ss_sha1
;

91 *
	mkeyf‹m
;

92 
boﬁ
 
	més_u£_os_˚πs
;

93 #ifde‡
FINAL_WITH_TLS_PSK


94 *
	mpsk
;

95 *
	mpsk_idítôy
;

98 
boﬁ
 
	m˛ón_£ssi⁄
;

99 **
	mt›ics
;

100 
	mt›ic_cou¡
;

101 
boﬁ
 
	mexô_a·î_sub
;

102 
boﬁ
 
	mno_ªèö
;

103 
boﬁ
 
	mªèöed_⁄ly
;

104 
boﬁ
 
	mªmove_ªèöed
;

105 **
	mfûãr_outs
;

106 
	mfûãr_out_cou¡
;

107 **
	munsub_t›ics
;

108 
	munsub_t›ic_cou¡
;

109 
boﬁ
 
	mvîbo£
;

110 
boﬁ
 
	meﬁ
;

111 
	mmsg_cou¡
;

112 *
	mf‹m©
;

113 
boﬁ
 
	m¥ëty
;

114 
	mtimeout
;

115 
	msub_›ts
;

116 
	m£ssi⁄_expúy_öãrvÆ
;

117 
	møndom_fûãr
;

118 #ifde‡
WITH_SOCKS


119 *
	msocks5_ho°
;

120 
	msocks5_p‹t
;

121 *
	msocks5_u£∫ame
;

122 *
	msocks5_∑ssw‹d
;

124 
mosquôto_¥›îty
 *
	mc⁄√˘_¥›s
;

125 
mosquôto_¥›îty
 *
	mpublish_¥›s
;

126 
mosquôto_¥›îty
 *
	msubs¸ibe_¥›s
;

127 
mosquôto_¥›îty
 *
	munsubs¸ibe_¥›s
;

128 
mosquôto_¥›îty
 *
	mdisc⁄√˘_¥›s
;

129 
mosquôto_¥›îty
 *
	mwûl_¥›s
;

130 
boﬁ
 
	mhave_t›ic_Æüs
;

131 *
	mª•⁄£_t›ic
;

132 
boﬁ
 
	mt˝_nodñay
;

135 
˛õ¡_c⁄fig_lﬂd
(
mosq_c⁄fig
 *
c⁄fig
, 
pub_‹_sub
, 
¨gc
, *
¨gv
[]);

136 
˛õ¡_c⁄fig_˛ónup
(
mosq_c⁄fig
 *
cfg
);

137 
˛õ¡_›ts_£t
(
mosquôto
 *
mosq
, 
mosq_c⁄fig
 *
cfg
);

138 
˛õ¡_id_gíî©e
(
mosq_c⁄fig
 *
cfg
);

139 
˛õ¡_c⁄√˘
(
mosquôto
 *
mosq
, 
mosq_c⁄fig
 *
cfg
);

141 
cfg_∑r£_¥›îty
(
mosq_c⁄fig
 *
cfg
, 
¨gc
, *
¨gv
[], *
idx
);

143 
	$îr_¥ötf
(c⁄° 
mosq_c⁄fig
 *
cfg
, c⁄° *
fmt
, ...Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 2, 3)));

	@pub_client.c

19 
	~"c⁄fig.h
"

21 
	~<î∫o.h
>

22 
	~<f˙é.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 #i‚de‡
WIN32


27 
	~<sys/time.h
>

28 
	~<time.h
>

30 
	~<¥o˚ss.h
>

31 
	~<wösock2.h
>

32 
	#¢¥ötf
 
•rötf_s


	)

35 
	~<mqâ_¥Ÿocﬁ.h
>

36 
	~<mosquôto.h
>

37 
	~"˛õ¡_sh¨ed.h
"

38 
	~"pub_sh¨ed.h
"

42 
boﬁ
 
	gfú°_publish
 = 
åue
;

43 
	gœ°_mid
 = -1;

44 
	gœ°_mid_£¡
 = -1;

45 *
	glöe_buf
 = 
NULL
;

46 
	glöe_buf_Àn
 = 1024;

47 
boﬁ
 
	gdisc⁄√˘_£¡
 = 
Ál£
;

48 
	gpublish_cou¡
 = 0;

49 
boﬁ
 
	gªady_f‹_ª≥©
 = 
Ál£
;

50 vﬁ©ûê
	g°©us
 = 
STATUS_CONNECTING
;

51 
	gc⁄«ck_ªsu…
 = 0;

53 #ifde‡
WIN32


54 
uöt64_t
 
	g√xt_publish_tv
;

56 
	$£t_ª≥©_time
()

58 
uöt64_t
 
ticks
 = 
	`GëTickCou¡64
();

59 
√xt_publish_tv
 = 
ticks
 + 
cfg
.
ª≥©_dñay
.
tv_£c
*1000 + cfg.ª≥©_dñay.
tv_u£c
/1000;

60 
	}
}

62 
	$check_ª≥©_time
()

64 
uöt64_t
 
ticks
 = 
	`GëTickCou¡64
();

66 if(
ticks
 > 
√xt_publish_tv
){

71 
	}
}

74 
timevÆ
 
	g√xt_publish_tv
;

76 
	$£t_ª≥©_time
()

78 
	`gëtimeofday
(&
√xt_publish_tv
, 
NULL
);

79 
√xt_publish_tv
.
tv_£c
 +
cfg
.
ª≥©_dñay
.tv_sec;

80 
√xt_publish_tv
.
tv_u£c
 +
cfg
.
ª≥©_dñay
.tv_usec;

82 
√xt_publish_tv
.
tv_£c
 +√xt_publish_tv.
tv_u£c
/1000000;

83 
√xt_publish_tv
.
tv_u£c
 =Çext_publish_tv.tv_usec%1000000;

84 
	}
}

86 
	$check_ª≥©_time
()

88 
timevÆ
 
tv
;

90 
	`gëtimeofday
(&
tv
, 
NULL
);

92 if(
tv
.
tv_£c
 > 
√xt_publish_tv
.tv_sec){

94 }if(
tv
.
tv_£c
 =
√xt_publish_tv
.tv_sec

95 && 
tv
.
tv_u£c
 > 
√xt_publish_tv
.tv_usec){

100 
	}
}

103 
	$my_disc⁄√˘_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
rc
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

105 
	`UNUSED
(
mosq
);

106 
	`UNUSED
(
obj
);

107 
	`UNUSED
(
rc
);

108 
	`UNUSED
(
¥›îtõs
);

110 if(
rc
 == 0){

111 
°©us
 = 
STATUS_DISCONNECTED
;

113 
	}
}

115 
	$my_publish
(
mosquôto
 *
mosq
, *
mid
, c⁄° *
t›ic
, 
∑ylﬂdÀn
, *
∑ylﬂd
, 
qos
, 
boﬁ
 
ªèö
)

118 
time•ec
 
ç
;

119 if(
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ç
))

121 
	`≥º‹
("client/pub_client.c: my_publish");

122 
	`exô
(
EXIT_FAILURE
);

124 
	`Ârötf
(
°dîr
, "%ld\n", 
ç
.
tv_£c
*1000000+ç.
tv_n£c
/1000);

128 
ªady_f‹_ª≥©
 = 
Ál£
;

129 if(
cfg
.
¥Ÿocﬁ_vîsi⁄
 =
MQTT_PROTOCOL_V5
 && cfg.
have_t›ic_Æüs
 && 
fú°_publish
 =
Ál£
){

130  
	`mosquôto_publish_v5
(
mosq
, 
mid
, 
NULL
, 
∑ylﬂdÀn
, 
∑ylﬂd
, 
qos
, 
ªèö
, 
cfg
.
publish_¥›s
);

132 
fú°_publish
 = 
Ál£
;

133  
	`mosquôto_publish_v5
(
mosq
, 
mid
, 
t›ic
, 
∑ylﬂdÀn
, 
∑ylﬂd
, 
qos
, 
ªèö
, 
cfg
.
publish_¥›s
);

135 
	}
}

138 
	$my_c⁄√˘_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
ªsu…
, 
Êags
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

140 
rc
 = 
MOSQ_ERR_SUCCESS
;

142 
	`UNUSED
(
obj
);

143 
	`UNUSED
(
Êags
);

144 
	`UNUSED
(
¥›îtõs
);

146 
c⁄«ck_ªsu…
 = 
ªsu…
;

148 if(!
ªsu…
){

149 
fú°_publish
 = 
åue
;

150 
cfg
.
pub_mode
){

151 
MSGMODE_CMD
:

152 
MSGMODE_FILE
:

153 
MSGMODE_STDIN_FILE
:

154 
rc
 = 
	`my_publish
(
mosq
, &
mid_£¡
, 
cfg
.
t›ic
, cfg.
msgÀn
, cfg.
mesßge
, cfg.
qos
, cfg.
ªèö
);

156 
MSGMODE_NULL
:

157 
rc
 = 
	`my_publish
(
mosq
, &
mid_£¡
, 
cfg
.
t›ic
, 0, 
NULL
, cfg.
qos
, cfg.
ªèö
);

159 
MSGMODE_STDIN_LINE
:

160 
°©us
 = 
STATUS_CONNACK_RECVD
;

163 if(
rc
){

164 
rc
){

165 
MOSQ_ERR_INVAL
:

166 
	`îr_¥ötf
(&
cfg
, "Error: Invalid input. Does yourÅopic contain '+' or '#'?\n");

168 
MOSQ_ERR_NOMEM
:

169 
	`îr_¥ötf
(&
cfg
, "Error: Out of memory whenÅryingÅoÖublish message.\n");

171 
MOSQ_ERR_NO_CONN
:

172 
	`îr_¥ötf
(&
cfg
, "Error: ClientÇot connected whenÅryingÅoÖublish.\n");

174 
MOSQ_ERR_PROTOCOL
:

175 
	`îr_¥ötf
(&
cfg
, "Error: ProtocolÉrror when communicating with broker.\n");

177 
MOSQ_ERR_PAYLOAD_SIZE
:

178 
	`îr_¥ötf
(&
cfg
, "Error: MessageÖayload isÅooÜarge.\n");

180 
MOSQ_ERR_QOS_NOT_SUPPORTED
:

181 
	`îr_¥ötf
(&
cfg
, "Error: Message QoSÇot supported on broker,ÅryáÜower QoS.\n");

184 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
cfg
.
disc⁄√˘_¥›s
);

187 if(
ªsu…
){

188 if(
cfg
.
¥Ÿocﬁ_vîsi⁄
 =
MQTT_PROTOCOL_V5
){

189 if(
ªsu…
 =
MQTT_RC_UNSUPPORTED_PROTOCOL_VERSION
){

190 
	`îr_¥ötf
(&
cfg
, "C⁄√˘i⁄Éº‹: %s. Try c⁄√˘ögÅÿ™ MQTT v5 brokî, o∏u£ MQTT v3.x mode.\n", 
	`mosquôto_ªas⁄_°rög
(
ªsu…
));

192 
	`îr_¥ötf
(&
cfg
, "C⁄√˘i⁄Éº‹: %s\n", 
	`mosquôto_ªas⁄_°rög
(
ªsu…
));

195 
	`îr_¥ötf
(&
cfg
, "C⁄√˘i⁄Éº‹: %s\n", 
	`mosquôto_c⁄«ck_°rög
(
ªsu…
));

198 
°©us
 = 
STATUS_NOHOPE
;

201 
	}
}

204 
	$my_publish_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
mid
, 
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

206 *
ªas⁄_°rög
 = 
NULL
;

207 
	`UNUSED
(
obj
);

208 
	`UNUSED
(
¥›îtõs
);

210 
œ°_mid_£¡
 = 
mid
;

211 if(
ªas⁄_code
 > 127){

212 
	`îr_¥ötf
(&
cfg
, "W¨nög: Publish %d faûed: %s.\n", 
mid
, 
	`mosquôto_ªas⁄_°rög
(
ªas⁄_code
));

213 
	`mosquôto_¥›îty_ªad_°rög
(
¥›îtõs
, 
MQTT_PROP_REASON_STRING
, &
ªas⁄_°rög
, 
Ál£
);

214 if(
ªas⁄_°rög
){

215 
	`îr_¥ötf
(&
cfg
, "%s\n", 
ªas⁄_°rög
);

216 
	`‰ì
(
ªas⁄_°rög
);

219 
publish_cou¡
++;

221 if(
cfg
.
pub_mode
 =
MSGMODE_STDIN_LINE
){

222 if(
mid
 =
œ°_mid
){

223 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
cfg
.
disc⁄√˘_¥›s
);

224 
disc⁄√˘_£¡
 = 
åue
;

226 }if(
publish_cou¡
 < 
cfg
.
ª≥©_cou¡
){

227 
ªady_f‹_ª≥©
 = 
åue
;

228 
	`£t_ª≥©_time
();

229 }if(
disc⁄√˘_£¡
 =
Ál£
){

230 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
cfg
.
disc⁄√˘_¥›s
);

231 
disc⁄√˘_£¡
 = 
åue
;

233 
	}
}

236 
	$pub_sh¨ed_öô
()

238 
löe_buf
 = 
	`mÆloc
((
size_t
 )
löe_buf_Àn
);

239 if(!
löe_buf
){

240 
	`îr_¥ötf
(&
cfg
, "Error: Out of memory.\n");

244 
	}
}

247 
	$pub_°dö_löe_lo›
(
mosquôto
 *
mosq
)

249 *
buf2
;

250 
buf_Àn_a˘uÆ
 = 0;

251 
pos
;

252 
rc
 = 
MOSQ_ERR_SUCCESS
;

253 
ªad_Àn
;

254 
boﬁ
 
°dö_föished
 = 
Ál£
;

256 
	`mosquôto_lo›_°¨t
(
mosq
);

257 
°dö_föished
 = 
Ál£
;

259 if(
°©us
 =
STATUS_CONNECTING
){

260 #ifde‡
WIN32


261 
	`SÀï
(100);

263 
time•ec
 
ts
;

264 
ts
.
tv_£c
 = 0;

265 
ts
.
tv_n£c
 = 100000000;

266 
	`«no¶ìp
(&
ts
, 
NULL
);

270 if(
°©us
 =
STATUS_NOHOPE
){

271  
MOSQ_ERR_CONN_REFUSED
;

274 if(
°©us
 =
STATUS_CONNACK_RECVD
){

275 
pos
 = 0;

276 
ªad_Àn
 = 
löe_buf_Àn
;

277 
°©us
 =
STATUS_CONNACK_RECVD
 && 
	`fgës
(&
löe_buf
[
pos
], 
ªad_Àn
, 
°dö
)){

278 
buf_Àn_a˘uÆ
 = ()
	`°æí
(
löe_buf
);

279 if(
löe_buf
[
buf_Àn_a˘uÆ
-1] == '\n'){

280 
löe_buf
[
buf_Àn_a˘uÆ
-1] = '\0';

281 
rc
 = 
	`my_publish
(
mosq
, &
mid_£¡
, 
cfg
.
t›ic
, 
buf_Àn_a˘uÆ
-1, 
löe_buf
, cfg.
qos
, cfg.
ªèö
);

282 
pos
 = 0;

283 if(
rc
 !
MOSQ_ERR_SUCCESS
 &&Ñ¯!
MOSQ_ERR_NO_CONN
){

284  
rc
;

288 
löe_buf_Àn
 += 1024;

289 
pos
 +
ªad_Àn
-1;

290 
ªad_Àn
 = 1024;

291 
buf2
 = 
	`ªÆloc
(
löe_buf
, (
size_t
 )
löe_buf_Àn
);

292 if(!
buf2
){

293 
	`îr_¥ötf
(&
cfg
, "Error: Out of memory.\n");

294  
MOSQ_ERR_NOMEM
;

296 
löe_buf
 = 
buf2
;

299 if(
pos
 != 0){

300 
rc
 = 
	`my_publish
(
mosq
, &
mid_£¡
, 
cfg
.
t›ic
, 
buf_Àn_a˘uÆ
, 
löe_buf
, cfg.
qos
, cfg.
ªèö
);

301 if(
rc
){

302 if(
cfg
.
qos
>0Ë 
rc
;

305 if(
	`„of
(
°dö
)){

306 if(
mid_£¡
 == -1){

308 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
cfg
.
disc⁄√˘_¥›s
);

309 
disc⁄√˘_£¡
 = 
åue
;

310 
°©us
 = 
STATUS_DISCONNECTING
;

312 
œ°_mid
 = 
mid_£¡
;

313 
°©us
 = 
STATUS_WAITING
;

315 
°dö_föished
 = 
åue
;

316 }if(
°©us
 =
STATUS_DISCONNECTED
){

322 if(
°©us
 =
STATUS_WAITING
){

323 if(
œ°_mid_£¡
 =
œ°_mid
 && 
disc⁄√˘_£¡
 =
Ál£
){

324 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
cfg
.
disc⁄√˘_¥›s
);

325 
disc⁄√˘_£¡
 = 
åue
;

327 #ifde‡
WIN32


328 
	`SÀï
(100);

330 
time•ec
 
ts
;

331 
ts
.
tv_£c
 = 0;

332 
ts
.
tv_n£c
 = 100000000;

333 
	`«no¶ìp
(&
ts
, 
NULL
);

336 }
°dö_föished
 =
Ál£
);

337 
	`mosquôto_lo›_°›
(
mosq
, 
Ál£
);

339 if(
°©us
 =
STATUS_DISCONNECTED
){

340  
MOSQ_ERR_SUCCESS
;

342  
rc
;

344 
	}
}

347 
	$pub_Ÿhî_lo›
(
mosquôto
 *
mosq
)

349 
rc
;

350 
lo›_dñay
 = 1000;

352 if(
cfg
.
ª≥©_cou¡
 > 1 && (cfg.
ª≥©_dñay
.
tv_£c
 =0 || cfg.ª≥©_dñay.
tv_u£c
 != 0)){

353 
lo›_dñay
 = ()
cfg
.
ª≥©_dñay
.
tv_u£c
 / 2000;

357 
rc
 = 
	`mosquôto_lo›
(
mosq
, 
lo›_dñay
, 1);

358 if(
ªady_f‹_ª≥©
 && 
	`check_ª≥©_time
()){

359 
rc
 = 
MOSQ_ERR_SUCCESS
;

360 
cfg
.
pub_mode
){

361 
MSGMODE_CMD
:

362 
MSGMODE_FILE
:

363 
MSGMODE_STDIN_FILE
:

364 
rc
 = 
	`my_publish
(
mosq
, &
mid_£¡
, 
cfg
.
t›ic
, cfg.
msgÀn
, cfg.
mesßge
, cfg.
qos
, cfg.
ªèö
);

366 
MSGMODE_NULL
:

367 
rc
 = 
	`my_publish
(
mosq
, &
mid_£¡
, 
cfg
.
t›ic
, 0, 
NULL
, cfg.
qos
, cfg.
ªèö
);

370 if(
rc
 !
MOSQ_ERR_SUCCESS
 &&Ñ¯!
MOSQ_ERR_NO_CONN
){

371 
	`îr_¥ötf
(&
cfg
, "Eº‹ sídögÑïóàpublish: %s", 
	`mosquôto_°ªº‹
(
rc
));

374 }
rc
 =
MOSQ_ERR_SUCCESS
);

376 if(
°©us
 =
STATUS_DISCONNECTED
){

377  
MOSQ_ERR_SUCCESS
;

379  
rc
;

381 
	}
}

384 
	$pub_sh¨ed_lo›
(
mosquôto
 *
mosq
)

386 if(
cfg
.
pub_mode
 =
MSGMODE_STDIN_LINE
){

387  
	`pub_°dö_löe_lo›
(
mosq
);

389  
	`pub_Ÿhî_lo›
(
mosq
);

391 
	}
}

394 
	$pub_sh¨ed_˛ónup
()

396 
	`‰ì
(
löe_buf
);

397 
	}
}

400 
	$¥öt_vîsi⁄
()

402 
maj‹
, 
mö‹
, 
ªvisi⁄
;

404 
	`mosquôto_lib_vîsi⁄
(&
maj‹
, &
mö‹
, &
ªvisi⁄
);

405 
	`¥ötf
("mosquôto_pub vîsi⁄ %†ru¬ög o¿libmosquôtÿ%d.%d.%d.\n", 
VERSION
, 
maj‹
, 
mö‹
, 
ªvisi⁄
);

406 
	}
}

408 
	$¥öt_ußge
()

410 
maj‹
, 
mö‹
, 
ªvisi⁄
;

412 
	`mosquôto_lib_vîsi⁄
(&
maj‹
, &
mö‹
, &
ªvisi⁄
);

413 
	`¥ötf
("mosquitto_pub isá simple mqtt clientÅhat willÖublishá message oná singleÅopicándÉxit.\n");

414 
	`¥ötf
("mosquôto_pub vîsi⁄ %†ru¬ög o¿libmosquôtÿ%d.%d.%d.\n\n", 
VERSION
, 
maj‹
, 
mö‹
, 
ªvisi⁄
);

415 
	`¥ötf
("Usage: mosquitto_pub {[-h host] [--unixÖath] [-pÖort] [-u username] [-PÖassword] -tÅopic | -L URL}\n");

416 
	`¥ötf
(" {-f file | -l | -n | -m message}\n");

417 
	`¥ötf
(" [-c] [-k keepalive] [-q qos] [-r] [--repeat N] [--repeat-delayÅime] [-x session-expiry]\n");

418 #ifde‡
WITH_SRV


419 
	`¥ötf
(" [-A bind_address] [--nodelay] [-S]\n");

421 
	`¥ötf
(" [-A bind_address] [--nodelay]\n");

423 
	`¥ötf
(" [-i id] [-I id_prefix]\n");

424 
	`¥ötf
(" [-d] [--quiet]\n");

425 
	`¥ötf
(" [-M max_inflight]\n");

426 
	`¥ötf
(" [-u username [-PÖassword]]\n");

427 
	`¥ötf
(" [--will-topic [--will-payloadÖayload] [--will-qos qos] [--will-retain]]\n");

428 #ifde‡
WITH_TLS


429 
	`¥ötf
(" [{--cafile file | --capath dir} [--cert file] [--key file]\n");

430 
	`¥ötf
(" [--ciphers ciphers] [--insecure]\n");

431 
	`¥ötf
(" [--tls-alpnÖrotocol]\n");

432 
	`¥ötf
(" [--tls-engineÉngine] [--keyform keyform] [--tls-engine-kpass-sha1]]\n");

433 
	`¥ötf
(" [--tls-use-os-certs]\n");

434 #ifde‡
FINAL_WITH_TLS_PSK


435 
	`¥ötf
(" [--psk hex-key --psk-identity identity [--ciphers ciphers]]\n");

438 #ifde‡
WITH_SOCKS


439 
	`¥ötf
(" [--proxy socks-url]\n");

441 
	`¥ötf
(" [--property command identifier value]\n");

442 
	`¥ötf
(" [-D command identifier value]\n");

443 
	`¥ötf
(" mosquitto_pub --help\n\n");

444 
	`¥ötf
(" -A : bindÅhe outgoing socketÅoÅhis host/ipáddress. UseÅo control which interface\n");

445 
	`¥ötf
("Åhe client communicates over.\n");

446 
	`¥ötf
(" -d :Énable debug messages.\n");

447 
	`¥ötf
(" -c : disable clean session/enableÖersistent client mode\n");

448 
	`¥ötf
(" WhenÅhisárgument is used,Åhe broker will be instructedÇotÅo cleanÉxisting sessions\n");

449 
	`¥ötf
(" forÅhe same client id whenÅhe client connects,ánd sessions willÇeverÉxpire whenÅhe\n");

450 
	`¥ötf
(" client disconnects. MQTT v5 clients can changeÅheir sessionÉxpiry interval withÅhe -x\n");

451 
	`¥ötf
("árgument.\n");

452 
	`¥ötf
(" -D : Define MQTT v5Öroperties. SeeÅhe documentation for more details.\n");

453 
	`¥ötf
(" -f : sendÅhe contents ofá fileásÅhe message.\n");

454 
	`¥ötf
(" -h : mqtt hostÅo connectÅo. DefaultsÅoÜocalhost.\n");

455 
	`¥ötf
(" -i : idÅo use forÅhis client. DefaultsÅo mosquitto_pub_áppended withÅheÖrocess id.\n");

456 
	`¥ötf
(" -I : defineÅhe client idás id_prefixáppended withÅheÖrocess id. Useful for whenÅhe\n");

457 
	`¥ötf
(" broker is usingÅhe clientid_prefixes option.\n");

458 
	`¥ötf
(" -k : keepálive in seconds forÅhis client. DefaultsÅo 60.\n");

459 
	`¥ötf
(" -L : specify user,Öassword, hostname,ÖortándÅopicásá URL inÅhe form:\n");

460 
	`¥ötf
(" mqtt(s)://[username[:password]@]host[:port]/topic\n");

461 
	`¥ötf
(" -l :Ñead messages from stdin, sendingá separate message forÉachÜine.\n");

462 
	`¥ötf
(" -m : messageÖayloadÅo send.\n");

463 
	`¥ötf
(" -M :Åhe maximum inflight messages for QoS 1/2..\n");

464 
	`¥ötf
(" -n : sendáÇull (zeroÜength) message.\n");

465 
	`¥ötf
(" -p :ÇetworkÖortÅo connectÅo. DefaultsÅo 1883 forÖlain MQTTánd 8883 for MQTT over TLS.\n");

466 
	`¥ötf
(" -P :ÖrovideáÖassword\n");

467 
	`¥ötf
(" -q : quality of serviceÜevelÅo use foráll messages. DefaultsÅo 0.\n");

468 
	`¥ötf
(" -r : message should beÑetained.\n");

469 
	`¥ötf
(" -s :Ñead message from stdin, sendingÅheÉntire inputásá message.\n");

470 #ifde‡
WITH_SRV


471 
	`¥ötf
(" -S : use SRVÜookupsÅo determine which hostÅo connectÅo.\n");

473 
	`¥ötf
(" -t : mqttÅopicÅoÖublishÅo.\n");

474 
	`¥ötf
(" -u :Örovideá username\n");

475 
	`¥ötf
(" -V : specifyÅhe version ofÅhe MQTTÖrotocolÅo use when connecting.\n");

476 
	`¥ötf
(" Can be mqttv5, mqttv311 or mqttv31. DefaultsÅo mqttv311.\n");

477 
	`¥ötf
(" -x : SetÅhe session-expiry-intervalÖroperty onÅhe CONNECTÖacket. AppliesÅo MQTT v5\n");

478 
	`¥ötf
(" clients only. SetÅo 0-4294967294Åo specifyÅhe session willÉxpire inÅhat many\n");

479 
	`¥ötf
(" secondsáfterÅhe client disconnects, or use -1, 4294967295, or ‚àû forá session\n");

480 
	`¥ötf
("Åhat doesÇotÉxpire. DefaultsÅo -1 if -c isálso given, or 0 if -cÇot given.\n");

481 
	`¥ötf
(" --help : displayÅhis message.\n");

482 
	`¥ötf
(" --nodelay : disable Nagle'sálgorithm,ÅoÑeduce socket sendingÜatencyátÅheÖossible\n");

483 
	`¥ötf
("Éxpense of moreÖackets being sent.\n");

484 
	`¥ötf
(" --quiet : don'tÖrintÉrror messages.\n");

485 
	`¥ötf
(" --repeat : ifÖublish mode is -f, -m, or -s,ÅhenÑepeatÅheÖublish NÅimes.\n");

486 
	`¥ötf
(" --repeat-delay : if using --repeat, waitÅime seconds betweenÖublishes. DefaultsÅo 0.\n");

487 
	`¥ötf
(" --unix : connectÅoá brokerÅhroughá unix domain socket instead ofá TCP socket,\n");

488 
	`¥ötf
("É.g. /tmp/mosquitto.sock\n");

489 
	`¥ötf
(" --will-payload :Öayload forÅhe client Will, which is sent byÅhe broker in case of\n");

490 
	`¥ötf
(" unexpected disconnection. IfÇot givenánd will-topic is set,á zero\n");

491 
	`¥ötf
("Üength message will be sent.\n");

492 
	`¥ötf
(" --will-qos : QoSÜevel forÅhe client Will.\n");

493 
	`¥ötf
(" --will-retain : if given, makeÅhe client WillÑetained.\n");

494 
	`¥ötf
(" --will-topic :ÅheÅopic on whichÅoÖublishÅhe client Will.\n");

495 #ifde‡
WITH_TLS


496 
	`¥ötf
(" --cafile :ÖathÅoá file containingÅrusted CA certificatesÅoÉnableÉncrypted\n");

497 
	`¥ötf
(" communication.\n");

498 
	`¥ötf
(" --capath :ÖathÅoá directory containingÅrusted CA certificatesÅoÉnableÉncrypted\n");

499 
	`¥ötf
(" communication.\n");

500 
	`¥ötf
(" --cert : client certificate foráuthentication, ifÑequired by server.\n");

501 
	`¥ötf
(" --key : clientÖrivate key foráuthentication, ifÑequired by server.\n");

502 
	`¥ötf
(" --keyform : keyfileÅype, can beÉither \"pem\" or \"engine\".\n");

503 
	`¥ötf
(" --ciphers : openssl compatibleÜist of TLS ciphersÅo support.\n");

504 
	`¥ötf
(" --tls-version : TLSÖrotocol version, can be one ofÅlsv1.3Ålsv1.2 orÅlsv1.1.\n");

505 
	`¥ötf
(" DefaultsÅoÅlsv1.2 ifávailable.\n");

506 
	`¥ötf
(" --insecure : doÇot checkÅhatÅhe server certificate hostname matchesÅheÑemote\n");

507 
	`¥ötf
(" hostname. UsingÅhis option meansÅhat you cannot be sureÅhatÅhe\n");

508 
	`¥ötf
("Ñemote host isÅhe server you wishÅo connectÅoánd so is insecure.\n");

509 
	`¥ötf
(" DoÇot useÅhis option ináÖroductionÉnvironment.\n");

510 
	`¥ötf
(" --tls-engine : If set,ÉnablesÅhe use ofá TLSÉngine device.\n");

511 
	`¥ötf
(" --tls-engine-kpass-sha1 : SHA1 ofÅhe keyÖasswordÅo be used withÅhe selected SSLÉngine.\n");

512 
	`¥ötf
(" --tls-use-os-certs : LoadándÅrust OSÖrovided CA certificates.\n");

513 #ifde‡
FINAL_WITH_TLS_PSK


514 
	`¥ötf
(" --psk :Öre-shared-key in hexadecimal (noÜeading 0x)ÅoÉnable TLS-PSK mode.\n");

515 
	`¥ötf
(" --psk-identity : client identity string for TLS-PSK mode.\n");

518 #ifde‡
WITH_SOCKS


519 
	`¥ötf
(" --proxy : SOCKS5Öroxy URL ofÅhe form:\n");

520 
	`¥ötf
(" socks5h://[username[:password]@]hostname[:port]\n");

521 
	`¥ötf
(" Only \"none\"ánd \"username\"áuthentication is supported.\n");

523 
	`¥ötf
("\nSee https://mosquitto.org/ for more information.\n\n");

524 
	}
}

526 
	$maö
(
¨gc
, *
¨gv
[])

528 
mosquôto
 *
mosq
 = 
NULL
;

529 
rc
;

531 
	`mosquôto_lib_öô
();

533 if(
	`pub_sh¨ed_öô
())  1;

535 
rc
 = 
	`˛õ¡_c⁄fig_lﬂd
(&
cfg
, 
CLIENT_PUB
, 
¨gc
, 
¨gv
);

536 if(
rc
){

537 if(
rc
 == 2){

539 
	`¥öt_ußge
();

540 }if(
rc
 == 3){

541 
	`¥öt_vîsi⁄
();

543 
	`Ârötf
(
°dîr
, "\nUse 'mosquitto_pub --help'Åo see usage.\n");

545 
˛ónup
;

548 #i‚de‡
WITH_THREADING


549 if(
cfg
.
pub_mode
 =
MSGMODE_STDIN_LINE
){

550 
	`Ârötf
(
°dîr
, "Error: '-l' modeÇotávailable,Åhreading support hasÇot been compiled in.\n");

551 
˛ónup
;

555 if(
cfg
.
pub_mode
 =
MSGMODE_STDIN_FILE
){

556 if(
	`lﬂd_°dö
()){

557 
	`îr_¥ötf
(&
cfg
, "ErrorÜoading input from stdin.\n");

558 
˛ónup
;

560 }if(
cfg
.
fûe_öput
){

561 if(
	`lﬂd_fûe
(
cfg
.
fûe_öput
)){

562 
	`îr_¥ötf
(&
cfg
, "Eº‹Üﬂdög i≈uàfûê\"%s\".\n", cfg.
fûe_öput
);

563 
˛ónup
;

567 if(!
cfg
.
t›ic
 || cfg.
pub_mode
 =
MSGMODE_NONE
){

568 
	`Ârötf
(
°dîr
, "Error: BothÅopicánd message must be supplied.\n");

569 
	`¥öt_ußge
();

570 
˛ónup
;

574 if(
	`˛õ¡_id_gíî©e
(&
cfg
)){

575 
˛ónup
;

578 
mosq
 = 
	`mosquôto_√w
(
cfg
.
id
, cfg.
˛ón_£ssi⁄
, 
NULL
);

579 if(!
mosq
){

580 
î∫o
){

581 
ENOMEM
:

582 
	`îr_¥ötf
(&
cfg
, "Error: Out of memory.\n");

584 
EINVAL
:

585 
	`îr_¥ötf
(&
cfg
, "Error: Invalid id.\n");

588 
˛ónup
;

590 if(
cfg
.
debug
){

591 
	`mosquôto_log_ˇŒback_£t
(
mosq
, 
my_log_ˇŒback
);

593 
	`mosquôto_c⁄√˘_v5_ˇŒback_£t
(
mosq
, 
my_c⁄√˘_ˇŒback
);

594 
	`mosquôto_disc⁄√˘_v5_ˇŒback_£t
(
mosq
, 
my_disc⁄√˘_ˇŒback
);

595 
	`mosquôto_publish_v5_ˇŒback_£t
(
mosq
, 
my_publish_ˇŒback
);

597 if(
	`˛õ¡_›ts_£t
(
mosq
, &
cfg
)){

598 
˛ónup
;

601 
rc
 = 
	`˛õ¡_c⁄√˘
(
mosq
, &
cfg
);

602 if(
rc
){

603 
˛ónup
;

606 
rc
 = 
	`pub_sh¨ed_lo›
(
mosq
);

608 if(
cfg
.
mesßge
 && cfg.
pub_mode
 =
MSGMODE_FILE
){

609 
	`‰ì
(
cfg
.
mesßge
);

610 
cfg
.
mesßge
 = 
NULL
;

612 
	`mosquôto_de°roy
(
mosq
);

613 
	`mosquôto_lib_˛ónup
();

614 
	`˛õ¡_c⁄fig_˛ónup
(&
cfg
);

615 
	`pub_sh¨ed_˛ónup
();

617 if(
rc
){

618 
	`îr_¥ötf
(&
cfg
, "Eº‹: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

620 if(
c⁄«ck_ªsu…
){

621  
c⁄«ck_ªsu…
;

623  
rc
;

626 
˛ónup
:

627 
	`mosquôto_lib_˛ónup
();

628 
	`˛õ¡_c⁄fig_˛ónup
(&
cfg
);

629 
	`pub_sh¨ed_˛ónup
();

631 
	}
}

	@pub_shared.c

19 
	~"c⁄fig.h
"

21 
	~<î∫o.h
>

22 
	~<f˙é.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 #i‚de‡
WIN32


27 
	~<time.h
>

29 
	~<¥o˚ss.h
>

30 
	~<wösock2.h
>

31 
	#¢¥ötf
 
•rötf_s


	)

34 
	~<mosquôto.h
>

35 
	~<mqâ_¥Ÿocﬁ.h
>

36 
	~"˛õ¡_sh¨ed.h
"

37 
	~"pub_sh¨ed.h
"

41 
	gmid_£¡
 = -1;

42 
mosq_c⁄fig
 
	gcfg
;

44 
	$my_log_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
Àvñ
, c⁄° *
°r
)

46 
	`UNUSED
(
mosq
);

47 
	`UNUSED
(
obj
);

48 
	`UNUSED
(
Àvñ
);

50 
	`¥ötf
("%s\n", 
°r
);

51 
	}
}

53 
	$lﬂd_°dö
()

55 
size_t
 
pos
 = 0, 
æí
;

56 
buf
[1024];

57 *
aux_mesßge
 = 
NULL
;

59 
cfg
.
pub_mode
 = 
MSGMODE_STDIN_FILE
;

61 !
	`„of
(
°dö
)){

62 
æí
 = 
	`‰ód
(
buf
, 1, 1024, 
°dö
);

63 
aux_mesßge
 = 
	`ªÆloc
(
cfg
.
mesßge
, 
pos
+
æí
);

64 if(!
aux_mesßge
){

65 
	`îr_¥ötf
(&
cfg
, "Error: Out of memory.\n");

66 
	`‰ì
(
cfg
.
mesßge
);

70 
cfg
.
mesßge
 = 
aux_mesßge
;

72 
	`mem˝y
(&(
cfg
.
mesßge
[
pos
]), 
buf
, 
æí
);

73 
pos
 +
æí
;

75 if(
pos
 > 
MQTT_MAX_PAYLOAD
){

76 
	`îr_¥ötf
(&
cfg
, "Eº‹: MesßgêÀngth mu° bêÀs†th™ %u byãs.\n\n", 
MQTT_MAX_PAYLOAD
);

77 
	`‰ì
(
cfg
.
mesßge
);

80 
cfg
.
msgÀn
 = ()
pos
;

82 if(!
cfg
.
msgÀn
){

83 
	`îr_¥ötf
(&
cfg
, "Error: ZeroÜength input.\n");

88 
	}
}

90 
	$lﬂd_fûe
(c⁄° *
fûíame
)

92 
size_t
 
pos
, 
æí
;

93 
FILE
 *
Âå
 = 
NULL
;

94 
Êí
;

96 
Âå
 = 
	`f›í
(
fûíame
, "rb");

97 if(!
Âå
){

98 
	`îr_¥ötf
(&
cfg
, "Eº‹: U«bÀÅÿ›í fûê\"%s\".\n", 
fûíame
);

101 
cfg
.
pub_mode
 = 
MSGMODE_FILE
;

102 
	`f£ek
(
Âå
, 0, 
SEEK_END
);

103 
Êí
 = 
	`·ñl
(
Âå
);

104 if(
Êí
 > 
MQTT_MAX_PAYLOAD
){

105 
	`f˛o£
(
Âå
);

106 
	`îr_¥ötf
(&
cfg
, "Eº‹: Fûêmu° bêÀs†th™ %u byãs.\n\n", 
MQTT_MAX_PAYLOAD
);

107 
	`‰ì
(
cfg
.
mesßge
);

109 }if(
Êí
 == 0){

110 
	`f˛o£
(
Âå
);

111 
cfg
.
mesßge
 = 
NULL
;

112 
cfg
.
msgÀn
 = 0;

114 }if(
Êí
 < 0){

115 
	`f˛o£
(
Âå
);

116 
	`îr_¥ötf
(&
cfg
, "Eº‹: U«bÀÅÿdëîmöêsizêo‡fûê\"%s\".\n", 
fûíame
);

119 
cfg
.
msgÀn
 = ()
Êí
;

120 
	`f£ek
(
Âå
, 0, 
SEEK_SET
);

121 
cfg
.
mesßge
 = 
	`mÆloc
((
size_t
 )cfg.
msgÀn
);

122 if(!
cfg
.
mesßge
){

123 
	`f˛o£
(
Âå
);

124 
	`îr_¥ötf
(&
cfg
, "Error: Out of memory.\n");

127 
pos
 = 0;

128 
pos
 < (
size_t
)
cfg
.
msgÀn
){

129 
æí
 = 
	`‰ód
(&(
cfg
.
mesßge
[
pos
]), (), (
size_t
 )cfg.
msgÀn
-pos, 
Âå
);

130 
pos
 +
æí
;

132 
	`f˛o£
(
Âå
);

134 
	}
}

	@pub_shared.h

18 #i‚de‡
PUB_SHARED_H


19 
	#PUB_SHARED_H


	)

21 
	#STATUS_CONNECTING
 0

	)

22 
	#STATUS_CONNACK_RECVD
 1

	)

23 
	#STATUS_WAITING
 2

	)

24 
	#STATUS_DISCONNECTING
 3

	)

25 
	#STATUS_DISCONNECTED
 4

	)

26 
	#STATUS_NOHOPE
 5

	)

28 
mid_£¡
;

29 
mosq_c⁄fig
 
cfg
;

32 
my_c⁄√˘_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
ªsu…
, 
Êags
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

33 
my_disc⁄√˘_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
rc
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

34 
my_publish_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
mid
, 
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

35 
my_log_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
Àvñ
, c⁄° *
°r
);

36 
lﬂd_°dö
();

37 
lﬂd_fûe
(c⁄° *
fûíame
);

39 
my_publish
(
mosquôto
 *
mosq
, *
mid
, c⁄° *
t›ic
, 
∑ylﬂdÀn
, *
∑ylﬂd
, 
qos
, 
boﬁ
 
ªèö
);

41 
pub_sh¨ed_öô
();

42 
pub_sh¨ed_lo›
(
mosquôto
 *
mosq
);

43 
pub_sh¨ed_˛ónup
();

	@rr_client.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<î∫o.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<time.h
>

27 #i‚de‡
WIN32


28 
	~<uni°d.h
>

29 
	~<sig«l.h
>

31 
	~<¥o˚ss.h
>

32 
	~<wösock2.h
>

33 
	#¢¥ötf
 
•rötf_s


	)

36 
	~<mosquôto.h
>

37 
	~<mqâ_¥Ÿocﬁ.h
>

38 
	~"˛õ¡_sh¨ed.h
"

39 
	~"pub_sh¨ed.h
"

40 
	~"sub_˛õ¡_ouçut.h
"

42 
	eº__°©e
 {

43 
	mº_s_√w
,

44 
	mº_s_c⁄√˘ed
,

45 
	mº_s_subs¸ibed
,

46 
	mº_s_ªady_to_publish
,

47 
	mº_s_waô_f‹_ª•⁄£
,

48 
	mº_s_disc⁄√˘


51 
º__°©e
 
	g˛õ¡_°©e
 = 
º_s_√w
;

53 
boﬁ
 
	g¥o˚ss_mesßges
 = 
åue
;

54 
	gmsg_cou¡
 = 0;

55 
mosquôto
 *
	gg_mosq
 = 
NULL
;

56 
boﬁ
 
	gtimed_out
 = 
Ál£
;

57 
	gc⁄«ck_ªsu…
 = 0;

59 #i‚de‡
WIN32


60 
	$my_sig«l_h™dÀr
(
signum
)

62 if(
signum
 =
SIGALRM
){

63 
¥o˚ss_mesßges
 = 
Ál£
;

64 
	`mosquôto_disc⁄√˘_v5
(
g_mosq
, 
MQTT_RC_DISCONNECT_WITH_WILL_MSG
, 
cfg
.
disc⁄√˘_¥›s
);

65 
timed_out
 = 
åue
;

67 
	}
}

71 
	$my_publish
(
mosquôto
 *
mosq
, *
mid
, c⁄° *
t›ic
, 
∑ylﬂdÀn
, *
∑ylﬂd
, 
qos
, 
boﬁ
 
ªèö
)

73 if(
cfg
.
¥Ÿocﬁ_vîsi⁄
 < 
MQTT_PROTOCOL_V5
){

74  
	`mosquôto_publish_v5
(
mosq
, 
mid
, 
t›ic
, 
∑ylﬂdÀn
, 
∑ylﬂd
, 
qos
, 
ªèö
, 
NULL
);

76  
	`mosquôto_publish_v5
(
mosq
, 
mid
, 
t›ic
, 
∑ylﬂdÀn
, 
∑ylﬂd
, 
qos
, 
ªèö
, 
cfg
.
publish_¥›s
);

78 
	}
}

81 
	$my_mesßge_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, c⁄° 
mosquôto_mesßge
 *
mesßge
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

83 
	`UNUSED
(
mosq
);

84 
	`UNUSED
(
obj
);

85 
	`UNUSED
(
¥›îtõs
);

87 
	`¥öt_mesßge
(&
cfg
, 
mesßge
, 
¥›îtõs
);

88 
cfg
.
pub_mode
){

89 
MSGMODE_CMD
:

90 
MSGMODE_FILE
:

91 
MSGMODE_STDIN_FILE
:

92 
MSGMODE_NULL
:

93 
˛õ¡_°©e
 = 
º_s_disc⁄√˘
;

95 
MSGMODE_STDIN_LINE
:

96 
˛õ¡_°©e
 = 
º_s_ªady_to_publish
;

126 
	}
}

128 
	$my_c⁄√˘_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
ªsu…
, 
Êags
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

130 
	`UNUSED
(
obj
);

131 
	`UNUSED
(
Êags
);

132 
	`UNUSED
(
¥›îtõs
);

134 
c⁄«ck_ªsu…
 = 
ªsu…
;

135 if(!
ªsu…
){

136 
˛õ¡_°©e
 = 
º_s_c⁄√˘ed
;

137 
	`mosquôto_subs¸ibe_v5
(
mosq
, 
NULL
, 
cfg
.
ª•⁄£_t›ic
, cfg.
qos
, 0, cfg.
subs¸ibe_¥›s
);

139 
˛õ¡_°©e
 = 
º_s_disc⁄√˘
;

140 if(
ªsu…
){

141 if(
ªsu…
 =
MQTT_RC_UNSUPPORTED_PROTOCOL_VERSION
){

142 
	`îr_¥ötf
(&
cfg
, "C⁄√˘i⁄Éº‹: %s. mosquôto_º o∆y suµ‹t†c⁄√˘ögÅÿ™ MQTT v5 brokî\n", 
	`mosquôto_ªas⁄_°rög
(
ªsu…
));

144 
	`îr_¥ötf
(&
cfg
, "C⁄√˘i⁄Éº‹: %s\n", 
	`mosquôto_ªas⁄_°rög
(
ªsu…
));

147 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
cfg
.
disc⁄√˘_¥›s
);

149 
	}
}

152 
	$my_subs¸ibe_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
mid
, 
qos_cou¡
, c⁄° *
gø¡ed_qos
)

154 
	`UNUSED
(
obj
);

155 
	`UNUSED
(
mid
);

156 
	`UNUSED
(
qos_cou¡
);

158 if(
gø¡ed_qos
[0] < 128){

159 
˛õ¡_°©e
 = 
º_s_ªady_to_publish
;

161 
˛õ¡_°©e
 = 
º_s_disc⁄√˘
;

162 
	`îr_¥ötf
(&
cfg
, "%s\n", 
	`mosquôto_ªas⁄_°rög
(
gø¡ed_qos
[0]));

163 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
cfg
.
disc⁄√˘_¥›s
);

165 
	}
}

168 
	$my_publish_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
mid
, 
ªas⁄_code
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

170 
	`UNUSED
(
mosq
);

171 
	`UNUSED
(
obj
);

172 
	`UNUSED
(
mid
);

173 
	`UNUSED
(
ªas⁄_code
);

174 
	`UNUSED
(
¥›îtõs
);

176 
˛õ¡_°©e
 = 
º_s_waô_f‹_ª•⁄£
;

177 
	}
}

180 
	$¥öt_vîsi⁄
()

182 
maj‹
, 
mö‹
, 
ªvisi⁄
;

184 
	`mosquôto_lib_vîsi⁄
(&
maj‹
, &
mö‹
, &
ªvisi⁄
);

185 
	`¥ötf
("mosquôto_º vîsi⁄ %†ru¬ög o¿libmosquôtÿ%d.%d.%d.\n", 
VERSION
, 
maj‹
, 
mö‹
, 
ªvisi⁄
);

186 
	}
}

188 
	$¥öt_ußge
()

190 
maj‹
, 
mö‹
, 
ªvisi⁄
;

192 
	`mosquôto_lib_vîsi⁄
(&
maj‹
, &
mö‹
, &
ªvisi⁄
);

193 
	`¥ötf
("mosquitto_rr isán mqtt clientÅhat can be usedÅoÖublisháÑequest messageánd wait foráÑesponse.\n");

194 
	`¥ötf
(" DefaultsÅo MQTT v5, whereÅhe Request-Response feature will be used, but v3.1.1 canálso be used\n");

195 
	`¥ötf
(" with v3.1.1 brokers.\n");

196 
	`¥ötf
("mosquôto_º vîsi⁄ %†ru¬ög o¿libmosquôtÿ%d.%d.%d.\n\n", 
VERSION
, 
maj‹
, 
mö‹
, 
ªvisi⁄
);

197 
	`¥ötf
("Usage: mosquitto_rr {[-h host] [--unixÖath] [-pÖort] [-u username] [-PÖassword] -tÅopic | -L URL} -eÑesponse-topic\n");

198 
	`¥ötf
(" [-c] [-k keepalive] [-q qos] [-R] [-x session-expiry-interval\n");

199 
	`¥ötf
(" [-F format]\n");

200 #i‚de‡
WIN32


201 
	`¥ötf
(" [-WÅimeout_secs]\n");

203 #ifde‡
WITH_SRV


204 
	`¥ötf
(" [-A bind_address] [--nodelay] [-S]\n");

206 
	`¥ötf
(" [-A bind_address] [--nodelay]\n");

208 
	`¥ötf
(" [-i id] [-I id_prefix]\n");

209 
	`¥ötf
(" [-d] [-N] [--quiet] [-v]\n");

210 
	`¥ötf
(" [--will-topic [--will-payloadÖayload] [--will-qos qos] [--will-retain]]\n");

211 #ifde‡
WITH_TLS


212 
	`¥ötf
(" [{--cafile file | --capath dir} [--cert file] [--key file]\n");

213 
	`¥ötf
(" [--ciphers ciphers] [--insecure]\n");

214 
	`¥ötf
(" [--tls-alpnÖrotocol]\n");

215 
	`¥ötf
(" [--tls-engineÉngine] [--keyform keyform] [--tls-engine-kpass-sha1]]\n");

216 
	`¥ötf
(" [--tls-use-os-certs]\n");

217 #ifde‡
FINAL_WITH_TLS_PSK


218 
	`¥ötf
(" [--psk hex-key --psk-identity identity [--ciphers ciphers]]\n");

221 #ifde‡
WITH_SOCKS


222 
	`¥ötf
(" [--proxy socks-url]\n");

224 
	`¥ötf
(" [-D command identifier value]\n");

225 
	`¥ötf
(" mosquitto_rr --help\n\n");

226 
	`¥ötf
(" -A : bindÅhe outgoing socketÅoÅhis host/ipáddress. UseÅo control which interface\n");

227 
	`¥ötf
("Åhe client communicates over.\n");

228 
	`¥ötf
(" -c : disable clean session/enableÖersistent client mode\n");

229 
	`¥ötf
(" WhenÅhisárgument is used,Åhe broker will be instructedÇotÅo cleanÉxisting sessions\n");

230 
	`¥ötf
(" forÅhe same client id whenÅhe client connects,ánd sessions willÇeverÉxpire whenÅhe\n");

231 
	`¥ötf
(" client disconnects. MQTT v5 clients can changeÅheir sessionÉxpiry interval withÅhe -x\n");

232 
	`¥ötf
("árgument.\n");

233 
	`¥ötf
(" -d :Énable debug messages.\n");

234 
	`¥ötf
(" -D : Define MQTT v5Öroperties. SeeÅhe documentation for more details.\n");

235 
	`¥ötf
(" -e : ResponseÅopic. The client will subscribeÅoÅhisÅopicÅo wait foráÑesponse.\n");

236 
	`¥ötf
(" -F : output format.\n");

237 
	`¥ötf
(" -h : mqtt hostÅo connectÅo. DefaultsÅoÜocalhost.\n");

238 
	`¥ötf
(" -i : idÅo use forÅhis client. DefaultsÅo mosquitto_rr_áppended withÅheÖrocess id.\n");

239 
	`¥ötf
(" -k : keepálive in seconds forÅhis client. DefaultsÅo 60.\n");

240 
	`¥ötf
(" -L : specify user,Öassword, hostname,ÖortándÅopicásá URL inÅhe form:\n");

241 
	`¥ötf
(" mqtt(s)://[username[:password]@]host[:port]/topic\n");

242 
	`¥ötf
(" -N : doÇotáddánÉnd ofÜine character whenÖrintingÅheÖayload.\n");

243 
	`¥ötf
(" -p :ÇetworkÖortÅo connectÅo. DefaultsÅo 1883 forÖlain MQTTánd 8883 for MQTT over TLS.\n");

244 
	`¥ötf
(" -P :ÖrovideáÖassword\n");

245 
	`¥ötf
(" -q : quality of serviceÜevelÅo use for communications. DefaultsÅo 0.\n");

246 
	`¥ötf
(" -R : doÇotÖrint stale messages (those withÑetain set).\n");

247 #ifde‡
WITH_SRV


248 
	`¥ötf
(" -S : use SRVÜookupsÅo determine which hostÅo connectÅo.\n");

250 
	`¥ötf
(" -t :Åopic whereÅheÑequest message will be sent.\n");

251 
	`¥ötf
(" -u :Örovideá username\n");

252 
	`¥ötf
(" -v :ÖrintÑeceived messages verbosely.\n");

253 
	`¥ötf
(" -V : specifyÅhe version ofÅhe MQTTÖrotocolÅo use when connecting.\n");

254 
	`¥ötf
(" DefaultsÅo 5.\n");

255 #i‚de‡
WIN32


256 
	`¥ötf
(" -W : SpecifiesáÅimeout in seconds howÜongÅo wait foráÑesponse.\n");

258 
	`¥ötf
(" -x : SetÅhe session-expiry-intervalÖroperty onÅhe CONNECTÖacket. AppliesÅo MQTT v5\n");

259 
	`¥ötf
(" clients only. SetÅo 0-4294967294Åo specifyÅhe session willÉxpire inÅhat many\n");

260 
	`¥ötf
(" secondsáfterÅhe client disconnects, or use -1, 4294967295, or ‚àû forá session\n");

261 
	`¥ötf
("Åhat doesÇotÉxpire. DefaultsÅo -1 if -c isálso given, or 0 if -cÇot given.\n");

262 
	`¥ötf
(" --help : displayÅhis message.\n");

263 
	`¥ötf
(" --nodelay : disable Nagle'sálgorithm,ÅoÑeduce socket sendingÜatencyátÅheÖossible\n");

264 
	`¥ötf
("Éxpense of moreÖackets being sent.\n");

265 
	`¥ötf
(" --pretty :Örint formatted outputÑatherÅhan minimised output when usingÅhe\n");

266 
	`¥ötf
(" JSON output format option.\n");

267 
	`¥ötf
(" --quiet : don'tÖrintÉrror messages.\n");

268 
	`¥ötf
(" --unix : connectÅoá brokerÅhroughá unix domain socket instead ofá TCP socket,\n");

269 
	`¥ötf
("É.g. /tmp/mosquitto.sock\n");

270 
	`¥ötf
(" --will-payload :Öayload forÅhe client Will, which is sent byÅhe broker in case of\n");

271 
	`¥ötf
(" unexpected disconnection. IfÇot givenánd will-topic is set,á zero\n");

272 
	`¥ötf
("Üength message will be sent.\n");

273 
	`¥ötf
(" --will-qos : QoSÜevel forÅhe client Will.\n");

274 
	`¥ötf
(" --will-retain : if given, makeÅhe client WillÑetained.\n");

275 
	`¥ötf
(" --will-topic :ÅheÅopic on whichÅoÖublishÅhe client Will.\n");

276 #ifde‡
WITH_TLS


277 
	`¥ötf
(" --cafile :ÖathÅoá file containingÅrusted CA certificatesÅoÉnableÉncrypted\n");

278 
	`¥ötf
(" certificate based communication.\n");

279 
	`¥ötf
(" --capath :ÖathÅoá directory containingÅrusted CA certificatesÅoÉnableÉncrypted\n");

280 
	`¥ötf
(" communication.\n");

281 
	`¥ötf
(" --cert : client certificate foráuthentication, ifÑequired by server.\n");

282 
	`¥ötf
(" --key : clientÖrivate key foráuthentication, ifÑequired by server.\n");

283 
	`¥ötf
(" --ciphers : openssl compatibleÜist of TLS ciphersÅo support.\n");

284 
	`¥ötf
(" --tls-use-os-certs : LoadándÅrust OSÖrovided CA certificates.\n");

285 
	`¥ötf
(" --tls-version : TLSÖrotocol version, can be one ofÅlsv1.3Ålsv1.2 orÅlsv1.1.\n");

286 
	`¥ötf
(" DefaultsÅoÅlsv1.2 ifávailable.\n");

287 
	`¥ötf
(" --insecure : doÇot checkÅhatÅhe server certificate hostname matchesÅheÑemote\n");

288 
	`¥ötf
(" hostname. UsingÅhis option meansÅhat you cannot be sureÅhatÅhe\n");

289 
	`¥ötf
("Ñemote host isÅhe server you wishÅo connectÅoánd so is insecure.\n");

290 
	`¥ötf
(" DoÇot useÅhis option ináÖroductionÉnvironment.\n");

291 #ifde‡
WITH_TLS_PSK


292 
	`¥ötf
(" --psk :Öre-shared-key in hexadecimal (noÜeading 0x)ÅoÉnable TLS-PSK mode.\n");

293 
	`¥ötf
(" --psk-identity : client identity string for TLS-PSK mode.\n");

296 #ifde‡
WITH_SOCKS


297 
	`¥ötf
(" --proxy : SOCKS5Öroxy URL ofÅhe form:\n");

298 
	`¥ötf
(" socks5h://[username[:password]@]hostname[:port]\n");

299 
	`¥ötf
(" Only \"none\"ánd \"username\"áuthentication is supported.\n");

301 
	`¥ötf
("\nSee https://mosquitto.org/ for more information.\n\n");

302 
	}
}

304 
	$maö
(
¨gc
, *
¨gv
[])

306 
rc
;

307 #i‚de‡
WIN32


308 
siga˘i⁄
 
siga˘
;

311 
	`mosquôto_lib_öô
();

312 
	`ouçut_öô
();

314 
rc
 = 
	`˛õ¡_c⁄fig_lﬂd
(&
cfg
, 
CLIENT_RR
, 
¨gc
, 
¨gv
);

315 if(
rc
){

316 if(
rc
 == 2){

318 
	`¥öt_ußge
();

319 }if(
rc
 == 3){

321 
	`¥öt_vîsi⁄
();

323 
	`Ârötf
(
°dîr
, "\nUse 'mosquitto_rr --help'Åo see usage.\n");

325 
˛ónup
;

328 if(!
cfg
.
t›ic
 || cfg.
pub_mode
 =
MSGMODE_NONE
 || !cfg.
ª•⁄£_t›ic
){

329 
	`Ârötf
(
°dîr
, "Error: All ofÅopic, message,ándÑesponseÅopic must be supplied.\n");

330 
	`Ârötf
(
°dîr
, "\nUse 'mosquitto_rr --help'Åo see usage.\n");

331 
˛ónup
;

333 
rc
 = 
	`mosquôto_¥›îty_add_°rög
(&
cfg
.
publish_¥›s
, 
MQTT_PROP_RESPONSE_TOPIC
, cfg.
ª•⁄£_t›ic
);

334 if(
rc
){

335 
	`Ârötf
(
°dîr
, "ErroráddingÖroperty RESPONSE_TOPIC.\n");

336 
˛ónup
;

338 
rc
 = 
	`mosquôto_¥›îty_check_Æl
(
CMD_PUBLISH
, 
cfg
.
publish_¥›s
);

339 if(
rc
){

340 
	`îr_¥ötf
(&
cfg
, "Error in PUBLISHÖroperties: DuplicateÑesponseÅopic.\n");

341 
˛ónup
;

344 if(
	`˛õ¡_id_gíî©e
(&
cfg
)){

345 
˛ónup
;

348 
g_mosq
 = 
	`mosquôto_√w
(
cfg
.
id
, cfg.
˛ón_£ssi⁄
, &cfg);

349 if(!
g_mosq
){

350 
î∫o
){

351 
ENOMEM
:

352 
	`îr_¥ötf
(&
cfg
, "Error: Out of memory.\n");

354 
EINVAL
:

355 
	`îr_¥ötf
(&
cfg
, "Error: Invalid idánd/or clean_session.\n");

358 
˛ónup
;

360 if(
	`˛õ¡_›ts_£t
(
g_mosq
, &
cfg
)){

361 
˛ónup
;

363 if(
cfg
.
debug
){

364 
	`mosquôto_log_ˇŒback_£t
(
g_mosq
, 
my_log_ˇŒback
);

366 
	`mosquôto_c⁄√˘_v5_ˇŒback_£t
(
g_mosq
, 
my_c⁄√˘_ˇŒback
);

367 
	`mosquôto_subs¸ibe_ˇŒback_£t
(
g_mosq
, 
my_subs¸ibe_ˇŒback
);

368 
	`mosquôto_mesßge_v5_ˇŒback_£t
(
g_mosq
, 
my_mesßge_ˇŒback
);

370 
rc
 = 
	`˛õ¡_c⁄√˘
(
g_mosq
, &
cfg
);

371 if(
rc
){

372 
˛ónup
;

375 #i‚de‡
WIN32


376 
siga˘
.
ß_h™dÀr
 = 
my_sig«l_h™dÀr
;

377 
	`sigem±y£t
(&
siga˘
.
ß_mask
);

378 
siga˘
.
ß_Êags
 = 0;

380 if(
	`siga˘i⁄
(
SIGALRM
, &
siga˘
, 
NULL
) == -1){

381 
	`≥º‹
("sigaction");

382 
˛ónup
;

385 if(
cfg
.
timeout
){

386 
	`Æ¨m
(
cfg
.
timeout
);

391 
rc
 = 
	`mosquôto_lo›
(
g_mosq
, -1, 1);

392 if(
˛õ¡_°©e
 =
º_s_ªady_to_publish
){

393 
˛õ¡_°©e
 = 
º_s_waô_f‹_ª•⁄£
;

394 
cfg
.
pub_mode
){

395 
MSGMODE_CMD
:

396 
MSGMODE_FILE
:

397 
MSGMODE_STDIN_FILE
:

398 
rc
 = 
	`my_publish
(
g_mosq
, &
mid_£¡
, 
cfg
.
t›ic
, cfg.
msgÀn
, cfg.
mesßge
, cfg.
qos
, cfg.
ªèö
);

400 
MSGMODE_NULL
:

401 
rc
 = 
	`my_publish
(
g_mosq
, &
mid_£¡
, 
cfg
.
t›ic
, 0, 
NULL
, cfg.
qos
, cfg.
ªèö
);

403 
MSGMODE_STDIN_LINE
:

408 }
rc
 =
MOSQ_ERR_SUCCESS
 && 
˛õ¡_°©e
 !
º_s_disc⁄√˘
);

410 
	`mosquôto_de°roy
(
g_mosq
);

411 
	`mosquôto_lib_˛ónup
();

413 if(
cfg
.
msg_cou¡
>0 && 
rc
 =
MOSQ_ERR_NO_CONN
){

414 
rc
 = 0;

416 
	`˛õ¡_c⁄fig_˛ónup
(&
cfg
);

417 if(
timed_out
){

418 
	`îr_¥ötf
(&
cfg
, "Timed out\n");

419  
MOSQ_ERR_TIMEOUT
;

420 }if(
rc
){

421 
	`îr_¥ötf
(&
cfg
, "Eº‹: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

423 if(
c⁄«ck_ªsu…
){

424  
c⁄«ck_ªsu…
;

426  
rc
;

429 
˛ónup
:

430 
	`mosquôto_lib_˛ónup
();

431 
	`˛õ¡_c⁄fig_˛ónup
(&
cfg
);

433 
	}
}

	@sub_client.c

19 
	~"c⁄fig.h
"

21 
	~<as£π.h
>

22 
	~<î∫o.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<time.h
>

27 #i‚de‡
WIN32


28 
	~<uni°d.h
>

29 
	~<sig«l.h
>

31 
	~<¥o˚ss.h
>

32 
	~<wösock2.h
>

33 
	#¢¥ötf
 
•rötf_s


	)

36 
	~<mosquôto.h
>

37 
	~<mqâ_¥Ÿocﬁ.h
>

38 
	~"˛õ¡_sh¨ed.h
"

39 
	~"sub_˛õ¡_ouçut.h
"

41 
mosq_c⁄fig
 
	gcfg
;

42 
boﬁ
 
	g¥o˚ss_mesßges
 = 
åue
;

43 
	gmsg_cou¡
 = 0;

44 
mosquôto
 *
	gg_mosq
 = 
NULL
;

45 
	gœ°_mid
 = 0;

46 
boﬁ
 
	gtimed_out
 = 
Ál£
;

47 
	gc⁄«ck_ªsu…
 = 0;

48 
boﬁ
 
	gc⁄«ck_ª˚ived
 = 
Ál£
;

50 #i‚de‡
WIN32


51 
	$my_sig«l_h™dÀr
(
signum
)

53 if(
signum
 =
SIGALRM
 || signum =
SIGTERM
 || signum =
SIGINT
){

54 if(
c⁄«ck_ª˚ived
){

55 
¥o˚ss_mesßges
 = 
Ál£
;

56 
	`mosquôto_disc⁄√˘_v5
(
g_mosq
, 
MQTT_RC_DISCONNECT_WITH_WILL_MSG
, 
cfg
.
disc⁄√˘_¥›s
);

58 
	`exô
(-1);

61 if(
signum
 =
SIGALRM
){

62 
timed_out
 = 
åue
;

64 
	}
}

68 
	$my_mesßge_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, c⁄° 
mosquôto_mesßge
 *
mesßge
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

70 
i
;

71 
boﬁ
 
ªs
;

73 
	`UNUSED
(
obj
);

74 
	`UNUSED
(
¥›îtõs
);

76 if(
¥o˚ss_mesßges
 =
Ál£
) ;

78 if(
cfg
.
ªèöed_⁄ly
 && !
mesßge
->
ªèö
 && 
¥o˚ss_mesßges
){

79 
¥o˚ss_mesßges
 = 
Ál£
;

80 if(
œ°_mid
 == 0){

81 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
cfg
.
disc⁄√˘_¥›s
);

86 if(
mesßge
->
ªèö
 && 
cfg
.
no_ªèö
) ;

87 if(
cfg
.
fûãr_outs
){

88 
i
=0; i<
cfg
.
fûãr_out_cou¡
; i++){

89 
	`mosquôto_t›ic_m©ches_sub
(
cfg
.
fûãr_outs
[
i
], 
mesßge
->
t›ic
, &
ªs
);

90 if(
ªs
) ;

94 if(
cfg
.
ªmove_ªèöed
 && 
mesßge
->
ªèö
){

95 
	`mosquôto_publish
(
mosq
, &
œ°_mid
, 
mesßge
->
t›ic
, 0, 
NULL
, 1, 
åue
);

98 
	`¥öt_mesßge
(&
cfg
, 
mesßge
, 
¥›îtõs
);

99 if(
	`„º‹
(
°dout
)){

100 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
cfg
.
disc⁄√˘_¥›s
);

103 if(
cfg
.
msg_cou¡
>0){

104 
msg_cou¡
++;

105 if(
cfg
.
msg_cou¡
 == msg_count){

106 
¥o˚ss_mesßges
 = 
Ál£
;

107 if(
œ°_mid
 == 0){

108 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
cfg
.
disc⁄√˘_¥›s
);

112 
	}
}

114 
	$my_c⁄√˘_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
ªsu…
, 
Êags
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

116 
i
;

118 
	`UNUSED
(
obj
);

119 
	`UNUSED
(
Êags
);

120 
	`UNUSED
(
¥›îtõs
);

122 
c⁄«ck_ª˚ived
 = 
åue
;

124 
c⁄«ck_ªsu…
 = 
ªsu…
;

125 if(!
ªsu…
){

126 
	`mosquôto_subs¸ibe_mu…ùÀ
(
mosq
, 
NULL
, 
cfg
.
t›ic_cou¡
, cfg.
t›ics
, cfg.
qos
, cfg.
sub_›ts
, cfg.
subs¸ibe_¥›s
);

128 
i
=0; i<
cfg
.
unsub_t›ic_cou¡
; i++){

129 
	`mosquôto_unsubs¸ibe_v5
(
mosq
, 
NULL
, 
cfg
.
unsub_t›ics
[
i
], cfg.
unsubs¸ibe_¥›s
);

132 if(
ªsu…
){

133 if(
cfg
.
¥Ÿocﬁ_vîsi⁄
 =
MQTT_PROTOCOL_V5
){

134 if(
ªsu…
 =
MQTT_RC_UNSUPPORTED_PROTOCOL_VERSION
){

135 
	`îr_¥ötf
(&
cfg
, "C⁄√˘i⁄Éº‹: %s. Try c⁄√˘ögÅÿ™ MQTT v5 brokî, o∏u£ MQTT v3.x mode.\n", 
	`mosquôto_ªas⁄_°rög
(
ªsu…
));

137 
	`îr_¥ötf
(&
cfg
, "C⁄√˘i⁄Éº‹: %s\n", 
	`mosquôto_ªas⁄_°rög
(
ªsu…
));

140 
	`îr_¥ötf
(&
cfg
, "C⁄√˘i⁄Éº‹: %s\n", 
	`mosquôto_c⁄«ck_°rög
(
ªsu…
));

143 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
cfg
.
disc⁄√˘_¥›s
);

145 
	}
}

147 
	$my_subs¸ibe_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
mid
, 
qos_cou¡
, c⁄° *
gø¡ed_qos
)

149 
i
;

150 
boﬁ
 
some_sub_Ælowed
 = (
gø¡ed_qos
[0] < 128);

151 
boﬁ
 
should_¥öt
 = 
cfg
.
debug
 && !cfg.
quõt
;

152 
	`UNUSED
(
obj
);

154 if(
should_¥öt
Ë
	`¥ötf
("Subs¸ibed (mid: %d): %d", 
mid
, 
gø¡ed_qos
[0]);

155 
i
=1; i<
qos_cou¡
; i++){

156 if(
should_¥öt
Ë
	`¥ötf
(", %d", 
gø¡ed_qos
[
i
]);

157 
some_sub_Ælowed
 |(
gø¡ed_qos
[
i
] < 128);

159 if(
should_¥öt
Ë
	`¥ötf
("\n");

161 if(
some_sub_Ælowed
 =
Ál£
){

162 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
cfg
.
disc⁄√˘_¥›s
);

163 
	`îr_¥ötf
(&
cfg
, "All subscriptionÑequests were denied.\n");

166 if(
cfg
.
exô_a·î_sub
){

167 
	`mosquôto_disc⁄√˘_v5
(
mosq
, 0, 
cfg
.
disc⁄√˘_¥›s
);

169 
	}
}

171 
	$my_log_ˇŒback
(
mosquôto
 *
mosq
, *
obj
, 
Àvñ
, c⁄° *
°r
)

173 
	`UNUSED
(
mosq
);

174 
	`UNUSED
(
obj
);

175 
	`UNUSED
(
Àvñ
);

177 
	`¥ötf
("%s\n", 
°r
);

178 
	}
}

180 
	$¥öt_vîsi⁄
()

182 
maj‹
, 
mö‹
, 
ªvisi⁄
;

184 
	`mosquôto_lib_vîsi⁄
(&
maj‹
, &
mö‹
, &
ªvisi⁄
);

185 
	`¥ötf
("mosquôto_sub vîsi⁄ %†ru¬ög o¿libmosquôtÿ%d.%d.%d.\n", 
VERSION
, 
maj‹
, 
mö‹
, 
ªvisi⁄
);

186 
	}
}

188 
	$¥öt_ußge
()

190 
maj‹
, 
mö‹
, 
ªvisi⁄
;

192 
	`mosquôto_lib_vîsi⁄
(&
maj‹
, &
mö‹
, &
ªvisi⁄
);

193 
	`¥ötf
("mosquitto_sub isá simple mqtt clientÅhat will subscribeÅoá set ofÅopicsándÖrintáll messages itÑeceives.\n");

194 
	`¥ötf
("mosquôto_sub vîsi⁄ %†ru¬ög o¿libmosquôtÿ%d.%d.%d.\n\n", 
VERSION
, 
maj‹
, 
mö‹
, 
ªvisi⁄
);

195 
	`¥ötf
("Usage: mosquitto_sub {[-h host] [--unixÖath] [-pÖort] [-u username] [-PÖassword] -tÅopic | -L URL [-tÅopic]}\n");

196 
	`¥ötf
(" [-c] [-k keepalive] [-q qos] [-x session-expiry-interval]\n");

197 
	`¥ötf
(" [-C msg_count] [-E] [-R] [--retained-only] [--remove-retained] [-T filter_out] [-UÅopic ...]\n");

198 
	`¥ötf
(" [-F format]\n");

199 #i‚de‡
WIN32


200 
	`¥ötf
(" [-WÅimeout_secs]\n");

202 #ifde‡
WITH_SRV


203 
	`¥ötf
(" [-A bind_address] [--nodelay] [-S]\n");

205 
	`¥ötf
(" [-A bind_address] [--nodelay]\n");

207 
	`¥ötf
(" [-i id] [-I id_prefix]\n");

208 
	`¥ötf
(" [-d] [-N] [--quiet] [-v]\n");

209 
	`¥ötf
(" [--will-topic [--will-payloadÖayload] [--will-qos qos] [--will-retain]]\n");

210 #ifde‡
WITH_TLS


211 
	`¥ötf
(" [{--cafile file | --capath dir} [--cert file] [--key file]\n");

212 
	`¥ötf
(" [--ciphers ciphers] [--insecure]\n");

213 
	`¥ötf
(" [--tls-alpnÖrotocol]\n");

214 
	`¥ötf
(" [--tls-engineÉngine] [--keyform keyform] [--tls-engine-kpass-sha1]]\n");

215 
	`¥ötf
(" [--tls-use-os-certs]\n");

216 #ifde‡
FINAL_WITH_TLS_PSK


217 
	`¥ötf
(" [--psk hex-key --psk-identity identity [--ciphers ciphers]]\n");

220 #ifde‡
WITH_SOCKS


221 
	`¥ötf
(" [--proxy socks-url]\n");

223 
	`¥ötf
(" [-D command identifier value]\n");

224 
	`¥ötf
(" mosquitto_sub --help\n\n");

225 
	`¥ötf
(" -A : bindÅhe outgoing socketÅoÅhis host/ipáddress. UseÅo control which interface\n");

226 
	`¥ötf
("Åhe client communicates over.\n");

227 
	`¥ötf
(" -c : disable clean session/enableÖersistent client mode\n");

228 
	`¥ötf
(" WhenÅhisárgument is used,Åhe broker will be instructedÇotÅo cleanÉxisting sessions\n");

229 
	`¥ötf
(" forÅhe same client id whenÅhe client connects,ánd sessions willÇeverÉxpire whenÅhe\n");

230 
	`¥ötf
(" client disconnects. MQTT v5 clients can changeÅheir sessionÉxpiry interval withÅhe -x\n");

231 
	`¥ötf
("árgument.\n");

232 
	`¥ötf
(" -C : disconnectándÉxitáfterÑeceivingÅhe 'msg_count' messages.\n");

233 
	`¥ötf
(" -d :Énable debug messages.\n");

234 
	`¥ötf
(" -D : Define MQTT v5Öroperties. SeeÅhe documentation for more details.\n");

235 
	`¥ötf
(" -E : Exit onceáll subscriptions have beenácknowledged byÅhe broker.\n");

236 
	`¥ötf
(" -F : output format.\n");

237 
	`¥ötf
(" -h : mqtt hostÅo connectÅo. DefaultsÅoÜocalhost.\n");

238 
	`¥ötf
(" -i : idÅo use forÅhis client. DefaultsÅo mosquitto_sub_áppended withÅheÖrocess id.\n");

239 
	`¥ötf
(" -I : defineÅhe client idás id_prefixáppended withÅheÖrocess id. Useful for whenÅhe\n");

240 
	`¥ötf
(" broker is usingÅhe clientid_prefixes option.\n");

241 
	`¥ötf
(" -k : keepálive in seconds forÅhis client. DefaultsÅo 60.\n");

242 
	`¥ötf
(" -L : specify user,Öassword, hostname,ÖortándÅopicásá URL inÅhe form:\n");

243 
	`¥ötf
(" mqtt(s)://[username[:password]@]host[:port]/topic\n");

244 
	`¥ötf
(" -N : doÇotáddánÉnd ofÜine character whenÖrintingÅheÖayload.\n");

245 
	`¥ötf
(" -p :ÇetworkÖortÅo connectÅo. DefaultsÅo 1883 forÖlain MQTTánd 8883 for MQTT over TLS.\n");

246 
	`¥ötf
(" -P :ÖrovideáÖassword\n");

247 
	`¥ötf
(" -q : quality of serviceÜevelÅo use forÅhe subscription. DefaultsÅo 0.\n");

248 
	`¥ötf
(" -R : doÇotÖrint stale messages (those withÑetain set).\n");

249 #ifde‡
WITH_SRV


250 
	`¥ötf
(" -S : use SRVÜookupsÅo determine which hostÅo connectÅo.\n");

252 
	`¥ötf
(" -t : mqttÅopicÅo subscribeÅo. May beÑepeated multipleÅimes.\n");

253 
	`¥ötf
(" -T :Åopic stringÅo filter out ofÑesults. May beÑepeated.\n");

254 
	`¥ötf
(" -u :Örovideá username\n");

255 
	`¥ötf
(" -U : unsubscribe fromáÅopic. May beÑepeated.\n");

256 
	`¥ötf
(" -v :ÖrintÖublished messages verbosely.\n");

257 
	`¥ötf
(" -V : specifyÅhe version ofÅhe MQTTÖrotocolÅo use when connecting.\n");

258 
	`¥ötf
(" Can be mqttv5, mqttv311 or mqttv31. DefaultsÅo mqttv311.\n");

259 #i‚de‡
WIN32


260 
	`¥ötf
(" -W : SpecifiesáÅimeout in seconds howÜongÅoÖrocess incoming MQTT messages.\n");

262 
	`¥ötf
(" -x : SetÅhe session-expiry-intervalÖroperty onÅhe CONNECTÖacket. AppliesÅo MQTT v5\n");

263 
	`¥ötf
(" clients only. SetÅo 0-4294967294Åo specifyÅhe session willÉxpire inÅhat many\n");

264 
	`¥ötf
(" secondsáfterÅhe client disconnects, or use -1, 4294967295, or ‚àû forá session\n");

265 
	`¥ötf
("Åhat doesÇotÉxpire. DefaultsÅo -1 if -c isálso given, or 0 if -cÇot given.\n");

266 
	`¥ötf
(" --help : displayÅhis message.\n");

267 
	`¥ötf
(" --nodelay : disable Nagle'sálgorithm,ÅoÑeduce socket sendingÜatencyátÅheÖossible\n");

268 
	`¥ötf
("Éxpense of moreÖackets being sent.\n");

269 
	`¥ötf
(" --pretty :Örint formatted outputÑatherÅhan minimised output when usingÅhe\n");

270 
	`¥ötf
(" JSON output format option.\n");

271 
	`¥ötf
(" --quiet : don'tÖrintÉrror messages.\n");

272 
	`¥ötf
(" --random-filter : onlyÖrintáÖercentage ofÑeceived messages. SetÅo 100Åo haveáll\n");

273 
	`¥ötf
(" messagesÖrinted, 50.0Åo have half ofÅhe messagesÑeceived onáverage\n");

274 
	`¥ötf
("Örinted,ánd so on.\n");

275 
	`¥ötf
(" --retained-only : only handle messages withÅheÑetained flag set,ándÉxit whenÅhe\n");

276 
	`¥ötf
(" firstÇon-retained message isÑeceived.\n");

277 
	`¥ötf
(" --remove-retained : sendá messageÅoÅhe serverÅo clearányÑeceivedÑetained messages\n");

278 
	`¥ötf
(" Use -TÅo filter out messages you doÇot wantÅo be cleared.\n");

279 
	`¥ötf
(" --unix : connectÅoá brokerÅhroughá unix domain socket instead ofá TCP socket,\n");

280 
	`¥ötf
("É.g. /tmp/mosquitto.sock\n");

281 
	`¥ötf
(" --will-payload :Öayload forÅhe client Will, which is sent byÅhe broker in case of\n");

282 
	`¥ötf
(" unexpected disconnection. IfÇot givenánd will-topic is set,á zero\n");

283 
	`¥ötf
("Üength message will be sent.\n");

284 
	`¥ötf
(" --will-qos : QoSÜevel forÅhe client Will.\n");

285 
	`¥ötf
(" --will-retain : if given, makeÅhe client WillÑetained.\n");

286 
	`¥ötf
(" --will-topic :ÅheÅopic on whichÅoÖublishÅhe client Will.\n");

287 #ifde‡
WITH_TLS


288 
	`¥ötf
(" --cafile :ÖathÅoá file containingÅrusted CA certificatesÅoÉnableÉncrypted\n");

289 
	`¥ötf
(" certificate based communication.\n");

290 
	`¥ötf
(" --capath :ÖathÅoá directory containingÅrusted CA certificatesÅoÉnableÉncrypted\n");

291 
	`¥ötf
(" communication.\n");

292 
	`¥ötf
(" --cert : client certificate foráuthentication, ifÑequired by server.\n");

293 
	`¥ötf
(" --key : clientÖrivate key foráuthentication, ifÑequired by server.\n");

294 
	`¥ötf
(" --keyform : keyfileÅype, can beÉither \"pem\" or \"engine\".\n");

295 
	`¥ötf
(" --ciphers : openssl compatibleÜist of TLS ciphersÅo support.\n");

296 
	`¥ötf
(" --tls-version : TLSÖrotocol version, can be one ofÅlsv1.3Ålsv1.2 orÅlsv1.1.\n");

297 
	`¥ötf
(" DefaultsÅoÅlsv1.2 ifávailable.\n");

298 
	`¥ötf
(" --insecure : doÇot checkÅhatÅhe server certificate hostname matchesÅheÑemote\n");

299 
	`¥ötf
(" hostname. UsingÅhis option meansÅhat you cannot be sureÅhatÅhe\n");

300 
	`¥ötf
("Ñemote host isÅhe server you wishÅo connectÅoánd so is insecure.\n");

301 
	`¥ötf
(" DoÇot useÅhis option ináÖroductionÉnvironment.\n");

302 
	`¥ötf
(" --tls-engine : If set,ÉnablesÅhe use ofá SSLÉngine device.\n");

303 
	`¥ötf
(" --tls-engine-kpass-sha1 : SHA1 ofÅhe keyÖasswordÅo be used withÅhe selected SSLÉngine.\n");

304 
	`¥ötf
(" --tls-use-os-certs : LoadándÅrust OSÖrovided CA certificates.\n");

305 #ifde‡
FINAL_WITH_TLS_PSK


306 
	`¥ötf
(" --psk :Öre-shared-key in hexadecimal (noÜeading 0x)ÅoÉnable TLS-PSK mode.\n");

307 
	`¥ötf
(" --psk-identity : client identity string for TLS-PSK mode.\n");

310 #ifde‡
WITH_SOCKS


311 
	`¥ötf
(" --proxy : SOCKS5Öroxy URL ofÅhe form:\n");

312 
	`¥ötf
(" socks5h://[username[:password]@]hostname[:port]\n");

313 
	`¥ötf
(" Only \"none\"ánd \"username\"áuthentication is supported.\n");

315 
	`¥ötf
("\nSee https://mosquitto.org/ for more information.\n\n");

316 
	}
}

318 
	$maö
(
¨gc
, *
¨gv
[])

320 
rc
;

321 #i‚de‡
WIN32


322 
siga˘i⁄
 
siga˘
;

325 
	`mosquôto_lib_öô
();

327 
	`ouçut_öô
();

329 
rc
 = 
	`˛õ¡_c⁄fig_lﬂd
(&
cfg
, 
CLIENT_SUB
, 
¨gc
, 
¨gv
);

330 if(
rc
){

331 if(
rc
 == 2){

333 
	`¥öt_ußge
();

334 }if(
rc
 == 3){

336 
	`¥öt_vîsi⁄
();

338 
	`Ârötf
(
°dîr
, "\nUse 'mosquitto_sub --help'Åo see usage.\n");

340 
˛ónup
;

343 if(
cfg
.
no_ªèö
 && cfg.
ªèöed_⁄ly
){

344 
	`Ârötf
(
°dîr
, "\nError: Combining '-R'ánd '--retained-only' makesÇo sense.\n");

345 
˛ónup
;

348 if(
	`˛õ¡_id_gíî©e
(&
cfg
)){

349 
˛ónup
;

352 
g_mosq
 = 
	`mosquôto_√w
(
cfg
.
id
, cfg.
˛ón_£ssi⁄
, &cfg);

353 if(!
g_mosq
){

354 
î∫o
){

355 
ENOMEM
:

356 
	`îr_¥ötf
(&
cfg
, "Error: Out of memory.\n");

358 
EINVAL
:

359 
	`îr_¥ötf
(&
cfg
, "Error: Invalid idánd/or clean_session.\n");

362 
˛ónup
;

364 if(
	`˛õ¡_›ts_£t
(
g_mosq
, &
cfg
)){

365 
˛ónup
;

367 if(
cfg
.
debug
){

368 
	`mosquôto_log_ˇŒback_£t
(
g_mosq
, 
my_log_ˇŒback
);

370 
	`mosquôto_subs¸ibe_ˇŒback_£t
(
g_mosq
, 
my_subs¸ibe_ˇŒback
);

371 
	`mosquôto_c⁄√˘_v5_ˇŒback_£t
(
g_mosq
, 
my_c⁄√˘_ˇŒback
);

372 
	`mosquôto_mesßge_v5_ˇŒback_£t
(
g_mosq
, 
my_mesßge_ˇŒback
);

374 
rc
 = 
	`˛õ¡_c⁄√˘
(
g_mosq
, &
cfg
);

375 if(
rc
){

376 
˛ónup
;

379 #i‚de‡
WIN32


380 
siga˘
.
ß_h™dÀr
 = 
my_sig«l_h™dÀr
;

381 
	`sigem±y£t
(&
siga˘
.
ß_mask
);

382 
siga˘
.
ß_Êags
 = 0;

384 if(
	`siga˘i⁄
(
SIGALRM
, &
siga˘
, 
NULL
) == -1){

385 
	`≥º‹
("sigaction");

386 
˛ónup
;

389 if(
	`siga˘i⁄
(
SIGTERM
, &
siga˘
, 
NULL
) == -1){

390 
	`≥º‹
("sigaction");

391 
˛ónup
;

394 if(
	`siga˘i⁄
(
SIGINT
, &
siga˘
, 
NULL
) == -1){

395 
	`≥º‹
("sigaction");

396 
˛ónup
;

399 if(
cfg
.
timeout
){

400 
	`Æ¨m
(
cfg
.
timeout
);

404 
rc
 = 
	`mosquôto_lo›_f‹evî
(
g_mosq
, -1, 1);

406 
	`mosquôto_de°roy
(
g_mosq
);

407 
	`mosquôto_lib_˛ónup
();

409 if(
cfg
.
msg_cou¡
>0 && 
rc
 =
MOSQ_ERR_NO_CONN
){

410 
rc
 = 0;

412 
	`˛õ¡_c⁄fig_˛ónup
(&
cfg
);

413 if(
timed_out
){

414 
	`îr_¥ötf
(&
cfg
, "Timed out\n");

415  
MOSQ_ERR_TIMEOUT
;

416 }if(
rc
){

417 
	`îr_¥ötf
(&
cfg
, "Eº‹: %s\n", 
	`mosquôto_°ªº‹
(
rc
));

419 if(
c⁄«ck_ªsu…
){

420  
c⁄«ck_ªsu…
;

422  
rc
;

425 
˛ónup
:

426 
	`mosquôto_de°roy
(
g_mosq
);

427 
	`mosquôto_lib_˛ónup
();

428 
	`˛õ¡_c⁄fig_˛ónup
(&
cfg
);

430 
	}
}

	@sub_client_output.c

19 
	~"c⁄fig.h
"

21 #ifde‡
WIN32


23 
	#_CRT_RAND_S


	)

24 
	~<f˙é.h
>

25 
	~<io.h
>

28 
	~<as£π.h
>

29 
	~<î∫o.h
>

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

33 
	~<time.h
>

34 #i‚de‡
WIN32


35 
	~<uni°d.h
>

37 
	~<¥o˚ss.h
>

38 
	~<wösock2.h
>

39 
	#¢¥ötf
 
•rötf_s


	)

42 #ifde‡
WITH_CJSON


43 
	~<cjs⁄/cJSON.h
>

46 #ifde‡
__APPLE__


47 
	~<sys/time.h
>

50 
	~<mosquôto.h
>

51 
	~<mqâ_¥Ÿocﬁ.h
>

52 
	~"˛õ¡_sh¨ed.h
"

53 
	~"sub_˛õ¡_ouçut.h
"

55 
mosq_c⁄fig
 
cfg
;

57 
	$gë_time
(
tm
 **
ti
, *
ns
)

59 #ifde‡
WIN32


60 
SYSTEMTIME
 
°
;

61 #ñi‡
	`deföed
(
__APPLE__
)

62 
timevÆ
 
tv
;

64 
time•ec
 
ts
;

66 
time_t
 
s
;

68 #ifde‡
WIN32


69 
s
 = 
	`time
(
NULL
);

71 
	`GëLoˇlTime
(&
°
);

72 *
ns
 = 
°
.
wMûli£c⁄ds
*1000000L;

73 #ñi‡
	`deföed
(
__APPLE__
)

74 
	`gëtimeofday
(&
tv
, 
NULL
);

75 
s
 = 
tv
.
tv_£c
;

76 *
ns
 = 
tv
.
tv_u£c
*1000;

78 if(
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
ts
) != 0){

79 
	`îr_¥ötf
(&
cfg
, "Error obtaining systemÅime.\n");

82 
s
 = 
ts
.
tv_£c
;

83 *
ns
 = 
ts
.
tv_n£c
;

86 *
ti
 = 
	`loˇ…ime
(&
s
);

87 if(!(*
ti
)){

88 
	`îr_¥ötf
(&
cfg
, "Error obtaining systemÅime.\n");

93 
	}
}

96 
	$wrôe_∑ylﬂd
(c⁄° *
∑ylﬂd
, 
∑ylﬂdÀn
, 
hex
, 
Æign
, 
∑d
, 
fõld_width
, 
¥ecisi⁄
)

98 
i
;

99 
∑dÀn
;

101 
	`UNUSED
(
¥ecisi⁄
);

103 if(
fõld_width
 > 0){

104 if(
∑ylﬂdÀn
 > 
fõld_width
){

105 
∑ylﬂdÀn
 = 
fõld_width
;

107 if(
hex
 > 0){

108 
∑ylﬂdÀn
 /= 2;

109 
∑dÀn
 = 
fõld_width
 - 
∑ylﬂdÀn
*2;

111 
∑dÀn
 = 
fõld_width
 - 
∑ylﬂdÀn
;

114 
∑dÀn
 = 
fõld_width
 - 
∑ylﬂdÀn
;

117 if(
Æign
 != '-'){

118 
i
=0; i<
∑dÀn
; i++){

119 
	`putch¨
(
∑d
);

123 if(
hex
 == 0){

124 ()
	`fwrôe
(
∑ylﬂd
, 1, (
size_t
 )
∑ylﬂdÀn
, 
°dout
);

125 }if(
hex
 == 1){

126 
i
=0; i<
∑ylﬂdÀn
; i++){

127 
	`Ârötf
(
°dout
, "%02x", 
∑ylﬂd
[
i
]);

129 }if(
hex
 == 2){

130 
i
=0; i<
∑ylﬂdÀn
; i++){

131 
	`Ârötf
(
°dout
, "%02X", 
∑ylﬂd
[
i
]);

135 if(
Æign
 == '-'){

136 
	`¥ötf
("%*s", 
∑dÀn
, "");

138 
	}
}

141 #i‚de‡
WITH_CJSON


142 
	$wrôe_js⁄_∑ylﬂd
(c⁄° *
∑ylﬂd
, 
∑ylﬂdÀn
)

144 
i
;

146 
i
=0; i<
∑ylﬂdÀn
; i++){

147 if(
∑ylﬂd
[
i
] == '"' ||Öayload[i] == '\\' || (payload[i] >=0 &&Öayload[i] < 32)){

148 
	`¥ötf
("\\u%04x", 
∑ylﬂd
[
i
]);

150 
	`Âutc
(
∑ylﬂd
[
i
], 
°dout
);

153 
	}
}

157 #ifde‡
WITH_CJSON


158 
	$js⁄_¥öt_¥›îtõs
(
cJSON
 *
roŸ
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

160 
idítifõr
;

161 
uöt8_t
 
i8vÆue
 = 0;

162 
uöt16_t
 
i16vÆue
 = 0;

163 
uöt32_t
 
i32vÆue
 = 0;

164 *
°∫ame
 = 
NULL
, *
°rvÆue
 = NULL;

165 *
bövÆue
 = 
NULL
;

166 
cJSON
 *
tmp
, *
¥›_js⁄
, *
u£r_js⁄
 = 
NULL
;

167 c⁄° 
mosquôto_¥›îty
 *
¥›
 = 
NULL
;

169 
¥›_js⁄
 = 
	`cJSON_Cª©eObje˘
();

170 if(
¥›_js⁄
 =
NULL
){

171 
	`cJSON_Dñëe
(
¥›_js⁄
);

172  
MOSQ_ERR_NOMEM
;

174 
	`cJSON_AddIãmToObje˘
(
roŸ
, "¥›îtõs", 
¥›_js⁄
);

176 
¥›
=
¥›îtõs
;Ör› !
NULL
;Ör› = 
	`mosquôto_¥›îty_√xt
(prop)){

177 
tmp
 = 
NULL
;

178 
idítifõr
 = 
	`mosquôto_¥›îty_idítifõr
(
¥›
);

179 
idítifõr
){

180 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
:

181 
	`mosquôto_¥›îty_ªad_byã
(
¥›
, 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
, &
i8vÆue
, 
Ál£
);

182 
tmp
 = 
	`cJSON_Cª©eNumbî
(
i8vÆue
);

185 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
:

186 
	`mosquôto_¥›îty_ªad_öt32
(
¥›
, 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
, &
i32vÆue
, 
Ál£
);

187 
tmp
 = 
	`cJSON_Cª©eNumbî
(
i32vÆue
);

190 
MQTT_PROP_CONTENT_TYPE
:

191 
MQTT_PROP_RESPONSE_TOPIC
:

192 
	`mosquôto_¥›îty_ªad_°rög
(
¥›
, 
idítifõr
, &
°rvÆue
, 
Ál£
);

193 if(
°rvÆue
 =
NULL
Ë 
MOSQ_ERR_NOMEM
;

194 
tmp
 = 
	`cJSON_Cª©eSåög
(
°rvÆue
);

195 
	`‰ì
(
°rvÆue
);

196 
°rvÆue
 = 
NULL
;

199 
MQTT_PROP_CORRELATION_DATA
:

200 
	`mosquôto_¥›îty_ªad_bö¨y
(
¥›
, 
MQTT_PROP_CORRELATION_DATA
, (**)&
bövÆue
, &
i16vÆue
, 
Ál£
);

201 if(
bövÆue
 =
NULL
Ë 
MOSQ_ERR_NOMEM
;

202 
tmp
 = 
	`cJSON_Cª©eSåög
(
bövÆue
);

203 
	`‰ì
(
bövÆue
);

204 
bövÆue
 = 
NULL
;

207 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
:

208 
	`mosquôto_¥›îty_ªad_v¨öt
(
¥›
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, &
i32vÆue
, 
Ál£
);

209 
tmp
 = 
	`cJSON_Cª©eNumbî
(
i32vÆue
);

212 
MQTT_PROP_TOPIC_ALIAS
:

213 
	`mosquôto_¥›îty_ªad_öt16
(
¥›
, 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
, &
i16vÆue
, 
Ál£
);

214 
tmp
 = 
	`cJSON_Cª©eNumbî
(
i16vÆue
);

217 
MQTT_PROP_USER_PROPERTY
:

218 if(
u£r_js⁄
 =
NULL
){

219 
u£r_js⁄
 = 
	`cJSON_Cª©eObje˘
();

220 if(
u£r_js⁄
 =
NULL
){

221  
MOSQ_ERR_NOMEM
;

223 
	`cJSON_AddIãmToObje˘
(
¥›_js⁄
, "u£r-¥›îtõs", 
u£r_js⁄
);

225 
	`mosquôto_¥›îty_ªad_°rög_∑ú
(
¥›
, 
MQTT_PROP_USER_PROPERTY
, &
°∫ame
, &
°rvÆue
, 
Ál£
);

226 if(
°∫ame
 =
NULL
 || 
°rvÆue
 =NULLË 
MOSQ_ERR_NOMEM
;

228 
tmp
 = 
	`cJSON_Cª©eSåög
(
°rvÆue
);

229 
	`‰ì
(
°rvÆue
);

231 if(
tmp
 =
NULL
){

232 
	`‰ì
(
°∫ame
);

233  
MOSQ_ERR_NOMEM
;

235 
	`cJSON_AddIãmToObje˘
(
u£r_js⁄
, 
°∫ame
, 
tmp
);

236 
	`‰ì
(
°∫ame
);

237 
°∫ame
 = 
NULL
;

238 
°rvÆue
 = 
NULL
;

239 
tmp
 = 
NULL
;

242 if(
tmp
 !
NULL
){

243 
	`cJSON_AddIãmToObje˘
(
¥›_js⁄
, 
	`mosquôto_¥›îty_idítifõr_to_°rög
(
idítifõr
), 
tmp
);

246  
MOSQ_ERR_SUCCESS
;

247 
	}
}

251 
	$f‹m©_time_8601
(c⁄° 
tm
 *
ti
, 
ns
, *
buf
, 
size_t
 
Àn
)

253 
c
;

255 
	`°r·ime
(
buf
, 
Àn
, "%Y-%m-%dT%H:%M:%S.000000%z", 
ti
);

256 
c
 = 
buf
[
	`°æí
("2020-05-06T21:48:00.000000")];

257 
	`¢¥ötf
(&
buf
[
	`°æí
("2020-05-06T21:48:00.")], 9, "%06d", 
ns
/1000);

258 
buf
[
	`°æí
("2020-05-06T21:48:00.000000")] = 
c
;

259 
	}
}

261 
	$js⁄_¥öt
(c⁄° 
mosquôto_mesßge
 *
mesßge
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
, c⁄° 
tm
 *
ti
, 
ns
, 
boﬁ
 
esˇ≥d
, boﬁ 
¥ëty
)

263 
buf
[100];

264 #ifde‡
WITH_CJSON


265 
cJSON
 *
roŸ
;

266 
cJSON
 *
tmp
;

267 *
js⁄_°r
;

268 c⁄° *
ªtu∫_∑r£_íd
;

270 
roŸ
 = 
	`cJSON_Cª©eObje˘
();

271 if(
roŸ
 =
NULL
){

272  
MOSQ_ERR_NOMEM
;

275 
	`f‹m©_time_8601
(
ti
, 
ns
, 
buf
, (buf));

277 
tmp
 = 
	`cJSON_Cª©eSåögRe„ªn˚
(
buf
);

278 if(
tmp
 =
NULL
){

279 
	`cJSON_Dñëe
(
roŸ
);

280  
MOSQ_ERR_NOMEM
;

282 
	`cJSON_AddIãmToObje˘
(
roŸ
, "t°", 
tmp
);

284 
tmp
 = 
	`cJSON_Cª©eSåög
(
mesßge
->
t›ic
);

285 if(
tmp
 =
NULL
){

286 
	`cJSON_Dñëe
(
roŸ
);

287  
MOSQ_ERR_NOMEM
;

290 
	`cJSON_AddIãmToObje˘
(
roŸ
, "t›ic", 
tmp
);

292 
tmp
 = 
	`cJSON_Cª©eNumbî
(
mesßge
->
qos
);

293 if(
tmp
 =
NULL
){

294 
	`cJSON_Dñëe
(
roŸ
);

295  
MOSQ_ERR_NOMEM
;

297 
	`cJSON_AddIãmToObje˘
(
roŸ
, "qos", 
tmp
);

299 
tmp
 = 
	`cJSON_Cª©eNumbî
(
mesßge
->
ªèö
);

300 if(
tmp
 =
NULL
){

301 
	`cJSON_Dñëe
(
roŸ
);

302  
MOSQ_ERR_NOMEM
;

304 
	`cJSON_AddIãmToObje˘
(
roŸ
, "ªèö", 
tmp
);

306 
tmp
 = 
	`cJSON_Cª©eNumbî
(
mesßge
->
∑ylﬂdÀn
);

307 if(
tmp
 =
NULL
){

308 
	`cJSON_Dñëe
(
roŸ
);

309  
MOSQ_ERR_NOMEM
;

311 
	`cJSON_AddIãmToObje˘
(
roŸ
, "∑ylﬂdÀn", 
tmp
);

313 if(
mesßge
->
qos
 > 0){

314 
tmp
 = 
	`cJSON_Cª©eNumbî
(
mesßge
->
mid
);

315 if(
tmp
 =
NULL
){

316 
	`cJSON_Dñëe
(
roŸ
);

317  
MOSQ_ERR_NOMEM
;

319 
	`cJSON_AddIãmToObje˘
(
roŸ
, "mid", 
tmp
);

323 if(
¥›îtõs
){

324 if(
	`js⁄_¥öt_¥›îtõs
(
roŸ
, 
¥›îtõs
)){

325 
	`cJSON_Dñëe
(
roŸ
);

326  
MOSQ_ERR_NOMEM
;

331 if(
esˇ≥d
){

332 if(
mesßge
->
∑ylﬂd
){

333 
tmp
 = 
	`cJSON_Cª©eSåög
(
mesßge
->
∑ylﬂd
);

335 
tmp
 = 
	`cJSON_Cª©eNuŒ
();

337 if(
tmp
 =
NULL
){

338 
	`cJSON_Dñëe
(
roŸ
);

339  
MOSQ_ERR_NOMEM
;

341 
	`cJSON_AddIãmToObje˘
(
roŸ
, "∑ylﬂd", 
tmp
);

343 
ªtu∫_∑r£_íd
 = 
NULL
;

344 if(
mesßge
->
∑ylﬂd
){

345 
tmp
 = 
	`cJSON_P¨£WôhO±s
(
mesßge
->
∑ylﬂd
, &
ªtu∫_∑r£_íd
, 
åue
);

346 if(
tmp
 =
NULL
 || 
ªtu∫_∑r£_íd
 !(*)
mesßge
->
∑ylﬂd
 + mesßge->
∑ylﬂdÀn
){

347 
	`cJSON_Dñëe
(
roŸ
);

348  
MOSQ_ERR_INVAL
;

351 
tmp
 = 
	`cJSON_Cª©eNuŒ
();

352 if(
tmp
 =
NULL
){

353 
	`cJSON_Dñëe
(
roŸ
);

354  
MOSQ_ERR_INVAL
;

357 
	`cJSON_AddIãmToObje˘
(
roŸ
, "∑ylﬂd", 
tmp
);

360 if(
¥ëty
){

361 
js⁄_°r
 = 
	`cJSON_Pröt
(
roŸ
);

363 
js⁄_°r
 = 
	`cJSON_PrötUnf‹m©ãd
(
roŸ
);

365 
	`cJSON_Dñëe
(
roŸ
);

366 if(
js⁄_°r
 =
NULL
){

367  
MOSQ_ERR_NOMEM
;

370 
	`Âuts
(
js⁄_°r
, 
°dout
);

371 
	`‰ì
(
js⁄_°r
);

373  
MOSQ_ERR_SUCCESS
;

375 
	`UNUSED
(
¥›îtõs
);

376 
	`UNUSED
(
¥ëty
);

378 
	`f‹m©_time_8601
(
ti
, 
ns
, 
buf
, (buf));

380 
	`¥ötf
("{\"t°\":\"%s\",\"t›ic\":\"%s\",\"qos\":%d,\"ªèö\":%d,\"∑ylﬂdÀn\":%d,", 
buf
, 
mesßge
->
t›ic
, mesßge->
qos
, mesßge->
ªèö
, mesßge->
∑ylﬂdÀn
);

381 if(
mesßge
->
qos
 > 0){

382 
	`¥ötf
("\"mid\":%d,", 
mesßge
->
mid
);

384 if(
esˇ≥d
){

385 
	`Âuts
("\"∑ylﬂd\":\"", 
°dout
);

386 
	`wrôe_js⁄_∑ylﬂd
(
mesßge
->
∑ylﬂd
, mesßge->
∑ylﬂdÀn
);

387 
	`Âuts
("\"}", 
°dout
);

389 
	`Âuts
("\"∑ylﬂd\":", 
°dout
);

390 
	`wrôe_∑ylﬂd
(
mesßge
->
∑ylﬂd
, mesßge->
∑ylﬂdÀn
, 0, 0, 0, 0, 0);

391 
	`Âuts
("}", 
°dout
);

394  
MOSQ_ERR_SUCCESS
;

396 
	}
}

399 
	$f‹m©ãd_¥öt_bœnk
(
∑d
, 
fõld_width
)

401 
i
;

402 
i
=0; i<
fõld_width
; i++){

403 
	`putch¨
(
∑d
);

405 
	}
}

408 
	$f‹m©ãd_¥öt_öt
(
vÆue
, 
Æign
, 
∑d
, 
fõld_width
)

410 if(
fõld_width
 == 0){

411 
	`¥ötf
("%d", 
vÆue
);

413 if(
Æign
 == '-'){

414 
	`¥ötf
("%-*d", 
fõld_width
, 
vÆue
);

416 if(
∑d
 == '0'){

417 
	`¥ötf
("%0*d", 
fõld_width
, 
vÆue
);

419 
	`¥ötf
("%*d", 
fõld_width
, 
vÆue
);

423 
	}
}

426 
	$f‹m©ãd_¥öt_°r
(c⁄° *
vÆue
, 
Æign
, 
fõld_width
, 
¥ecisi⁄
)

428 if(
fõld_width
 =0 && 
¥ecisi⁄
 == -1){

429 
	`Âuts
(
vÆue
, 
°dout
);

431 if(
¥ecisi⁄
 == -1){

432 if(
Æign
 == '-'){

433 
	`¥ötf
("%-*s", 
fõld_width
, 
vÆue
);

435 
	`¥ötf
("%*s", 
fõld_width
, 
vÆue
);

437 }if(
fõld_width
 == 0){

438 if(
Æign
 == '-'){

439 
	`¥ötf
("%-.*s", 
¥ecisi⁄
, 
vÆue
);

441 
	`¥ötf
("%.*s", 
¥ecisi⁄
, 
vÆue
);

444 if(
Æign
 == '-'){

445 
	`¥ötf
("%-*.*s", 
fõld_width
, 
¥ecisi⁄
, 
vÆue
);

447 
	`¥ötf
("%*.*s", 
fõld_width
, 
¥ecisi⁄
, 
vÆue
);

451 
	}
}

453 
	$f‹m©ãd_¥öt_≥r˚¡
(c⁄° 
mosq_c⁄fig
 *
lcfg
, c⁄° 
mosquôto_mesßge
 *
mesßge
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
, 
f‹m©
, 
Æign
, 
∑d
, 
fõld_width
, 
¥ecisi⁄
)

455 
tm
 *
ti
 = 
NULL
;

456 
ns
 = 0;

457 
buf
[100];

458 
rc
;

459 
uöt8_t
 
i8vÆue
;

460 
uöt16_t
 
i16vÆue
;

461 
uöt32_t
 
i32vÆue
;

462 *
bövÆue
 = 
NULL
, *
°∫ame
, *
°rvÆue
;

463 c⁄° 
mosquôto_¥›îty
 *
¥›
;

466 
f‹m©
){

468 
	`Âutc
('%', 
°dout
);

472 if(
	`mosquôto_¥›îty_ªad_öt16
(
¥›îtõs
, 
MQTT_PROP_TOPIC_ALIAS
, &
i16vÆue
, 
Ál£
)){

473 
	`f‹m©ãd_¥öt_öt
(
i16vÆue
, 
Æign
, 
∑d
, 
fõld_width
);

475 
	`f‹m©ãd_¥öt_bœnk
(
∑d
, 
fõld_width
);

480 if(
	`mosquôto_¥›îty_ªad_°rög
(
¥›îtõs
, 
MQTT_PROP_CONTENT_TYPE
, &
°rvÆue
, 
Ál£
)){

481 
	`f‹m©ãd_¥öt_°r
(
°rvÆue
, 
Æign
, 
fõld_width
, 
¥ecisi⁄
);

482 
	`‰ì
(
°rvÆue
);

484 
	`f‹m©ãd_¥öt_bœnk
(' ', 
fõld_width
);

489 if(
	`mosquôto_¥›îty_ªad_bö¨y
(
¥›îtõs
, 
MQTT_PROP_CORRELATION_DATA
, (**)&
bövÆue
, &
i16vÆue
, 
Ál£
)){

490 
	`fwrôe
(
bövÆue
, 1, 
i16vÆue
, 
°dout
);

491 
	`‰ì
(
bövÆue
);

496 if(
	`mosquôto_¥›îty_ªad_öt32
(
¥›îtõs
, 
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL
, &
i32vÆue
, 
Ál£
)){

497 
	`f‹m©ãd_¥öt_öt
(()
i32vÆue
, 
Æign
, 
∑d
, 
fõld_width
);

499 
	`f‹m©ãd_¥öt_bœnk
(
∑d
, 
fõld_width
);

504 if(
	`mosquôto_¥›îty_ªad_byã
(
¥›îtõs
, 
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR
, &
i8vÆue
, 
Ál£
)){

505 
	`f‹m©ãd_¥öt_öt
(
i8vÆue
, 
Æign
, 
∑d
, 
fõld_width
);

507 
	`f‹m©ãd_¥öt_bœnk
(
∑d
, 
fõld_width
);

512 if(!
ti
){

513 if(
	`gë_time
(&
ti
, &
ns
)){

514 
	`îr_¥ötf
(
lcfg
, "Error obtaining systemÅime.\n");

518 if(
	`°r·ime
(
buf
, 100, "%FT%T%z", 
ti
) != 0){

519 
	`f‹m©ãd_¥öt_°r
(
buf
, 
Æign
, 
fõld_width
, 
¥ecisi⁄
);

521 
	`f‹m©ãd_¥öt_bœnk
(' ', 
fõld_width
);

526 if(!
ti
){

527 if(
	`gë_time
(&
ti
, &
ns
)){

528 
	`îr_¥ötf
(
lcfg
, "Error obtaining systemÅime.\n");

532 if(
	`js⁄_¥öt
(
mesßge
, 
¥›îtõs
, 
ti
, ()
ns
, 
åue
, 
lcfg
->
¥ëty
Ë!
MOSQ_ERR_SUCCESS
){

533 
	`îr_¥ötf
(
lcfg
, "Error: Out of memory.\n");

539 if(!
ti
){

540 if(
	`gë_time
(&
ti
, &
ns
)){

541 
	`îr_¥ötf
(
lcfg
, "Error obtaining systemÅime.\n");

545 
rc
 = 
	`js⁄_¥öt
(
mesßge
, 
¥›îtõs
, 
ti
, ()
ns
, 
Ál£
, 
lcfg
->
¥ëty
);

546 if(
rc
 =
MOSQ_ERR_NOMEM
){

547 
	`îr_¥ötf
(
lcfg
, "Error: Out of memory.\n");

549 }if(
rc
 =
MOSQ_ERR_INVAL
){

550 
	`îr_¥ötf
(
lcfg
, "Eº‹: Mesßgê∑ylﬂd i†nŸ vÆid JSON o¿t›i¯%s.\n", 
mesßge
->
t›ic
);

556 
	`f‹m©ãd_¥öt_öt
(
mesßge
->
∑ylﬂdÀn
, 
Æign
, 
∑d
, 
fõld_width
);

560 
	`f‹m©ãd_¥öt_öt
(
mesßge
->
mid
, 
Æign
, 
∑d
, 
fõld_width
);

564 
°∫ame
 = 
NULL
;

565 
°rvÆue
 = 
NULL
;

566 
¥›
 = 
	`mosquôto_¥›îty_ªad_°rög_∑ú
(
¥›îtõs
, 
MQTT_PROP_USER_PROPERTY
, &
°∫ame
, &
°rvÆue
, 
Ál£
);

567 
¥›
){

568 
	`¥ötf
("%s:%s", 
°∫ame
, 
°rvÆue
);

569 
	`‰ì
(
°∫ame
);

570 
	`‰ì
(
°rvÆue
);

571 
°∫ame
 = 
NULL
;

572 
°rvÆue
 = 
NULL
;

574 
¥›
 = 
	`mosquôto_¥›îty_ªad_°rög_∑ú
’r›, 
MQTT_PROP_USER_PROPERTY
, &
°∫ame
, &
°rvÆue
, 
åue
);

575 if(
¥›
){

576 
	`Âutc
(' ', 
°dout
);

579 
	`‰ì
(
°∫ame
);

580 
	`‰ì
(
°rvÆue
);

584 
	`wrôe_∑ylﬂd
(
mesßge
->
∑ylﬂd
, mesßge->
∑ylﬂdÀn
, 0, 
Æign
, 
∑d
, 
fõld_width
, 
¥ecisi⁄
);

588 
	`Âutc
(
mesßge
->
qos
 + 48, 
°dout
);

592 if(
	`mosquôto_¥›îty_ªad_°rög
(
¥›îtõs
, 
MQTT_PROP_RESPONSE_TOPIC
, &
°rvÆue
, 
Ál£
)){

593 
	`f‹m©ãd_¥öt_°r
(
°rvÆue
, 
Æign
, 
fõld_width
, 
¥ecisi⁄
);

594 
	`‰ì
(
°rvÆue
);

599 if(
mesßge
->
ªèö
){

600 
	`Âutc
('1', 
°dout
);

602 
	`Âutc
('0', 
°dout
);

607 if(
	`mosquôto_¥›îty_ªad_v¨öt
(
¥›îtõs
, 
MQTT_PROP_SUBSCRIPTION_IDENTIFIER
, &
i32vÆue
, 
Ál£
)){

608 
	`f‹m©ãd_¥öt_öt
(()
i32vÆue
, 
Æign
, 
∑d
, 
fõld_width
);

610 
	`f‹m©ãd_¥öt_bœnk
(
∑d
, 
fõld_width
);

615 
	`f‹m©ãd_¥öt_°r
(
mesßge
->
t›ic
, 
Æign
, 
fõld_width
, 
¥ecisi⁄
);

619 if(!
ti
){

620 if(
	`gë_time
(&
ti
, &
ns
)){

621 
	`îr_¥ötf
(
lcfg
, "Error obtaining systemÅime.\n");

625 if(
	`°r·ime
(
buf
, 100, "%s", 
ti
) != 0){

626 
	`¥ötf
("%s.%09ld", 
buf
, 
ns
);

631 
	`wrôe_∑ylﬂd
(
mesßge
->
∑ylﬂd
, mesßge->
∑ylﬂdÀn
, 1, 
Æign
, 
∑d
, 
fõld_width
, 
¥ecisi⁄
);

635 
	`wrôe_∑ylﬂd
(
mesßge
->
∑ylﬂd
, mesßge->
∑ylﬂdÀn
, 2, 
Æign
, 
∑d
, 
fõld_width
, 
¥ecisi⁄
);

638 
	}
}

641 
	$f‹m©ãd_¥öt
(c⁄° 
mosq_c⁄fig
 *
lcfg
, c⁄° 
mosquôto_mesßge
 *
mesßge
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

643 
size_t
 
Àn
;

644 
size_t
 
i
;

645 
tm
 *
ti
 = 
NULL
;

646 
ns
 = 0;

647 
°rf
[3] = {0, 0 ,0};

648 
buf
[100];

649 
Æign
, 
∑d
;

650 
fõld_width
, 
¥ecisi⁄
;

652 
Àn
 = 
	`°æí
(
lcfg
->
f‹m©
);

654 
i
=0; i<
Àn
; i++){

655 if(
lcfg
->
f‹m©
[
i
] == '%'){

656 
Æign
 = 0;

657 
∑d
 = ' ';

658 
fõld_width
 = 0;

659 
¥ecisi⁄
 = -1;

660 if(
i
 < 
Àn
-1){

661 
i
++;

663 if(
lcfg
->
f‹m©
[
i
] == '-'){

664 
Æign
 = 
lcfg
->
f‹m©
[
i
];

665 if(
i
 < 
Àn
-1){

666 
i
++;

672 if(
lcfg
->
f‹m©
[
i
] == '0'){

673 
∑d
 = '0';

674 if(
i
 < 
Àn
-1){

675 
i
++;

679 
i
 < 
Àn
-1 && 
lcfg
->
f‹m©
[i] >= '0' &&Ücfg->format[i] <= '9'){

680 
fõld_width
 *= 10;

681 
fõld_width
 +
lcfg
->
f‹m©
[
i
]-'0';

682 
i
++;

685 if(
lcfg
->
f‹m©
[
i
] == '.'){

686 if(
i
 < 
Àn
-1){

687 
i
++;

688 
¥ecisi⁄
 = 0;

689 
i
 < 
Àn
-1 && 
lcfg
->
f‹m©
[i] >= '0' &&Ücfg->format[i] <= '9'){

690 
¥ecisi⁄
 *= 10;

691 
¥ecisi⁄
 +
lcfg
->
f‹m©
[
i
]-'0';

692 
i
++;

697 if(
i
 < 
Àn
){

698 
	`f‹m©ãd_¥öt_≥r˚¡
(
lcfg
, 
mesßge
, 
¥›îtõs
,Ücfg->
f‹m©
[
i
], 
Æign
, 
∑d
, 
fõld_width
, 
¥ecisi⁄
);

701 }if(
lcfg
->
f‹m©
[
i
] == '@'){

702 if(
i
 < 
Àn
-1){

703 
i
++;

704 if(
lcfg
->
f‹m©
[
i
] == '@'){

705 
	`Âutc
('@', 
°dout
);

707 if(!
ti
){

708 if(
	`gë_time
(&
ti
, &
ns
)){

709 
	`îr_¥ötf
(
lcfg
, "Error obtaining systemÅime.\n");

714 
°rf
[0] = '%';

715 
°rf
[1] = 
lcfg
->
f‹m©
[
i
];

716 
°rf
[2] = 0;

718 if(
lcfg
->
f‹m©
[
i
] == 'N'){

719 
	`¥ötf
("%09ld", 
ns
);

721 if(
	`°r·ime
(
buf
, 100, 
°rf
, 
ti
) != 0){

722 
	`Âuts
(
buf
, 
°dout
);

727 }if(
lcfg
->
f‹m©
[
i
] == '\\'){

728 if(
i
 < 
Àn
-1){

729 
i
++;

730 
lcfg
->
f‹m©
[
i
]){

732 
	`Âutc
('\\', 
°dout
);

736 
	`Âutc
('\0', 
°dout
);

740 
	`Âutc
('\a', 
°dout
);

744 
	`Âutc
('\033', 
°dout
);

748 
	`Âutc
('\n', 
°dout
);

752 
	`Âutc
('\r', 
°dout
);

756 
	`Âutc
('\t', 
°dout
);

760 
	`Âutc
('\v', 
°dout
);

765 
	`Âutc
(
lcfg
->
f‹m©
[
i
], 
°dout
);

768 if(
lcfg
->
eﬁ
){

769 
	`Âutc
('\n', 
°dout
);

771 
	`fÊush
(
°dout
);

772 
	}
}

775 
	$ouçut_öô
()

777 #i‚de‡
WIN32


778 
tm
 *
ti
 = 
NULL
;

779 
ns
;

781 if(!
	`gë_time
(&
ti
, &
ns
)){

782 
	`§™dom
(()
ns
);

786 
	`_£tmode
(
	`_fûío
(
°dout
), 
_O_BINARY
);

788 
	}
}

791 
	$¥öt_mesßge
(
mosq_c⁄fig
 *
lcfg
, c⁄° 
mosquôto_mesßge
 *
mesßge
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
)

795 
time•ec
 
ç
;

796 if(
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ç
))

798 
	`≥º‹
("client/sub_client_output.c:Örint_message");

799 
	`exô
(
EXIT_FAILURE
);

801 
	`Ârötf
(
°dîr
, "%ld \n", 
ç
.
tv_£c
*1000000+ç.
tv_n£c
/1000);

809 #ifde‡
WIN32


810 
r
 = 0;

812 
r
 = 0;

815 if(
lcfg
->
øndom_fûãr
 < 10000){

816 #ifde‡
WIN32


817 
	`ønd_s
(&
r
);

819 
r
 = 
	`øndom
();

821 if(()(
r
%10000Ë>
lcfg
->
øndom_fûãr
){

825 if(
lcfg
->
f‹m©
){

826 
	`f‹m©ãd_¥öt
(
lcfg
, 
mesßge
, 
¥›îtõs
);

827 }if(
lcfg
->
vîbo£
){

828 if(
mesßge
->
∑ylﬂdÀn
){

829 
	`¥ötf
("%†", 
mesßge
->
t›ic
);

830 
	`wrôe_∑ylﬂd
(
mesßge
->
∑ylﬂd
, mesßge->
∑ylﬂdÀn
, 
Ál£
, 0, 0, 0, 0);

831 if(
lcfg
->
eﬁ
){

832 
	`¥ötf
("\n");

835 if(
lcfg
->
eﬁ
){

836 
	`¥ötf
("%†“uŒ)\n", 
mesßge
->
t›ic
);

839 
	`fÊush
(
°dout
);

841 if(
mesßge
->
∑ylﬂdÀn
){

842 
	`wrôe_∑ylﬂd
(
mesßge
->
∑ylﬂd
, mesßge->
∑ylﬂdÀn
, 
Ál£
, 0, 0, 0, 0);

843 if(
lcfg
->
eﬁ
){

844 
	`¥ötf
("\n");

846 
	`fÊush
(
°dout
);

849 
	}
}

	@sub_client_output.h

19 #i‚de‡
SUB_CLIENT_OUTPUT_H


20 
	#SUB_CLIENT_OUTPUT_H


	)

22 
	~"mosquôto.h
"

23 
	~"˛õ¡_sh¨ed.h
"

25 
ouçut_öô
();

26 
¥öt_mesßge
(
mosq_c⁄fig
 *
cfg
, c⁄° 
mosquôto_mesßge
 *
mesßge
, c⁄° 
mosquôto_¥›îty
 *
¥›îtõs
);

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


91 #i‡
deföed
 
__˝lu•lus


92 
	#as£π
(
ex¥
) \

93 (
°©ic_ˇ°
 <
boﬁ
> (
ex¥
) \

95 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ñi‡!
deföed
 
__GNUC__
 || deföed 
__STRICT_ANSI__


97 
	#as£π
(
ex¥
) \

98 ((
ex¥
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

107 
	#as£π
(
ex¥
) \

108 ((Ë ((
ex¥
Ë? 1 : 0), 
	`__exãnsi⁄__
 ({ \

109 i‡(
ex¥
) \

112 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
); \

113 
	}
}))

	)

116 #ifdef 
__USE_GNU


117 
	#as£π_≥º‹
(
î∫um
) \

118 (!(
î∫um
) \

119 ? 
	`__ASSERT_VOID_CAST
 (0) \

120 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

128 #i‡
deföed
 
__˝lu•lus
 ? 
__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

129 
	#__ASSERT_FUNCTION
 
__exãnsi⁄__
 
__PRETTY_FUNCTION__


	)

131 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

132 
	#__ASSERT_FUNCTION
 
__func__


	)

134 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

141 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


142 #unde‡
°©ic_as£π


143 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


23 
	#_ERRNO_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/î∫o.h
>

32 #i‚de‡
__ASSEMBLER__


34 
__BEGIN_DECLS


37 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
__©åibuã_c⁄°__
;

38 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

40 #ifde‡
__USE_GNU


45 *
¥ogøm_övoˇti⁄_«me
;

46 *
¥ogøm_övoˇti⁄_sh‹t_«me
;

48 
	~<bôs/ty≥s/îr‹_t.h
>

52 
__END_DECLS


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #ifde‡
__USE_XOPEN2K8


75 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 
	~<bôs/°©.h
>

80 
	#S_IFMT
 
__S_IFMT


	)

81 
	#S_IFDIR
 
__S_IFDIR


	)

82 
	#S_IFCHR
 
__S_IFCHR


	)

83 
	#S_IFBLK
 
__S_IFBLK


	)

84 
	#S_IFREG
 
__S_IFREG


	)

85 #ifde‡
__S_IFIFO


86 
	#S_IFIFO
 
__S_IFIFO


	)

88 #ifde‡
__S_IFLNK


89 
	#S_IFLNK
 
__S_IFLNK


	)

91 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


92 
	#S_IFSOCK
 
__S_IFSOCK


	)

97 
	#S_ISUID
 
__S_ISUID


	)

98 
	#S_ISGID
 
__S_ISGID


	)

100 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


102 
	#S_ISVTX
 
__S_ISVTX


	)

105 
	#S_IRUSR
 
__S_IREAD


	)

106 
	#S_IWUSR
 
__S_IWRITE


	)

107 
	#S_IXUSR
 
__S_IEXEC


	)

109 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

111 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

112 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

113 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

115 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

117 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

118 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

119 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

121 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

124 #ifdef 
__USE_MISC


125 #i‚de‡
R_OK


128 
	#R_OK
 4

	)

129 
	#W_OK
 2

	)

130 
	#X_OK
 1

	)

131 
	#F_OK
 0

	)

136 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


137 
	#SEEK_SET
 0

	)

138 
	#SEEK_CUR
 1

	)

139 
	#SEEK_END
 2

	)

147 #i‚de‡
__USE_FILE_OFFSET64


148 
f˙é
 (
__fd
, 
__cmd
, ...);

150 #ifde‡
__REDIRECT


151 
__REDIRECT
 (
f˙é
, (
__fd
, 
__cmd
, ...), 
f˙é64
);

153 
	#f˙é
 
f˙é64


	)

156 #ifde‡
__USE_LARGEFILE64


157 
f˙é64
 (
__fd
, 
__cmd
, ...);

167 #i‚de‡
__USE_FILE_OFFSET64


168 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

170 #ifde‡
__REDIRECT


171 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

172 
	`__n⁄nuŒ
 ((1));

174 
	#›í
 
›í64


	)

177 #ifde‡
__USE_LARGEFILE64


178 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

181 #ifde‡
__USE_ATFILE


191 #i‚de‡
__USE_FILE_OFFSET64


192 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

193 
	`__n⁄nuŒ
 ((2));

195 #ifde‡
__REDIRECT


196 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

197 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

199 
	#›í©
 
›í©64


	)

202 #ifde‡
__USE_LARGEFILE64


203 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

204 
	`__n⁄nuŒ
 ((2));

213 #i‚de‡
__USE_FILE_OFFSET64


214 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

216 #ifde‡
__REDIRECT


217 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

218 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

220 
	#¸ót
 
¸ót64


	)

223 #ifde‡
__USE_LARGEFILE64


224 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

227 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

228 && !
deföed
 
__USE_POSIX
))

237 
	#F_ULOCK
 0

	)

238 
	#F_LOCK
 1

	)

239 
	#F_TLOCK
 2

	)

240 
	#F_TEST
 3

	)

242 #i‚de‡
__USE_FILE_OFFSET64


243 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

245 #ifde‡
__REDIRECT


246 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

248 
	#lockf
 
lockf64


	)

251 #ifde‡
__USE_LARGEFILE64


252 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

256 #ifde‡
__USE_XOPEN2K


259 #i‚de‡
__USE_FILE_OFFSET64


260 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

261 
__advi£
Ë
__THROW
;

263 #ifde‡
__REDIRECT_NTH


264 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

265 
__off64_t
 
__Àn
, 
__advi£
),

266 
posix_Ádvi£64
);

268 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

271 #ifde‡
__USE_LARGEFILE64


272 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

273 
__advi£
Ë
__THROW
;

281 #i‚de‡
__USE_FILE_OFFSET64


282 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

284 #ifde‡
__REDIRECT


285 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

286 
__off64_t
 
__Àn
),

287 
posix_ÁŒoˇã64
);

289 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

292 #ifde‡
__USE_LARGEFILE64


293 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

299 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

300 && 
deföed
 
__va_¨g_∑ck_Àn


301 
	~<bôs/f˙é2.h
>

304 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


23 
	#_SIGNAL_H


	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

30 
	~<bôs/signum.h
>

32 
	~<bôs/ty≥s/sig_©omic_t.h
>

34 #i‡
deföed
 
__USE_POSIX


35 
	~<bôs/ty≥s/sig£t_t.h
>

38 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


39 #i‚de‡
__pid_t_deföed


40 
__pid_t
 
	tpid_t
;

41 
	#__pid_t_deföed


	)

43 #ifde‡
__USE_XOPEN


45 #i‚de‡
__uid_t_deföed


46 
__uid_t
 
	tuid_t
;

47 
	#__uid_t_deföed


	)

51 #ifde‡
__USE_POSIX199309


53 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

56 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


57 
	~<bôs/ty≥s/sigöfo_t.h
>

58 
	~<bôs/sigöfo-c⁄°s.h
>

61 #ifde‡
__USE_MISC


62 
	~<bôs/ty≥s/sigvÆ_t.h
>

65 #ifde‡
__USE_POSIX199309


66 
	~<bôs/ty≥s/sigevít_t.h
>

67 
	~<bôs/sigevít-c⁄°s.h
>

72 (*
	t__sigh™dÀr_t
) ();

77 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

78 
__THROW
;

79 #ifde‡
__USE_GNU


80 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

81 
__THROW
;

87 #ifde‡
__USE_MISC


88 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

89 
__THROW
;

92 #ifde‡
__REDIRECT_NTH


93 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

94 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

95 
__sysv_sig«l
);

97 
	#sig«l
 
__sysv_sig«l


	)

101 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8


104 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

105 
__THROW
;

111 #ifde‡
__USE_POSIX


112 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

115 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


119 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

123 
	$øi£
 (
__sig
Ë
__THROW
;

125 #ifde‡
__USE_MISC


127 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

128 
__THROW
;

129 
	$gsig«l
 (
__sig
Ë
__THROW
;

132 #ifde‡
__USE_XOPEN2K8


134 
	`psig«l
 (
__sig
, c⁄° *
__s
);

137 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

149 #ifde‡
__USE_XOPEN_EXTENDED


150 #ifde‡
__GNUC__


151 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

153 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

155 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

160 #ifde‡
__USE_MISC


167 
	#sigmask
(
sig
Ë(()(1u << ((sigË- 1)))

	)

170 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

173 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

176 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

180 #ifde‡
__USE_MISC


181 
	#NSIG
 
_NSIG


	)

184 #ifde‡
__USE_GNU


185 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

189 #ifde‡
__USE_MISC


190 
__sigh™dÀr_t
 
	tsig_t
;

193 #ifde‡
__USE_POSIX


196 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

202 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

205 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

208 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

209 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #ifde‡
__USE_GNU


213 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

217 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

220 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

221 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

226 
	~<bôs/siga˘i⁄.h
>

229 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

230 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

237 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

240 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

241 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

244 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__USE_POSIX199506


252 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

253 
	`__n⁄nuŒ
 ((1, 2));

256 #ifde‡
__USE_POSIX199309


261 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

262 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

269 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

270 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

271 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

272 
	`__n⁄nuŒ
 ((1));

276 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

277 
__THROW
;

282 #ifde‡
__USE_MISC


286 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

287 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

291 
	~<bôs/sigc⁄ãxt.h
>

294 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

299 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


300 
	#__√ed_size_t


	)

301 
	~<°ddef.h
>

303 
	~<bôs/ty≥s/°ack_t.h
>

304 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


306 
	~<sys/uc⁄ãxt.h
>

310 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_MISC


314 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

316 
	~<bôs/sig°ack.h
>

317 
	~<bôs/ss_Êags.h
>

321 
	$sigÆt°ack
 (c⁄° 
°ack_t
 *
__ª°ri˘
 
__ss
,

322 
°ack_t
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

325 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

326 || 
deföed
 
__USE_MISC
)

327 
	~<bôs/ty≥s/°ru˘_sig°ack.h
>

330 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

331 || 
deföed
 
__USE_MISC
)

335 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

336 
__THROW
 
__©åibuã_dïªˇãd__
;

339 #ifde‡
__USE_XOPEN_EXTENDED


343 
	$sighﬁd
 (
__sig
Ë
__THROW
;

346 
	$sigªl£
 (
__sig
Ë
__THROW
;

349 
	$sigign‹e
 (
__sig
Ë
__THROW
;

352 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

355 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


358 
	~<bôs/±hªadty≥s.h
>

359 
	~<bôs/sigthªad.h
>

366 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

368 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

370 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

371 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

374 
	~<bôs/sig«l_ext.h
>

376 
__END_DECLS


	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	#__√ed___va_li°


	)

36 
	~<°d¨g.h
>

38 
	~<bôs/ty≥s.h
>

39 
	~<bôs/ty≥s/__Âos_t.h
>

40 
	~<bôs/ty≥s/__Âos64_t.h
>

41 
	~<bôs/ty≥s/__FILE.h
>

42 
	~<bôs/ty≥s/FILE.h
>

43 
	~<bôs/ty≥s/°ru˘_FILE.h
>

45 #ifde‡
__USE_GNU


46 
	~<bôs/ty≥s/cookõ_io_fun˘i⁄s_t.h
>

49 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


50 #ifde‡
__GNUC__


51 #i‚de‡
_VA_LIST_DEFINED


52 
__gnuc_va_li°
 
	tva_li°
;

53 
	#_VA_LIST_DEFINED


	)

56 
	~<°d¨g.h
>

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__off_t_deföed


62 #i‚de‡
__USE_FILE_OFFSET64


63 
__off_t
 
	toff_t
;

65 
__off64_t
 
	toff_t
;

67 
	#__off_t_deföed


	)

69 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


70 
__off64_t
 
	toff64_t
;

71 
	#__off64_t_deföed


	)

75 #ifde‡
__USE_XOPEN2K8


76 #i‚de‡
__ssize_t_deföed


77 
__ssize_t
 
	tssize_t
;

78 
	#__ssize_t_deföed


	)

83 #i‚de‡
__USE_FILE_OFFSET64


84 
__Âos_t
 
	tÂos_t
;

86 
__Âos64_t
 
	tÂos_t
;

88 #ifde‡
__USE_LARGEFILE64


89 
__Âos64_t
 
	tÂos64_t
;

93 
	#_IOFBF
 0

	)

94 
	#_IOLBF
 1

	)

95 
	#_IONBF
 2

	)

99 
	#BUFSIZ
 8192

	)

104 
	#EOF
 (-1)

	)

109 
	#SEEK_SET
 0

	)

110 
	#SEEK_CUR
 1

	)

111 
	#SEEK_END
 2

	)

112 #ifde‡
__USE_GNU


113 
	#SEEK_DATA
 3

	)

114 
	#SEEK_HOLE
 4

	)

118 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


120 
	#P_tmpdú
 "/tmp"

	)

133 
	~<bôs/°dio_lim.h
>

137 
FILE
 *
°dö
;

138 
FILE
 *
°dout
;

139 
FILE
 *
°dîr
;

141 
	#°dö
 
°dö


	)

142 
	#°dout
 
°dout


	)

143 
	#°dîr
 
°dîr


	)

146 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

148 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

150 #ifde‡
__USE_ATFILE


152 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

153 c⁄° *
__√w
Ë
__THROW
;

156 #ifde‡
__USE_GNU


158 
	#RENAME_NOREPLACE
 (1 << 0)

	)

159 
	#RENAME_EXCHANGE
 (1 << 1)

	)

160 
	#RENAME_WHITEOUT
 (1 << 2)

	)

164 
	$ª«mót2
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

165 c⁄° *
__√w
, 
__Êags
Ë
__THROW
;

172 #i‚de‡
__USE_FILE_OFFSET64


173 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

175 #ifde‡
__REDIRECT


176 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

178 
	#tmpfûe
 
tmpfûe64


	)

182 #ifde‡
__USE_LARGEFILE64


183 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

187 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

189 #ifde‡
__USE_MISC


192 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

196 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


204 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

205 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

213 
	`f˛o£
 (
FILE
 *
__°ªam
);

218 
	`fÊush
 (
FILE
 *
__°ªam
);

220 #ifde‡
__USE_MISC


227 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

230 #ifde‡
__USE_GNU


237 
	`f˛o£Æl
 ();

241 #i‚de‡
__USE_FILE_OFFSET64


246 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

247 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

252 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

253 c⁄° *
__ª°ri˘
 
__modes
,

254 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

256 #ifde‡
__REDIRECT


257 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

258 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

259 
__wur
;

260 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

261 c⁄° *
__ª°ri˘
 
__modes
,

262 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

263 
__wur
;

265 
	#f›í
 
f›í64


	)

266 
	#‰e›í
 
‰e›í64


	)

269 #ifde‡
__USE_LARGEFILE64


270 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

271 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

272 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
,

274 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

277 #ifdef 
__USE_POSIX


279 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

282 #ifdef 
__USE_GNU


285 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

286 c⁄° *
__ª°ri˘
 
__modes
,

287 
cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

290 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

292 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

293 
__THROW
 
__wur
;

298 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

304 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

308 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

309 
__modes
, 
size_t
 
__n
Ë
__THROW
;

311 #ifdef 
__USE_MISC


314 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

315 
size_t
 
__size
Ë
__THROW
;

318 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

326 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

327 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

332 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

334 
	$•rötf
 (*
__ª°ri˘
 
__s
,

335 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

341 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

342 
__gnuc_va_li°
 
__¨g
);

347 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
);

349 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

350 
__gnuc_va_li°
 
__¨g
Ë
__THROWNL
;

352 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


354 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

355 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

356 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

358 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

360 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

363 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

366 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

367 
__gnuc_va_li°
 
__¨g
)

368 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

369 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

370 c⁄° *
__ª°ri˘
 
__fmt
, ...)

371 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

372 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

373 c⁄° *
__ª°ri˘
 
__fmt
, ...)

374 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

377 #ifde‡
__USE_XOPEN2K8


379 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

380 
__gnuc_va_li°
 
__¨g
)

381 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

382 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

383 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

391 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

392 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

397 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

399 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

400 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

405 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
Ë&& !
deföed
 
__LDBL_COMPAT


406 #ifde‡
__REDIRECT


407 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

408 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

409 
__isoc99_fsˇnf
Ë
__wur
;

410 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

411 
__isoc99_sˇnf
Ë
__wur
;

412 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

413 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

414 
__isoc99_ssˇnf
);

416 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

417 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

418 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

419 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

420 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

421 
	#fsˇnf
 
__isoc99_fsˇnf


	)

422 
	#sˇnf
 
__isoc99_sˇnf


	)

423 
	#ssˇnf
 
__isoc99_ssˇnf


	)

427 #ifdef 
__USE_ISOC99


432 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

433 
__gnuc_va_li°
 
__¨g
)

434 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

440 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

441 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

444 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

445 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

446 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

449 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

450 #i‡
deföed
 
__REDIRECT
 && !deföed 
__LDBL_COMPAT


451 
	`__REDIRECT
 (
vfsˇnf
,

452 (
FILE
 *
__ª°ri˘
 
__s
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
),

454 
__isoc99_vfsˇnf
)

455 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

456 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

457 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

458 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

459 
	`__REDIRECT_NTH
 (
vssˇnf
,

460 (c⁄° *
__ª°ri˘
 
__s
,

461 c⁄° *
__ª°ri˘
 
__f‹m©
,

462 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

463 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

464 #ñi‡!
deföed
 
__REDIRECT


465 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

466 c⁄° *
__ª°ri˘
 
__f‹m©
,

467 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

468 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

469 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

470 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

471 c⁄° *
__ª°ri˘
 
__f‹m©
,

472 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

473 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

474 
	#vsˇnf
 
__isoc99_vsˇnf


	)

475 
	#vssˇnf
 
__isoc99_vssˇnf


	)

485 
	`fgëc
 (
FILE
 *
__°ªam
);

486 
	`gëc
 (
FILE
 *
__°ªam
);

492 
	`gëch¨
 ();

494 #ifde‡
__USE_POSIX199506


499 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

500 
	`gëch¨_u∆ocked
 ();

503 #ifde‡
__USE_MISC


510 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

521 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

522 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

528 
	`putch¨
 (
__c
);

530 #ifde‡
__USE_MISC


537 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

540 #ifde‡
__USE_POSIX199506


545 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

546 
	`putch¨_u∆ocked
 (
__c
);

550 #i‡
deföed
 
__USE_MISC
 \

551 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

553 
	`gëw
 (
FILE
 *
__°ªam
);

556 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

564 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

565 
__wur
;

567 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

577 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

580 #ifde‡
__USE_GNU


587 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

588 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

592 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

603 
__ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

604 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

605 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

606 
__ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

607 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

608 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

616 
__ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

617 
size_t
 *
__ª°ri˘
 
__n
,

618 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

626 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

632 
	`puts
 (c⁄° *
__s
);

639 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

646 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

647 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

652 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

653 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

655 #ifde‡
__USE_GNU


662 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
);

666 #ifde‡
__USE_MISC


673 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

674 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

684 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

689 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

694 
	`ªwöd
 (
FILE
 *
__°ªam
);

701 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


702 #i‚de‡
__USE_FILE_OFFSET64


707 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

712 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

714 #ifde‡
__REDIRECT


715 
	`__REDIRECT
 (
f£eko
,

716 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

717 
f£eko64
);

718 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

720 
	#f£eko
 
f£eko64


	)

721 
	#·ñlo
 
·ñlo64


	)

726 #i‚de‡
__USE_FILE_OFFSET64


731 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

736 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

738 #ifde‡
__REDIRECT


739 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

740 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

741 
	`__REDIRECT
 (
f£ços
,

742 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

744 
	#fgëpos
 
fgëpos64


	)

745 
	#f£ços
 
f£ços64


	)

749 #ifde‡
__USE_LARGEFILE64


750 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

751 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

753 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

757 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

759 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

761 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

763 #ifde‡
__USE_MISC


765 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

766 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

767 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

775 
	`≥º‹
 (c⁄° *
__s
);

781 
	~<bôs/sys_îæi°.h
>

784 #ifdef 
__USE_POSIX


786 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

789 #ifde‡
__USE_MISC


791 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

795 #ifde‡
__USE_POSIX2


800 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

806 
	`p˛o£
 (
FILE
 *
__°ªam
);

810 #ifdef 
__USE_POSIX


812 *
	$˘îmid
 (*
__s
Ë
__THROW
;

816 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


818 *
	`cu£rid
 (*
__s
);

822 #ifdef 
__USE_GNU


823 
ob°ack
;

826 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

827 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

828 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

829 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

830 c⁄° *
__ª°ri˘
 
__f‹m©
,

831 
__gnuc_va_li°
 
__¨gs
)

832 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

836 #ifde‡
__USE_POSIX199506


840 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

844 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

847 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

850 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


853 
	~<bôs/gë›t_posix.h
>

858 
	`__uÊow
 (
FILE
 *);

859 
	`__ovîÊow
 (
FILE
 *, );

863 #ifde‡
__USE_EXTERN_INLINES


864 
	~<bôs/°dio.h
>

866 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


867 
	~<bôs/°dio2.h
>

869 #ifde‡
__LDBL_COMPAT


870 
	~<bôs/°dio-ldbl.h
>

873 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

25 
	~<bôs/libc-hódî-°¨t.h
>

28 
	#__√ed_size_t


	)

29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

31 
	~<°ddef.h
>

33 
	g__BEGIN_DECLS


35 
	#_STDLIB_H
 1

	)

37 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


39 
	~<bôs/waôÊags.h
>

40 
	~<bôs/waô°©us.h
>

43 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

44 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

45 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

46 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

47 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

48 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

49 #ifde‡
__WIFCONTINUED


50 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

55 
	~<bôs/Êﬂä.h
>

60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

74 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__exãnsi⁄__
 struct

78 
	mquŸ
;

79 
	mªm
;

80 } 
	tŒdiv_t
;

81 
	#__Œdiv_t_deföed
 1

	)

86 
	#RAND_MAX
 2147483647

	)

91 
	#EXIT_FAILURE
 1

	)

92 
	#EXIT_SUCCESS
 0

	)

96 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

97 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

101 
	$©of
 (c⁄° *
__≈å
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

104 
	$©oi
 (c⁄° *
__≈å
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

107 
	$©ﬁ
 (c⁄° *
__≈å
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

110 #ifde‡
__USE_ISOC99


112 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

113 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

117 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

118 **
__ª°ri˘
 
__íd±r
)

119 
__THROW
 
	`__n⁄nuŒ
 ((1));

121 #ifdef 
__USE_ISOC99


123 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

124 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

126 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

127 **
__ª°ri˘
 
__íd±r
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1));

133 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

135 **
__ª°ri˘
 
__íd±r
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

140 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

141 **
__ª°ri˘
 
__íd±r
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1));

145 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

146 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

147 **
__ª°ri˘
 
__íd±r
)

148 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

152 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

153 **
__ª°ri˘
 
__íd±r
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1));

157 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

158 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

159 **
__ª°ri˘
 
__íd±r
)

160 
__THROW
 
	`__n⁄nuŒ
 ((1));

163 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

164 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

169 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

170 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

176 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1));

180 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

181 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

182 
__THROW
 
	`__n⁄nuŒ
 ((1));

184 #ifde‡
__USE_MISC


186 
__exãnsi⁄__


187 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

191 
__exãnsi⁄__


192 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

193 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

194 
__THROW
 
	`__n⁄nuŒ
 ((1));

197 #ifde‡
__USE_ISOC99


199 
__exãnsi⁄__


200 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

204 
__exãnsi⁄__


205 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

206 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

212 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

213 
__f
)

214 
__THROW
 
	`__n⁄nuŒ
 ((3));

216 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

217 
__f
)

218 
__THROW
 
	`__n⁄nuŒ
 ((3));

220 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

221 
__f
)

222 
__THROW
 
	`__n⁄nuŒ
 ((3));

225 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

226 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

227 
_Flﬂt16
 
__f
)

228 
__THROW
 
	`__n⁄nuŒ
 ((3));

231 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

232 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

233 
_Flﬂt32
 
__f
)

234 
__THROW
 
	`__n⁄nuŒ
 ((3));

237 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

238 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

239 
_Flﬂt64
 
__f
)

240 
__THROW
 
	`__n⁄nuŒ
 ((3));

243 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

244 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

245 
_Flﬂt128
 
__f
)

246 
__THROW
 
	`__n⁄nuŒ
 ((3));

249 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

250 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

251 
_Flﬂt32x
 
__f
)

252 
__THROW
 
	`__n⁄nuŒ
 ((3));

255 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

256 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

257 
_Flﬂt64x
 
__f
)

258 
__THROW
 
	`__n⁄nuŒ
 ((3));

261 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

262 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

263 
_Flﬂt128x
 
__f
)

264 
__THROW
 
	`__n⁄nuŒ
 ((3));

268 #ifde‡
__USE_GNU


272 
	~<bôs/ty≥s/loˇÀ_t.h
>

274 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

275 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

276 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

278 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

279 **
__ª°ri˘
 
__íd±r
,

280 
__ba£
, 
loˇÀ_t
 
__loc
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

283 
__exãnsi⁄__


284 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

285 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

286 
loˇÀ_t
 
__loc
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

289 
__exãnsi⁄__


290 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

291 **
__ª°ri˘
 
__íd±r
,

292 
__ba£
, 
loˇÀ_t
 
__loc
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

295 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

296 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

299 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

300 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

303 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

304 **
__ª°ri˘
 
__íd±r
,

305 
loˇÀ_t
 
__loc
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

308 #i‡
__HAVE_FLOAT16


309 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

310 **
__ª°ri˘
 
__íd±r
,

311 
loˇÀ_t
 
__loc
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

315 #i‡
__HAVE_FLOAT32


316 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

317 **
__ª°ri˘
 
__íd±r
,

318 
loˇÀ_t
 
__loc
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

322 #i‡
__HAVE_FLOAT64


323 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

324 **
__ª°ri˘
 
__íd±r
,

325 
loˇÀ_t
 
__loc
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

329 #i‡
__HAVE_FLOAT128


330 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 **
__ª°ri˘
 
__íd±r
,

332 
loˇÀ_t
 
__loc
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

336 #i‡
__HAVE_FLOAT32X


337 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

338 **
__ª°ri˘
 
__íd±r
,

339 
loˇÀ_t
 
__loc
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

343 #i‡
__HAVE_FLOAT64X


344 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

345 **
__ª°ri˘
 
__íd±r
,

346 
loˇÀ_t
 
__loc
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

350 #i‡
__HAVE_FLOAT128X


351 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

352 **
__ª°ri˘
 
__íd±r
,

353 
loˇÀ_t
 
__loc
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

359 #ifde‡
__USE_EXTERN_INLINES


360 
__exã∫_ölöe
 

361 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

363  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

364 
	}
}

365 
__exã∫_ölöe
 

366 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

368  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

369 
	}
}

371 #ifde‡
__USE_ISOC99


372 
__exãnsi⁄__
 
__exã∫_ölöe
 

373 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

375  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

376 
	}
}

381 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


385 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

388 
	$a64l
 (c⁄° *
__s
)

389 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

393 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


394 
	~<sys/ty≥s.h
>

401 
	$øndom
 (Ë
__THROW
;

404 
	$§™dom
 (
__£ed
Ë
__THROW
;

410 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

411 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

415 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

418 #ifde‡
__USE_MISC


423 
	søndom_d©a


425 
öt32_t
 *
Âå
;

426 
öt32_t
 *
Ωå
;

427 
öt32_t
 *
°©e
;

428 
ønd_ty≥
;

429 
ønd_deg
;

430 
ønd_£p
;

431 
öt32_t
 *
íd_±r
;

434 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

435 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

437 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

441 
size_t
 
__°©ñí
,

442 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

446 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

447 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$ønd
 (Ë
__THROW
;

455 
	$§™d
 (
__£ed
Ë
__THROW
;

457 #ifde‡
__USE_POSIX199506


459 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

463 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


467 
	$dønd48
 (Ë
__THROW
;

468 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

471 
	$Ã™d48
 (Ë
__THROW
;

472 
	$ƒ™d48
 (
__xsubi
[3])

473 
__THROW
 
	`__n⁄nuŒ
 ((1));

476 
	$mønd48
 (Ë
__THROW
;

477 
	$jønd48
 (
__xsubi
[3])

478 
__THROW
 
	`__n⁄nuŒ
 ((1));

481 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

482 *
	$£ed48
 (
__£ed16v
[3])

483 
__THROW
 
	`__n⁄nuŒ
 ((1));

484 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

486 #ifde‡
__USE_MISC


490 
	sdønd48_d©a


492 
__x
[3];

493 
__ﬁd_x
[3];

494 
__c
;

495 
__öô
;

496 
__exãnsi⁄__
 
__a
;

501 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

502 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

503 
	$î™d48_r
 (
__xsubi
[3],

504 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

505 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

508 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

509 *
__ª°ri˘
 
__ªsu…
)

510 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

511 
	$ƒ™d48_r
 (
__xsubi
[3],

512 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

513 *
__ª°ri˘
 
__ªsu…
)

514 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

517 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

518 *
__ª°ri˘
 
__ªsu…
)

519 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

520 
	$jønd48_r
 (
__xsubi
[3],

521 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

522 *
__ª°ri˘
 
__ªsu…
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

526 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

527 
__THROW
 
	`__n⁄nuŒ
 ((2));

529 
	$£ed48_r
 (
__£ed16v
[3],

530 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

532 
	$lc⁄g48_r
 (
__∑øm
[7],

533 
dønd48_d©a
 *
__buf„r
)

534 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

539 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


540 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

542 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

543 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((1, 2)Ë
__wur
;

550 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

551 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
 
	`__©åibuã_Æloc_size__
 ((2));

553 #ifde‡
__USE_MISC


559 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

560 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__


561 
	`__©åibuã_Æloc_size__
 ((2, 3));

565 
	$‰ì
 (*
__±r
Ë
__THROW
;

567 #ifde‡
__USE_MISC


568 
	~<Æloˇ.h
>

571 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

572 || 
deföed
 
__USE_MISC


574 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


575 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

578 #ifde‡
__USE_XOPEN2K


580 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

584 #ifde‡
__USE_ISOC11


586 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

587 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

591 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

595 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

597 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


599 #ifde‡
__˝lu•lus


600 "C++" 
	`©_quick_exô
 ((*
__func
) ())

601 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

603 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

607 #ifdef 
__USE_MISC


610 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

611 
__THROW
 
	`__n⁄nuŒ
 ((1));

617 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

619 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


623 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

626 #ifde‡
__USE_ISOC99


629 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

634 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

636 #ifde‡
__USE_GNU


639 *
	$£cuª_gëív
 (c⁄° *
__«me
)

640 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


647 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

650 #ifde‡
__USE_XOPEN2K


653 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

654 
__THROW
 
	`__n⁄nuŒ
 ((2));

657 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

660 #ifdef 
__USE_MISC


664 
	$˛óªnv
 (Ë
__THROW
;

668 #i‡
deföed
 
__USE_MISC
 \

669 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

675 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

678 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


687 #i‚de‡
__USE_FILE_OFFSET64


688 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

690 #ifde‡
__REDIRECT


691 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

692 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

694 
	#mk°emp
 
mk°emp64


	)

697 #ifde‡
__USE_LARGEFILE64


698 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 #ifde‡
__USE_MISC


709 #i‚de‡
__USE_FILE_OFFSET64


710 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

714 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

716 
	#mk°emps
 
mk°emps64


	)

719 #ifde‡
__USE_LARGEFILE64


720 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

721 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

725 #ifde‡
__USE_XOPEN2K8


731 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

734 #ifde‡
__USE_GNU


741 #i‚de‡
__USE_FILE_OFFSET64


742 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

744 #ifde‡
__REDIRECT


745 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

746 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

748 
	#mko°emp
 
mko°emp64


	)

751 #ifde‡
__USE_LARGEFILE64


752 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

761 #i‚de‡
__USE_FILE_OFFSET64


762 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

763 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

765 #ifde‡
__REDIRECT


766 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

767 
__Êags
), 
mko°emps64
)

768 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

770 
	#mko°emps
 
mko°emps64


	)

773 #ifde‡
__USE_LARGEFILE64


774 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

775 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

784 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

787 #ifdef 
__USE_GNU


790 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

794 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


800 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

801 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

806 #i‚de‡
__COMPAR_FN_T


807 
	#__COMPAR_FN_T


	)

808 (*
	t__com∑r_‚_t
) (const *, const *);

810 #ifdef 
__USE_GNU


811 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

814 #ifde‡
__USE_GNU


815 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

820 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

821 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

822 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

824 #ifde‡
__USE_EXTERN_INLINES


825 
	~<bôs/°dlib-b£¨ch.h
>

830 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

831 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

832 #ifde‡
__USE_GNU


833 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

834 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

835 
	`__n⁄nuŒ
 ((1, 4));

840 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

841 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

843 #ifde‡
__USE_ISOC99


844 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

845 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

852 
div_t
 
	$div
 (
__numî
, 
__díom
)

853 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

854 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

855 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

857 #ifde‡
__USE_ISOC99


858 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

859 
__díom
)

860 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

864 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

865 || 
deföed
 
__USE_MISC


872 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

873 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

878 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

879 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

884 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

885 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

888 #ifde‡
__USE_MISC


890 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

891 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

892 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

893 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

894 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

895 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

896 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

897 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

902 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

903 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

904 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

905 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

906 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

907 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

909 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

910 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

911 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

912 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

913 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

914 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

915 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

916 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

922 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

925 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

926 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

929 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

933 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

934 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

936 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

937 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

938 
__THROW
;

941 #ifde‡
__USE_MISC


946 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

950 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


957 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

958 *c⁄° *
__ª°ri˘
 
__tokís
,

959 **
__ª°ri˘
 
__vÆuï
)

960 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

966 #ifde‡
__USE_XOPEN2KXSI


968 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

971 #ifde‡
__USE_XOPEN_EXTENDED


976 
	$gø¡±
 (
__fd
Ë
__THROW
;

980 
	$u∆ock±
 (
__fd
Ë
__THROW
;

985 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

988 #ifde‡
__USE_GNU


992 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

993 
__THROW
 
	`__n⁄nuŒ
 ((2));

996 
	`gë±
 ();

999 #ifde‡
__USE_MISC


1003 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1004 
__THROW
 
	`__n⁄nuŒ
 ((1));

1007 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1010 
	$ây¶Ÿ
 (Ë
__THROW
;

1013 
	~<bôs/°dlib-Êﬂt.h
>

1016 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1017 
	~<bôs/°dlib.h
>

1019 #ifde‡
__LDBL_COMPAT


1020 
	~<bôs/°dlib-ldbl.h
>

1023 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && (
__GNUC_PREREQ
 (4, 4) \

37 || 
	$__glibc_˛™g_¥îeq
 (3, 5))

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

44 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

47 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || 
	`__GLIBC_USE
 (
ISOC2X
)

54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

61 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

64 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

65 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

68 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


71 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

72 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

74 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__OPTIMIZE__


77 
__exã∫_Æways_ölöe
 *

78 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


80  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

83 
__exã∫_Æways_ölöe
 const *

84 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


86  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

89 
	}
}

91 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

92 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 #ifde‡
__USE_GNU


98 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


99 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

100 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

104 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


110 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

111 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

112 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

122 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

123 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

125 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

126 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

130 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

131 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

134 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

138 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

148 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
 
	`__n⁄nuŒ
 ((2));

151 #ifde‡
__USE_XOPEN2K8


153 
	~<bôs/ty≥s/loˇÀ_t.h
>

156 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

157 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

160 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

161 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

164 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

165 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| 
	$__GLIBC_USE
 (
ISOC2X
))

167 *
	$°rdup
 (c⁄° *
__s
)

168 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

174 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| __GLIBC_USE (
ISOC2X
)

175 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

179 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


181 
	#°rdu∑
(
s
) \

182 (
__exãnsi⁄__
 \

184 c⁄° *
__ﬁd
 = (
s
); \

185 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

186 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

187 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

188 
	}
}))

	)

191 
	#°∫du∑
(
s
, 
n
) \

192 (
__exãnsi⁄__
 \

194 c⁄° *
__ﬁd
 = (
s
); \

195 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

196 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

197 
__√w
[
__Àn
] = '\0'; \

198 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

199 }))

	)

203 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


206 *
°rchr
 (*
__s
, 
__c
)

207 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

208 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

209 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

211 #ifde‡
__OPTIMIZE__


212 
__exã∫_Æways_ölöe
 *

213 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


215  
__buûtö_°rchr
 (
__s
, 
__c
);

218 
__exã∫_Æways_ölöe
 const *

219 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


221  
__buûtö_°rchr
 (
__s
, 
__c
);

226 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

227 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

230 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


233 *
	`°ºchr
 (*
__s
, 
__c
)

234 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

236 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

238 #ifde‡
__OPTIMIZE__


239 
__exã∫_Æways_ölöe
 *

240 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


242  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

245 
__exã∫_Æways_ölöe
 const *

246 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


248  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

251 
	}
}

253 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

254 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

257 #ifde‡
__USE_GNU


260 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


261 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

262 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

263 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

267 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

277 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


283 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

284 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

285 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

286 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 #ifde‡
__OPTIMIZE__


289 
__exã∫_Æways_ölöe
 *

290 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


292  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

295 
__exã∫_Æways_ölöe
 const *

296 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


298  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

301 
	}
}

303 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

304 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

307 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


310 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

311 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

312 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

313 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

315 #ifde‡
__OPTIMIZE__


316 
__exã∫_Æways_ölöe
 *

317 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


319  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

322 
__exã∫_Æways_ölöe
 const *

323 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


325  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

328 
	}
}

330 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

331 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

336 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

337 
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

342 c⁄° *
__ª°ri˘
 
__dñim
,

343 **
__ª°ri˘
 
__ßve_±r
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

345 #ifde‡
__USE_POSIX


346 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

347 **
__ª°ri˘
 
__ßve_±r
)

348 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

351 #ifde‡
__USE_GNU


353 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


354 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

355 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

356 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

357 c⁄° *
__√edÀ
)

358 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

360 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

361 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

365 #ifde‡
__USE_GNU


369 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

370 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

371 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

375 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

376 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

379 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

380 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

385 
size_t
 
	$°æí
 (c⁄° *
__s
)

386 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

388 #ifdef 
__USE_XOPEN2K8


391 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

392 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

397 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

398 #ifde‡
__USE_XOPEN2K


406 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


409 #ifde‡
__REDIRECT_NTH


410 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

411 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

412 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

414 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

415 
__THROW
 
	`__n⁄nuŒ
 ((2));

416 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

421 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

422 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

426 #ifde‡
__USE_XOPEN2K8


428 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

431 #ifde‡
__USE_MISC


432 
	~<°rögs.h
>

436 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

440 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

441 c⁄° *
__ª°ri˘
 
__dñim
)

442 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

445 #ifdef 
__USE_XOPEN2K8


447 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

450 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

452 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

453 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

457 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

458 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

459 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

460 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

461 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

462 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

465 #ifdef 
__USE_GNU


467 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

468 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

471 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

474 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

476 #i‚de‡
ba£«me


481 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


482 "C++" *
	$ba£«me
 (*
__fûíame
)

483 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

484 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

485 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

487 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

492 #i‡
	`__GNUC_PREREQ
 (3,4)

493 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


495 
	~<bôs/°rög_f‹tifõd.h
>

499 
__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/time.h

22 #i‚def 
_TIME_H


23 
	#_TIME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

33 
	~<bôs/time.h
>

37 
	~<bôs/ty≥s/˛ock_t.h
>

38 
	~<bôs/ty≥s/time_t.h
>

39 
	~<bôs/ty≥s/°ru˘_tm.h
>

41 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_ISOC11


42 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

45 #ifde‡
__USE_POSIX199309


46 
	~<bôs/ty≥s/˛ockid_t.h
>

47 
	~<bôs/ty≥s/timî_t.h
>

48 
	~<bôs/ty≥s/°ru˘_ôimî•ec.h
>

49 
	gsigevít
;

52 #ifde‡
__USE_XOPEN2K


53 #i‚de‡
__pid_t_deföed


54 
__pid_t
 
	tpid_t
;

55 
	#__pid_t_deföed


	)

59 #ifde‡
__USE_XOPEN2K8


60 
	~<bôs/ty≥s/loˇÀ_t.h
>

63 #ifde‡
__USE_ISOC11


65 
	#TIME_UTC
 1

	)

68 
__BEGIN_DECLS


72 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

75 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

78 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

79 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

82 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

88 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
,

90 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

92 #ifde‡
__USE_XOPEN


95 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

96 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

97 
__THROW
;

100 #ifde‡
__USE_XOPEN2K8


104 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

105 c⁄° *
__ª°ri˘
 
__f‹m©
,

106 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

107 
loˇÀ_t
 
__loc
Ë
__THROW
;

110 #ifde‡
__USE_GNU


111 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

112 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

113 
loˇÀ_t
 
__loc
Ë
__THROW
;

119 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

123 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

125 #i‡
deföed
 
__USE_POSIX
 || 
	`__GLIBC_USE
 (
ISOC2X
)

128 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

129 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

133 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

134 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

139 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

142 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

144 #i‡
deföed
 
__USE_POSIX
 || 
	`__GLIBC_USE
 (
ISOC2X
)

149 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

150 *
__ª°ri˘
 
__buf
Ë
__THROW
;

153 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

154 *
__ª°ri˘
 
__buf
Ë
__THROW
;

159 *
__tz«me
[2];

160 
__daylight
;

161 
__timez⁄e
;

164 #ifdef 
__USE_POSIX


166 *
tz«me
[2];

170 
	$tz£t
 (Ë
__THROW
;

173 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


174 
daylight
;

175 
timez⁄e
;

181 
	#__i¶óp
(
yór
) \

182 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

185 #ifde‡
__USE_MISC


190 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

193 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

196 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

200 #ifde‡
__USE_POSIX199309


205 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

206 
time•ec
 *
__ªmaöög
);

210 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

213 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

216 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

217 
__THROW
;

219 #ifde‡
__USE_XOPEN2K


224 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

225 c⁄° 
time•ec
 *
__ªq
,

226 
time•ec
 *
__ªm
);

229 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

234 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

235 
sigevít
 *
__ª°ri˘
 
__evp
,

236 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

239 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

242 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

243 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

244 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

247 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

248 
__THROW
;

251 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

255 #ifde‡
__USE_ISOC11


257 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1));

262 #ifde‡
__USE_XOPEN_EXTENDED


274 
gëd©e_îr
;

283 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

286 #ifde‡
__USE_GNU


297 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

298 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

301 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_MISC


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_MISC


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #ifde‡
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #ifde‡
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_MISC


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #ifde‡
__USE_MISC


784 
	$ây¶Ÿ
 (Ë
__THROW
;

789 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

790 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

792 #ifde‡
__USE_ATFILE


795 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

796 c⁄° *
__to
, 
__Êags
)

797 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

800 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


802 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

803 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

808 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

809 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

813 #ifde‡
__USE_ATFILE


815 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

816 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

819 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

820 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

821 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

825 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

827 #ifde‡
__USE_ATFILE


829 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

830 
__THROW
 
	`__n⁄nuŒ
 ((2));

834 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

838 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

841 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

848 *
	`gëlogö
 ();

849 #ifde‡
__USE_POSIX199506


856 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

859 #ifdef 
__USE_MISC


861 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

865 #ifdef 
__USE_POSIX2


869 
	~<bôs/gë›t_posix.h
>

873 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


877 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

881 #i‡
deföed
 
__USE_MISC


884 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

895 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

896 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

897 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

904 
	$vh™gup
 (Ë
__THROW
;

907 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

915 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

916 
size_t
 
__off£t
, 
__sˇÀ
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1));

923 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

927 *
	$gëu£rshñl
 (Ë
__THROW
;

928 
	$ídu£rshñl
 (Ë
__THROW
;

929 
	$£tu£rshñl
 (Ë
__THROW
;

935 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

939 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

942 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

946 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

954 
	`fsync
 (
__fd
);

957 #ifde‡
__USE_GNU


960 
	$syncfs
 (
__fd
Ë
__THROW
;

964 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


967 
	`gëho°id
 ();

970 
	$sync
 (Ë
__THROW
;

973 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


976 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

981 
	$gëdèbÀsize
 (Ë
__THROW
;

987 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


990 #i‚de‡
__USE_FILE_OFFSET64


991 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

992 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

994 #ifde‡
__REDIRECT_NTH


995 
	`__REDIRECT_NTH
 (
åunˇã
,

996 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

997 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 
	#åunˇã
 
åunˇã64


	)

1002 #ifde‡
__USE_LARGEFILE64


1003 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1004 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1009 #i‡
deföed
 
__USE_POSIX199309
 \

1010 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1013 #i‚de‡
__USE_FILE_OFFSET64


1014 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1016 #ifde‡
__REDIRECT_NTH


1017 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1018 
·runˇã64
Ë
__wur
;

1020 
	#·runˇã
 
·runˇã64


	)

1023 #ifde‡
__USE_LARGEFILE64


1024 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1030 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1031 || 
deföed
 
__USE_MISC


1035 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1041 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1045 #ifde‡
__USE_MISC


1056 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1061 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1073 
	#F_ULOCK
 0

	)

1074 
	#F_LOCK
 1

	)

1075 
	#F_TLOCK
 2

	)

1076 
	#F_TEST
 3

	)

1078 #i‚de‡
__USE_FILE_OFFSET64


1079 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1081 #ifde‡
__REDIRECT


1082 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1083 
lockf64
Ë
__wur
;

1085 
	#lockf
 
lockf64


	)

1088 #ifde‡
__USE_LARGEFILE64


1089 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1094 #ifde‡
__USE_GNU


1099 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1100 (
__exãnsi⁄__
 \

1101 ({ 
__ªsu…
; \

1102 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1103 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1104 
__ªsu…
; 
	}
}))

	)

1107 
ssize_t
 
c›y_fûe_ønge
 (
__öfd
, 
__off64_t
 *
__pöoff
,

1108 
__outfd
, 
__off64_t
 *
__poutoff
,

1109 
size_t
 
__Àngth
, 
__Êags
);

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1118 #ifde‡
__USE_MISC


1124 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1125 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 #ifdef 
__USE_XOPEN


1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1141 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1143 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1146 *
	`cu£rid
 (*
__s
);

1152 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1153 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1154 (*
__∑ª¡
) (),

1155 (*
__chûd
Ë()Ë
__THROW
;

1158 #ifde‡
__USE_MISC


1161 
	$gëíå›y
 (*
__buf„r
, 
size_t
 
__Àngth
Ë
__wur
;

1165 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1166 
	~<bôs/uni°d.h
>

1170 
	~<bôs/uni°d_ext.h
>

1172 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

120 #unde‡
__USE_ISOC11


121 #unde‡
__USE_ISOC99


122 #unde‡
__USE_ISOC95


123 #unde‡
__USE_ISOCXX11


124 #unde‡
__USE_POSIX


125 #unde‡
__USE_POSIX2


126 #unde‡
__USE_POSIX199309


127 #unde‡
__USE_POSIX199506


128 #unde‡
__USE_XOPEN


129 #unde‡
__USE_XOPEN_EXTENDED


130 #unde‡
__USE_UNIX98


131 #unde‡
__USE_XOPEN2K


132 #unde‡
__USE_XOPEN2KXSI


133 #unde‡
__USE_XOPEN2K8


134 #unde‡
__USE_XOPEN2K8XSI


135 #unde‡
__USE_LARGEFILE


136 #unde‡
__USE_LARGEFILE64


137 #unde‡
__USE_FILE_OFFSET64


138 #unde‡
__USE_MISC


139 #unde‡
__USE_ATFILE


140 #unde‡
__USE_GNU


141 #unde‡
__USE_FORTIFY_LEVEL


142 #unde‡
__KERNEL_STRICT_NAMES


143 #unde‡
__GLIBC_USE_ISOC2X


144 #unde‡
__GLIBC_USE_DEPRECATED_GETS


145 #unde‡
__GLIBC_USE_DEPRECATED_SCANF


149 #i‚de‡
_LOOSE_KERNEL_NAMES


150 
	#__KERNEL_STRICT_NAMES


	)

160 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


161 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

162 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

164 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

171 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


172 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

173 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

175 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

179 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

185 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

186 && !
deföed
 
	g_DEFAULT_SOURCE


188 #unde‡
_DEFAULT_SOURCE


189 
	#_DEFAULT_SOURCE
 1

	)

193 #ifde‡
_GNU_SOURCE


194 #unde‡
_ISOC95_SOURCE


195 
	#_ISOC95_SOURCE
 1

	)

196 #unde‡
_ISOC99_SOURCE


197 
	#_ISOC99_SOURCE
 1

	)

198 #unde‡
_ISOC11_SOURCE


199 
	#_ISOC11_SOURCE
 1

	)

200 #unde‡
_ISOC2X_SOURCE


201 
	#_ISOC2X_SOURCE
 1

	)

202 #unde‡
_POSIX_SOURCE


203 
	#_POSIX_SOURCE
 1

	)

204 #unde‡
_POSIX_C_SOURCE


205 
	#_POSIX_C_SOURCE
 200809L

	)

206 #unde‡
_XOPEN_SOURCE


207 
	#_XOPEN_SOURCE
 700

	)

208 #unde‡
_XOPEN_SOURCE_EXTENDED


209 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

210 #unde‡
_LARGEFILE64_SOURCE


211 
	#_LARGEFILE64_SOURCE
 1

	)

212 #unde‡
_DEFAULT_SOURCE


213 
	#_DEFAULT_SOURCE
 1

	)

214 #unde‡
_ATFILE_SOURCE


215 
	#_ATFILE_SOURCE
 1

	)

220 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

221 || (!
deföed
 
	g__STRICT_ANSI__
 \

222 && !
deföed
 
	g_ISOC99_SOURCE
 && !deföed 
	g_ISOC11_SOURCE
 \

223 && !
deföed
 
	g_ISOC2X_SOURCE
 \

224 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

225 && !
deföed
 
	g_XOPEN_SOURCE
))

226 #unde‡
_DEFAULT_SOURCE


227 
	#_DEFAULT_SOURCE
 1

	)

231 #i‡(
deföed
 
_ISOC2X_SOURCE
 \

232 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ > 201710L))

233 
	#__GLIBC_USE_ISOC2X
 1

	)

235 
	#__GLIBC_USE_ISOC2X
 0

	)

239 #i‡(
deföed
 
_ISOC11_SOURCE
 || deföed 
_ISOC2X_SOURCE
 \

240 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

241 
	#__USE_ISOC11
 1

	)

245 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

246 || 
deföed
 
_ISOC2X_SOURCE
 \

247 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

248 
	#__USE_ISOC99
 1

	)

252 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

253 || 
deföed
 
_ISOC2X_SOURCE
 \

254 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

255 
	#__USE_ISOC95
 1

	)

258 #ifde‡
__˝lu•lus


260 #i‡
__˝lu•lus
 >= 201703L

261 
	#__USE_ISOC11
 1

	)

265 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


266 
	#__USE_ISOCXX11
 1

	)

267 
	#__USE_ISOC99
 1

	)

274 #ifde‡
_DEFAULT_SOURCE


275 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


276 
	#__USE_POSIX_IMPLICITLY
 1

	)

278 #unde‡
_POSIX_SOURCE


279 
	#_POSIX_SOURCE
 1

	)

280 #unde‡
_POSIX_C_SOURCE


281 
	#_POSIX_C_SOURCE
 200809L

	)

284 #i‡((!
deföed
 
__STRICT_ANSI__
 \

285 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

286 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

287 
	#_POSIX_SOURCE
 1

	)

288 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

289 
	#_POSIX_C_SOURCE
 2

	)

290 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

291 
	#_POSIX_C_SOURCE
 199506L

	)

292 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

293 
	#_POSIX_C_SOURCE
 200112L

	)

295 
	#_POSIX_C_SOURCE
 200809L

	)

297 
	#__USE_POSIX_IMPLICITLY
 1

	)

306 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

307 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

308 
	#_POSIX_SOURCE
 1

	)

309 #unde‡
_POSIX_C_SOURCE


310 
	#_POSIX_C_SOURCE
 199506L

	)

313 #i‡(
deföed
 
_POSIX_SOURCE
 \

314 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

315 || 
deföed
 
_XOPEN_SOURCE
)

316 
	#__USE_POSIX
 1

	)

319 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


320 
	#__USE_POSIX2
 1

	)

323 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

324 
	#__USE_POSIX199309
 1

	)

327 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

328 
	#__USE_POSIX199506
 1

	)

331 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

332 
	#__USE_XOPEN2K
 1

	)

333 #unde‡
__USE_ISOC95


334 
	#__USE_ISOC95
 1

	)

335 #unde‡
__USE_ISOC99


336 
	#__USE_ISOC99
 1

	)

339 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

340 
	#__USE_XOPEN2K8
 1

	)

341 #unde‡
_ATFILE_SOURCE


342 
	#_ATFILE_SOURCE
 1

	)

345 #ifdef 
_XOPEN_SOURCE


346 
	#__USE_XOPEN
 1

	)

347 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

348 
	#__USE_XOPEN_EXTENDED
 1

	)

349 
	#__USE_UNIX98
 1

	)

350 #unde‡
_LARGEFILE_SOURCE


351 
	#_LARGEFILE_SOURCE
 1

	)

352 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

353 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

354 
	#__USE_XOPEN2K8
 1

	)

355 
	#__USE_XOPEN2K8XSI
 1

	)

357 
	#__USE_XOPEN2K
 1

	)

358 
	#__USE_XOPEN2KXSI
 1

	)

359 #unde‡
__USE_ISOC95


360 
	#__USE_ISOC95
 1

	)

361 #unde‡
__USE_ISOC99


362 
	#__USE_ISOC99
 1

	)

365 #ifde‡
_XOPEN_SOURCE_EXTENDED


366 
	#__USE_XOPEN_EXTENDED
 1

	)

371 #ifde‡
_LARGEFILE_SOURCE


372 
	#__USE_LARGEFILE
 1

	)

375 #ifde‡
_LARGEFILE64_SOURCE


376 
	#__USE_LARGEFILE64
 1

	)

379 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

380 
	#__USE_FILE_OFFSET64
 1

	)

383 #i‡
deföed
 
_DEFAULT_SOURCE


384 
	#__USE_MISC
 1

	)

387 #ifdef 
_ATFILE_SOURCE


388 
	#__USE_ATFILE
 1

	)

391 #ifdef 
_GNU_SOURCE


392 
	#__USE_GNU
 1

	)

395 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

396 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

397 #i‡
_FORTIFY_SOURCE
 > 1

398 
	#__USE_FORTIFY_LEVEL
 2

	)

400 
	#__USE_FORTIFY_LEVEL
 1

	)

403 
	#__USE_FORTIFY_LEVEL
 0

	)

410 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


411 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

413 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

428 #i‡(
deföed
 
__USE_GNU
 \

429 && (
deföed
 
	g__˝lu•lus
 \

430 ? (
	g__˝lu•lus
 < 201103L && !
deföed
 
	g__GXX_EXPERIMENTAL_CXX0X__
) \

431 : (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 199901L)))

432 
	#__GLIBC_USE_DEPRECATED_SCANF
 1

	)

434 
	#__GLIBC_USE_DEPRECATED_SCANF
 0

	)

439 
	~<°dc-¥edef.h
>

447 #unde‡
__GNU_LIBRARY__


448 
	#__GNU_LIBRARY__
 6

	)

452 
	#__GLIBC__
 2

	)

453 
	#__GLIBC_MINOR__
 31

	)

455 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

456 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

459 #i‚de‡
__ASSEMBLER__


460 #i‚de‡
_SYS_CDEFS_H


461 
	~<sys/cdefs.h
>

466 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


467 
	#__USE_LARGEFILE
 1

	)

468 
	#__USE_LARGEFILE64
 1

	)

474 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

475 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

476 && 
deföed
 
	g__exã∫_ölöe


477 
	#__USE_EXTERN_INLINES
 1

	)

485 
	~<gnu/°ubs.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

	@
1
.
1
/usr/include
23
440
client_props.c
client_shared.c
client_shared.h
pub_client.c
pub_shared.c
pub_shared.h
rr_client.c
sub_client.c
sub_client_output.c
sub_client_output.h
/usr/include/assert.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/features.h
/usr/include/stdc-predef.h
